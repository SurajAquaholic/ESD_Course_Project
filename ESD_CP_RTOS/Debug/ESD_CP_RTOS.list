
ESD_CP_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bb4  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f00  08006f00  00020c98  2**0
                  CONTENTS
  4 .ARM          00000008  08006f00  08006f00  00016f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f08  08006f08  00020c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f08  08006f08  00016f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000c98  20000000  08006f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000450c  20000c98  08007ba8  00020c98  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200051a4  08007ba8  000251a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020c98  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a099  00000000  00000000  00020cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003818  00000000  00000000  0003ad61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  0003e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  0003f880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018eff  00000000  00000000  00040a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b32  00000000  00000000  0005991f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096895  00000000  00000000  00070451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00106ce6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005104  00000000  00000000  00106d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000c98 	.word	0x20000c98
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005334 	.word	0x08005334

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000c9c 	.word	0x20000c9c
 80001dc:	08005334 	.word	0x08005334

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	db0b      	blt.n	8000502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	f003 021f 	and.w	r2, r3, #31
 80004f0:	4907      	ldr	r1, [pc, #28]	; (8000510 <__NVIC_EnableIRQ+0x38>)
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	095b      	lsrs	r3, r3, #5
 80004f8:	2001      	movs	r0, #1
 80004fa:	fa00 f202 	lsl.w	r2, r0, r2
 80004fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e000e100 	.word	0xe000e100

08000514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000524:	2b00      	cmp	r3, #0
 8000526:	db0a      	blt.n	800053e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	490c      	ldr	r1, [pc, #48]	; (8000560 <__NVIC_SetPriority+0x4c>)
 800052e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000532:	0112      	lsls	r2, r2, #4
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	440b      	add	r3, r1
 8000538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800053c:	e00a      	b.n	8000554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4908      	ldr	r1, [pc, #32]	; (8000564 <__NVIC_SetPriority+0x50>)
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	f003 030f 	and.w	r3, r3, #15
 800054a:	3b04      	subs	r3, #4
 800054c:	0112      	lsls	r2, r2, #4
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	440b      	add	r3, r1
 8000552:	761a      	strb	r2, [r3, #24]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	e000e100 	.word	0xe000e100
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <adc_init>:
  21000, 22000, 23000, 24000, 25000, 26000, 27000, 28000, 29000
};


void adc_init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= MASK(ENABLE_, GPIOA_CLOCK); // Enable clock source for PORT A
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <adc_init+0x80>)
 800056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000570:	4a1d      	ldr	r2, [pc, #116]	; (80005e8 <adc_init+0x80>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= MASK(ANALOG_MODE, PA0); // PA0 pin is Analog Mode
 8000578:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <adc_init+0x84>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a1b      	ldr	r2, [pc, #108]	; (80005ec <adc_init+0x84>)
 800057e:	f043 0303 	orr.w	r3, r3, #3
 8000582:	6013      	str	r3, [r2, #0]
	RCC->APB2ENR |= MASK(ENABLE_, ADC_CLOCK);  // Enable clock source for ADC1
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <adc_init+0x80>)
 8000586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000588:	4a17      	ldr	r2, [pc, #92]	; (80005e8 <adc_init+0x80>)
 800058a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800058e:	6453      	str	r3, [r2, #68]	; 0x44
	ADC1->CR1 |= MASK(ENABLE_, ADC_RESOLUTION);  //  set ADC resolution to 10bit i.e. max is 1023
 8000590:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <adc_init+0x88>)
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	4a16      	ldr	r2, [pc, #88]	; (80005f0 <adc_init+0x88>)
 8000596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800059a:	6053      	str	r3, [r2, #4]
	ADC1->CR2 &= ~ MASK(ENABLE_, ADC_ENABLE);  //  ADC disable
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <adc_init+0x88>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <adc_init+0x88>)
 80005a2:	f023 0301 	bic.w	r3, r3, #1
 80005a6:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= 0; // Enable ADC 0th Channel
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <adc_init+0x88>)
 80005aa:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <adc_init+0x88>)
 80005ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ae:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->CR1 |= MASK(ENABLE_, INTERRUPT_EOC); //end of conversion interrupt
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <adc_init+0x88>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <adc_init+0x88>)
 80005b6:	f043 0320 	orr.w	r3, r3, #32
 80005ba:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |=  MASK(ENABLE_, ADC_ENABLE);  // ADC ON
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <adc_init+0x88>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <adc_init+0x88>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6093      	str	r3, [r2, #8]
	NVIC_EnableIRQ(ADC_IRQn);
 80005c8:	2012      	movs	r0, #18
 80005ca:	f7ff ff85 	bl	80004d8 <__NVIC_EnableIRQ>
	NVIC_SetPriority(ADC_IRQn,2);
 80005ce:	2102      	movs	r1, #2
 80005d0:	2012      	movs	r0, #18
 80005d2:	f7ff ff9f 	bl	8000514 <__NVIC_SetPriority>
	ADC1->CR2 |= MASK(ENABLE_, START_CONVERSION);  // Start  ADC conversion
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <adc_init+0x88>)
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <adc_init+0x88>)
 80005dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80005e0:	6093      	str	r3, [r2, #8]
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000
 80005f0:	40012000 	.word	0x40012000

080005f4 <ADC_IRQHandler>:


void ADC_IRQHandler()
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	//store the DR register contents in a variable,
	//no need to clear the EOC as its cleared when you read the DR register
	if(ADC1->SR & MASK(ENABLE_, EOC))
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <ADC_IRQHandler+0x2c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 0302 	and.w	r3, r3, #2
 8000600:	2b00      	cmp	r3, #0
 8000602:	d008      	beq.n	8000616 <ADC_IRQHandler+0x22>
	{
		adc_value = ADC1->DR;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <ADC_IRQHandler+0x2c>)
 8000606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000608:	ee07 3a90 	vmov	s15, r3
 800060c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <ADC_IRQHandler+0x30>)
 8000612:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40012000 	.word	0x40012000
 8000624:	20000cb4 	.word	0x20000cb4

08000628 <calculate_temperature>:

void calculate_temperature()
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
	float analog_voltage = 0;
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
	int ntc_resistance = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	603b      	str	r3, [r7, #0]
	analog_voltage = (3*adc_value)/1023; //gets the analog voltage corresponding to adc output value
 8000638:	4ba8      	ldr	r3, [pc, #672]	; (80008dc <calculate_temperature+0x2b4>)
 800063a:	edd3 7a00 	vldr	s15, [r3]
 800063e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000642:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000646:	eddf 6aa6 	vldr	s13, [pc, #664]	; 80008e0 <calculate_temperature+0x2b8>
 800064a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800064e:	edc7 7a01 	vstr	s15, [r7, #4]
	ntc_resistance = ((-analog_voltage*10000)/(analog_voltage-3)); //3 is vcc, 10k is nominal resistance
 8000652:	edd7 7a01 	vldr	s15, [r7, #4]
 8000656:	eef1 7a67 	vneg.f32	s15, s15
 800065a:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80008e4 <calculate_temperature+0x2bc>
 800065e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000662:	edd7 7a01 	vldr	s15, [r7, #4]
 8000666:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800066a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800066e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000676:	ee17 3a90 	vmov	r3, s15
 800067a:	603b      	str	r3, [r7, #0]
	if(ntc_resistance == lookupTable[28])
 800067c:	f247 1248 	movw	r2, #29000	; 0x7148
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	4293      	cmp	r3, r2
 8000684:	d103      	bne.n	800068e <calculate_temperature+0x66>
	{
		temperature = 2;
 8000686:	4b98      	ldr	r3, [pc, #608]	; (80008e8 <calculate_temperature+0x2c0>)
 8000688:	2202      	movs	r2, #2
 800068a:	601a      	str	r2, [r3, #0]
	}
	else if(ntc_resistance < lookupTable[1] && ntc_resistance >= lookupTable[0])
	{
		temperature = 95;
	}
}
 800068c:	e190      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[28] && ntc_resistance >= lookupTable[27])
 800068e:	f247 1248 	movw	r2, #29000	; 0x7148
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	4293      	cmp	r3, r2
 8000696:	da08      	bge.n	80006aa <calculate_temperature+0x82>
 8000698:	f646 5260 	movw	r2, #28000	; 0x6d60
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	4293      	cmp	r3, r2
 80006a0:	db03      	blt.n	80006aa <calculate_temperature+0x82>
		temperature = 3;
 80006a2:	4b91      	ldr	r3, [pc, #580]	; (80008e8 <calculate_temperature+0x2c0>)
 80006a4:	2203      	movs	r2, #3
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	e182      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[27] && ntc_resistance >= lookupTable[26])
 80006aa:	f646 5260 	movw	r2, #28000	; 0x6d60
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	4293      	cmp	r3, r2
 80006b2:	da08      	bge.n	80006c6 <calculate_temperature+0x9e>
 80006b4:	f646 1278 	movw	r2, #27000	; 0x6978
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	4293      	cmp	r3, r2
 80006bc:	db03      	blt.n	80006c6 <calculate_temperature+0x9e>
		temperature = 4;
 80006be:	4b8a      	ldr	r3, [pc, #552]	; (80008e8 <calculate_temperature+0x2c0>)
 80006c0:	2204      	movs	r2, #4
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	e174      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[26] && ntc_resistance >= lookupTable[25])
 80006c6:	f646 1278 	movw	r2, #27000	; 0x6978
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	4293      	cmp	r3, r2
 80006ce:	da08      	bge.n	80006e2 <calculate_temperature+0xba>
 80006d0:	f246 5290 	movw	r2, #26000	; 0x6590
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	4293      	cmp	r3, r2
 80006d8:	db03      	blt.n	80006e2 <calculate_temperature+0xba>
		temperature = 5;
 80006da:	4b83      	ldr	r3, [pc, #524]	; (80008e8 <calculate_temperature+0x2c0>)
 80006dc:	2205      	movs	r2, #5
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	e166      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[25] && ntc_resistance >= lookupTable[24])
 80006e2:	f246 5290 	movw	r2, #26000	; 0x6590
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	4293      	cmp	r3, r2
 80006ea:	da08      	bge.n	80006fe <calculate_temperature+0xd6>
 80006ec:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	4293      	cmp	r3, r2
 80006f4:	db03      	blt.n	80006fe <calculate_temperature+0xd6>
		temperature = 6;
 80006f6:	4b7c      	ldr	r3, [pc, #496]	; (80008e8 <calculate_temperature+0x2c0>)
 80006f8:	2206      	movs	r2, #6
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	e158      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[24] && ntc_resistance >= lookupTable[23])
 80006fe:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	4293      	cmp	r3, r2
 8000706:	da08      	bge.n	800071a <calculate_temperature+0xf2>
 8000708:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	4293      	cmp	r3, r2
 8000710:	db03      	blt.n	800071a <calculate_temperature+0xf2>
		temperature = 7;
 8000712:	4b75      	ldr	r3, [pc, #468]	; (80008e8 <calculate_temperature+0x2c0>)
 8000714:	2207      	movs	r2, #7
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	e14a      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[23] && ntc_resistance >= lookupTable[22])
 800071a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	4293      	cmp	r3, r2
 8000722:	da08      	bge.n	8000736 <calculate_temperature+0x10e>
 8000724:	f645 12d8 	movw	r2, #23000	; 0x59d8
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	4293      	cmp	r3, r2
 800072c:	db03      	blt.n	8000736 <calculate_temperature+0x10e>
		temperature = 8;
 800072e:	4b6e      	ldr	r3, [pc, #440]	; (80008e8 <calculate_temperature+0x2c0>)
 8000730:	2208      	movs	r2, #8
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	e13c      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[22] && ntc_resistance >= lookupTable[21])
 8000736:	f645 12d8 	movw	r2, #23000	; 0x59d8
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	4293      	cmp	r3, r2
 800073e:	da08      	bge.n	8000752 <calculate_temperature+0x12a>
 8000740:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	4293      	cmp	r3, r2
 8000748:	db03      	blt.n	8000752 <calculate_temperature+0x12a>
		temperature = 9;
 800074a:	4b67      	ldr	r3, [pc, #412]	; (80008e8 <calculate_temperature+0x2c0>)
 800074c:	2209      	movs	r2, #9
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	e12e      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[21] && ntc_resistance >= lookupTable[20])
 8000752:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	4293      	cmp	r3, r2
 800075a:	da08      	bge.n	800076e <calculate_temperature+0x146>
 800075c:	f245 2208 	movw	r2, #21000	; 0x5208
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	4293      	cmp	r3, r2
 8000764:	db03      	blt.n	800076e <calculate_temperature+0x146>
		temperature = 10;
 8000766:	4b60      	ldr	r3, [pc, #384]	; (80008e8 <calculate_temperature+0x2c0>)
 8000768:	220a      	movs	r2, #10
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	e120      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[20] && ntc_resistance >= lookupTable[19])
 800076e:	f245 2208 	movw	r2, #21000	; 0x5208
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	4293      	cmp	r3, r2
 8000776:	da08      	bge.n	800078a <calculate_temperature+0x162>
 8000778:	f644 6220 	movw	r2, #20000	; 0x4e20
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	4293      	cmp	r3, r2
 8000780:	db03      	blt.n	800078a <calculate_temperature+0x162>
		temperature = 11;
 8000782:	4b59      	ldr	r3, [pc, #356]	; (80008e8 <calculate_temperature+0x2c0>)
 8000784:	220b      	movs	r2, #11
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	e112      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[19] && ntc_resistance >= lookupTable[18])
 800078a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	4293      	cmp	r3, r2
 8000792:	da08      	bge.n	80007a6 <calculate_temperature+0x17e>
 8000794:	f644 2238 	movw	r2, #19000	; 0x4a38
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	4293      	cmp	r3, r2
 800079c:	db03      	blt.n	80007a6 <calculate_temperature+0x17e>
		temperature = 12;
 800079e:	4b52      	ldr	r3, [pc, #328]	; (80008e8 <calculate_temperature+0x2c0>)
 80007a0:	220c      	movs	r2, #12
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	e104      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[18] && ntc_resistance >= lookupTable[17])
 80007a6:	f644 2238 	movw	r2, #19000	; 0x4a38
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	4293      	cmp	r3, r2
 80007ae:	da08      	bge.n	80007c2 <calculate_temperature+0x19a>
 80007b0:	f244 6250 	movw	r2, #18000	; 0x4650
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	4293      	cmp	r3, r2
 80007b8:	db03      	blt.n	80007c2 <calculate_temperature+0x19a>
		temperature = 13;
 80007ba:	4b4b      	ldr	r3, [pc, #300]	; (80008e8 <calculate_temperature+0x2c0>)
 80007bc:	220d      	movs	r2, #13
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	e0f6      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[17] && ntc_resistance >= lookupTable[16])
 80007c2:	f244 6250 	movw	r2, #18000	; 0x4650
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	4293      	cmp	r3, r2
 80007ca:	da08      	bge.n	80007de <calculate_temperature+0x1b6>
 80007cc:	f244 2268 	movw	r2, #17000	; 0x4268
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	4293      	cmp	r3, r2
 80007d4:	db03      	blt.n	80007de <calculate_temperature+0x1b6>
		temperature = 14;
 80007d6:	4b44      	ldr	r3, [pc, #272]	; (80008e8 <calculate_temperature+0x2c0>)
 80007d8:	220e      	movs	r2, #14
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	e0e8      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[16] && ntc_resistance >= lookupTable[15])
 80007de:	f244 2268 	movw	r2, #17000	; 0x4268
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	4293      	cmp	r3, r2
 80007e6:	da08      	bge.n	80007fa <calculate_temperature+0x1d2>
 80007e8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	4293      	cmp	r3, r2
 80007f0:	db03      	blt.n	80007fa <calculate_temperature+0x1d2>
		temperature = 15;
 80007f2:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <calculate_temperature+0x2c0>)
 80007f4:	220f      	movs	r2, #15
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	e0da      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[15] && ntc_resistance >= lookupTable[14])
 80007fa:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	4293      	cmp	r3, r2
 8000802:	da08      	bge.n	8000816 <calculate_temperature+0x1ee>
 8000804:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	4293      	cmp	r3, r2
 800080c:	db03      	blt.n	8000816 <calculate_temperature+0x1ee>
		temperature = 17;
 800080e:	4b36      	ldr	r3, [pc, #216]	; (80008e8 <calculate_temperature+0x2c0>)
 8000810:	2211      	movs	r2, #17
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	e0cc      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[14] && ntc_resistance >= lookupTable[13])
 8000816:	f643 2298 	movw	r2, #15000	; 0x3a98
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	4293      	cmp	r3, r2
 800081e:	da08      	bge.n	8000832 <calculate_temperature+0x20a>
 8000820:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	4293      	cmp	r3, r2
 8000828:	db03      	blt.n	8000832 <calculate_temperature+0x20a>
		temperature = 19;
 800082a:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <calculate_temperature+0x2c0>)
 800082c:	2213      	movs	r2, #19
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	e0be      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[13] && ntc_resistance >= lookupTable[12])
 8000832:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	4293      	cmp	r3, r2
 800083a:	da08      	bge.n	800084e <calculate_temperature+0x226>
 800083c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	4293      	cmp	r3, r2
 8000844:	db03      	blt.n	800084e <calculate_temperature+0x226>
		temperature = 20;
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <calculate_temperature+0x2c0>)
 8000848:	2214      	movs	r2, #20
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	e0b0      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[12] && ntc_resistance >= lookupTable[11])
 800084e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	4293      	cmp	r3, r2
 8000856:	da08      	bge.n	800086a <calculate_temperature+0x242>
 8000858:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	4293      	cmp	r3, r2
 8000860:	db03      	blt.n	800086a <calculate_temperature+0x242>
		temperature = 22;
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <calculate_temperature+0x2c0>)
 8000864:	2216      	movs	r2, #22
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	e0a2      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[11] && ntc_resistance >= lookupTable[10])
 800086a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	4293      	cmp	r3, r2
 8000872:	da08      	bge.n	8000886 <calculate_temperature+0x25e>
 8000874:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	4293      	cmp	r3, r2
 800087c:	db03      	blt.n	8000886 <calculate_temperature+0x25e>
		temperature = 23;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <calculate_temperature+0x2c0>)
 8000880:	2217      	movs	r2, #23
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	e094      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[10] && ntc_resistance >= lookupTable[9])
 8000886:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	4293      	cmp	r3, r2
 800088e:	da08      	bge.n	80008a2 <calculate_temperature+0x27a>
 8000890:	f242 7210 	movw	r2, #10000	; 0x2710
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	4293      	cmp	r3, r2
 8000898:	db03      	blt.n	80008a2 <calculate_temperature+0x27a>
		temperature = 25;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <calculate_temperature+0x2c0>)
 800089c:	2219      	movs	r2, #25
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	e086      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[9] && ntc_resistance >= lookupTable[8])
 80008a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	4293      	cmp	r3, r2
 80008aa:	da08      	bge.n	80008be <calculate_temperature+0x296>
 80008ac:	f242 3228 	movw	r2, #9000	; 0x2328
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	4293      	cmp	r3, r2
 80008b4:	db03      	blt.n	80008be <calculate_temperature+0x296>
		temperature = 28;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <calculate_temperature+0x2c0>)
 80008b8:	221c      	movs	r2, #28
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	e078      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[8] && ntc_resistance >= lookupTable[7])
 80008be:	f242 3228 	movw	r2, #9000	; 0x2328
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	4293      	cmp	r3, r2
 80008c6:	da11      	bge.n	80008ec <calculate_temperature+0x2c4>
 80008c8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	4293      	cmp	r3, r2
 80008d0:	db0c      	blt.n	80008ec <calculate_temperature+0x2c4>
		temperature = 33;
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <calculate_temperature+0x2c0>)
 80008d4:	2221      	movs	r2, #33	; 0x21
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	e06a      	b.n	80009b0 <calculate_temperature+0x388>
 80008da:	bf00      	nop
 80008dc:	20000cb4 	.word	0x20000cb4
 80008e0:	447fc000 	.word	0x447fc000
 80008e4:	461c4000 	.word	0x461c4000
 80008e8:	20000cb8 	.word	0x20000cb8
	else if(ntc_resistance < lookupTable[7] && ntc_resistance >= lookupTable[6])
 80008ec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	4293      	cmp	r3, r2
 80008f4:	da08      	bge.n	8000908 <calculate_temperature+0x2e0>
 80008f6:	f641 3258 	movw	r2, #7000	; 0x1b58
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	4293      	cmp	r3, r2
 80008fe:	db03      	blt.n	8000908 <calculate_temperature+0x2e0>
		temperature = 35;
 8000900:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <calculate_temperature+0x394>)
 8000902:	2223      	movs	r2, #35	; 0x23
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	e053      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[6] && ntc_resistance >= lookupTable[5])
 8000908:	f641 3258 	movw	r2, #7000	; 0x1b58
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	4293      	cmp	r3, r2
 8000910:	da08      	bge.n	8000924 <calculate_temperature+0x2fc>
 8000912:	f241 7270 	movw	r2, #6000	; 0x1770
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	4293      	cmp	r3, r2
 800091a:	db03      	blt.n	8000924 <calculate_temperature+0x2fc>
		temperature = 40;
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <calculate_temperature+0x394>)
 800091e:	2228      	movs	r2, #40	; 0x28
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	e045      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[5] && ntc_resistance >= lookupTable[4])
 8000924:	f241 7270 	movw	r2, #6000	; 0x1770
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	4293      	cmp	r3, r2
 800092c:	da08      	bge.n	8000940 <calculate_temperature+0x318>
 800092e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	4293      	cmp	r3, r2
 8000936:	db03      	blt.n	8000940 <calculate_temperature+0x318>
		temperature = 45;
 8000938:	4b20      	ldr	r3, [pc, #128]	; (80009bc <calculate_temperature+0x394>)
 800093a:	222d      	movs	r2, #45	; 0x2d
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	e037      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[4] && ntc_resistance >= lookupTable[3])
 8000940:	f241 3288 	movw	r2, #5000	; 0x1388
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	4293      	cmp	r3, r2
 8000948:	da08      	bge.n	800095c <calculate_temperature+0x334>
 800094a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	4293      	cmp	r3, r2
 8000952:	db03      	blt.n	800095c <calculate_temperature+0x334>
		temperature = 50;
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <calculate_temperature+0x394>)
 8000956:	2232      	movs	r2, #50	; 0x32
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	e029      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[3] && ntc_resistance >= lookupTable[2])
 800095c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	4293      	cmp	r3, r2
 8000964:	da08      	bge.n	8000978 <calculate_temperature+0x350>
 8000966:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	4293      	cmp	r3, r2
 800096e:	db03      	blt.n	8000978 <calculate_temperature+0x350>
		temperature = 55;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <calculate_temperature+0x394>)
 8000972:	2237      	movs	r2, #55	; 0x37
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	e01b      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[2] && ntc_resistance >= lookupTable[1])
 8000978:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	4293      	cmp	r3, r2
 8000980:	da08      	bge.n	8000994 <calculate_temperature+0x36c>
 8000982:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	4293      	cmp	r3, r2
 800098a:	db03      	blt.n	8000994 <calculate_temperature+0x36c>
		temperature = 75;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <calculate_temperature+0x394>)
 800098e:	224b      	movs	r2, #75	; 0x4b
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	e00d      	b.n	80009b0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[1] && ntc_resistance >= lookupTable[0])
 8000994:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	4293      	cmp	r3, r2
 800099c:	da08      	bge.n	80009b0 <calculate_temperature+0x388>
 800099e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	4293      	cmp	r3, r2
 80009a6:	db03      	blt.n	80009b0 <calculate_temperature+0x388>
		temperature = 95;
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <calculate_temperature+0x394>)
 80009aa:	225f      	movs	r2, #95	; 0x5f
 80009ac:	601a      	str	r2, [r3, #0]
}
 80009ae:	e7ff      	b.n	80009b0 <calculate_temperature+0x388>
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	20000cb8 	.word	0x20000cb8

080009c0 <get_temp>:

int get_temp(void){
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
	return temperature;
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <get_temp+0x14>)
 80009c6:	681b      	ldr	r3, [r3, #0]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000cb8 	.word	0x20000cb8

080009d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <vApplicationGetIdleTaskMemory+0x2c>)
 80009e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <vApplicationGetIdleTaskMemory+0x30>)
 80009ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009f6:	bf00      	nop
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000cbc 	.word	0x20000cbc
 8000a08:	20000d70 	.word	0x20000d70

08000a0c <ir_init>:
//	}
//}


void ir_init()
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= MASK(ENABLE_, GPIOA_EN); //Enable the Clock for GPIO A
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <ir_init+0x7c>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	4a1c      	ldr	r2, [pc, #112]	; (8000a88 <ir_init+0x7c>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~(MASK(INPUT_MODE, PA7_MODER)); //Set the mode to GPIO Input for PA7
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <ir_init+0x80>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a1a      	ldr	r2, [pc, #104]	; (8000a8c <ir_init+0x80>)
 8000a22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a26:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR |= MASK(ENABLE_, PUPD_PA7); //Configure a Pull down resistor to PA7
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <ir_init+0x80>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <ir_init+0x80>)
 8000a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a32:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER &= ~(MASK(INPUT_MODE, PA6_MODER)); //Set the mode to GPIO Input for PA6
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <ir_init+0x80>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <ir_init+0x80>)
 8000a3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a3e:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR |= MASK(ENABLE_, PUPD_PA6); //Configure a Pull down resistor to PA6
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <ir_init+0x80>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <ir_init+0x80>)
 8000a46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a4a:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER &= ~(MASK(INPUT_MODE, PA5)); //Set the mode to GPIO Input for PA7
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <ir_init+0x80>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <ir_init+0x80>)
 8000a52:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000a56:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= MASK(ENABLE_, PA5); //Set output mode to GPIO5 for buzzer
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <ir_init+0x80>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <ir_init+0x80>)
 8000a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a62:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~MASK(ENABLE_, PA5_SET); //output type register push - pull
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <ir_init+0x80>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <ir_init+0x80>)
 8000a6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a6e:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR |= MASK(ENABLE_, PA5); // pull up for buzzer
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <ir_init+0x80>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <ir_init+0x80>)
 8000a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020000 	.word	0x40020000

08000a90 <check_ir_sensor>:

void check_ir_sensor()
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
	if(GPIOA->IDR & MASK(ENABLE_, PA7) && (!(GPIOA->IDR & MASK(ENABLE_, PA6))))
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <check_ir_sensor+0x98>)
 8000a96:	691b      	ldr	r3, [r3, #16]
 8000a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d009      	beq.n	8000ab4 <check_ir_sensor+0x24>
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <check_ir_sensor+0x98>)
 8000aa2:	691b      	ldr	r3, [r3, #16]
 8000aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d103      	bne.n	8000ab4 <check_ir_sensor+0x24>
	{
		vehicle_leftside = true;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <check_ir_sensor+0x9c>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e002      	b.n	8000aba <check_ir_sensor+0x2a>
//		//SSD1306_UpdateScreen();
//		counter = 1;
	}
	else
	{
		vehicle_leftside = false;
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <check_ir_sensor+0x9c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
//			SSD1306_Clear();
//			counter = 0;
//			clear_count_left = 1;
//		}
	}
	if(GPIOA->IDR & MASK(ENABLE_, PA6) && (!(GPIOA->IDR & MASK(ENABLE_, PA7))))
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <check_ir_sensor+0x98>)
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d009      	beq.n	8000ada <check_ir_sensor+0x4a>
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <check_ir_sensor+0x98>)
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d103      	bne.n	8000ada <check_ir_sensor+0x4a>
	{
		vehicle_rightside = true;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <check_ir_sensor+0xa0>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	e002      	b.n	8000ae0 <check_ir_sensor+0x50>
//		//SSD1306_UpdateScreen();
//		counter = 1;
	}
	else
	{
		vehicle_rightside = false;
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <check_ir_sensor+0xa0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
//			SSD1306_Clear();
//			counter = 0;
//			clear_count_right = 1;
//		}
	}
	if(GPIOA->IDR & MASK(ENABLE_, PA7) && GPIOA->IDR & MASK(ENABLE_, PA6))
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <check_ir_sensor+0x98>)
 8000ae2:	691b      	ldr	r3, [r3, #16]
 8000ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d009      	beq.n	8000b00 <check_ir_sensor+0x70>
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <check_ir_sensor+0x98>)
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <check_ir_sensor+0x70>
////			clear_count_both = 0;
////		}
//		GPIOA->BSRR |= MASK(ENABLE_, PA5_SET); //Set the buzzer
//		SSD1306_DrawBitmap(0,0,Both_Side_Alert_NEW, 128, 64, 1);
//		//SSD1306_UpdateScreen();
		vechile_bothside = true;
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <check_ir_sensor+0xa4>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
//		{
//			SSD1306_Clear();
//			clear_count_both = 0;
//		}
	}
}
 8000afe:	e00e      	b.n	8000b1e <check_ir_sensor+0x8e>
	else if((!(GPIOA->IDR & MASK(ENABLE_, PA7))) && (!(GPIOA->IDR & MASK(ENABLE_, PA6))))
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <check_ir_sensor+0x98>)
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d108      	bne.n	8000b1e <check_ir_sensor+0x8e>
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <check_ir_sensor+0x98>)
 8000b0e:	691b      	ldr	r3, [r3, #16]
 8000b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <check_ir_sensor+0x8e>
		vechile_bothside = false;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <check_ir_sensor+0xa4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	20000f70 	.word	0x20000f70
 8000b30:	20000f71 	.word	0x20000f71
 8000b34:	20000f72 	.word	0x20000f72

08000b38 <return_right_status>:


bool return_right_status()
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
	return vehicle_rightside;
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <return_right_status+0x14>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000f71 	.word	0x20000f71

08000b50 <return_left_status>:

bool return_left_status()
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
	return vehicle_leftside;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <return_left_status+0x14>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000f70 	.word	0x20000f70

08000b68 <return_both_status>:

bool return_both_status()
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
	return vechile_bothside;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <return_both_status+0x14>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000f72 	.word	0x20000f72

08000b80 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b80:	b5b0      	push	{r4, r5, r7, lr}
 8000b82:	b096      	sub	sp, #88	; 0x58
 8000b84:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b86:	f001 f937 	bl	8001df8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b8a:	f000 f855 	bl	8000c38 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b8e:	f000 f8df 	bl	8000d50 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000b92:	f000 f8af 	bl	8000cf4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	SSD1306_Init();
 8000b96:	f000 fd5d 	bl	8001654 <SSD1306_Init>
	ir_init();
 8000b9a:	f7ff ff37 	bl	8000a0c <ir_init>
	rtc_init();
 8000b9e:	f000 fb65 	bl	800126c <rtc_init>
	adc_init();
 8000ba2:	f7ff fce1 	bl	8000568 <adc_init>
	SSD1306_Clear();
 8000ba6:	f000 ff7a 	bl	8001a9e <SSD1306_Clear>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <main+0xa0>)
 8000bac:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000bb0:	461d      	mov	r5, r3
 8000bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 f86a 	bl	8003c9e <osThreadCreate>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a15      	ldr	r2, [pc, #84]	; (8000c24 <main+0xa4>)
 8000bce:	6013      	str	r3, [r2, #0]

	/* definition and creation of Sense_IR */
	osThreadDef(Sense_IR, Sense_IR_Entry, osPriorityAboveNormal, 0, 128);
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <main+0xa8>)
 8000bd2:	f107 0420 	add.w	r4, r7, #32
 8000bd6:	461d      	mov	r5, r3
 8000bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Sense_IRHandle = osThreadCreate(osThread(Sense_IR), NULL);
 8000be4:	f107 0320 	add.w	r3, r7, #32
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f003 f857 	bl	8003c9e <osThreadCreate>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <main+0xac>)
 8000bf4:	6013      	str	r3, [r2, #0]

	/* definition and creation of display_oled */
	osThreadDef(display_oled, display_oled_enter, osPriorityNormal, 0, 128);
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <main+0xb0>)
 8000bf8:	1d3c      	adds	r4, r7, #4
 8000bfa:	461d      	mov	r5, r3
 8000bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	display_oledHandle = osThreadCreate(osThread(display_oled), NULL);
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 f846 	bl	8003c9e <osThreadCreate>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <main+0xb4>)
 8000c16:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000c18:	f003 f83a 	bl	8003c90 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000c1c:	e7fe      	b.n	8000c1c <main+0x9c>
 8000c1e:	bf00      	nop
 8000c20:	08005374 	.word	0x08005374
 8000c24:	200050ec 	.word	0x200050ec
 8000c28:	08005390 	.word	0x08005390
 8000c2c:	20005148 	.word	0x20005148
 8000c30:	080053ac 	.word	0x080053ac
 8000c34:	20005144 	.word	0x20005144

08000c38 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b094      	sub	sp, #80	; 0x50
 8000c3c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	2230      	movs	r2, #48	; 0x30
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f004 faa6 	bl	8005198 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <SystemClock_Config+0xb4>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a21      	ldr	r2, [pc, #132]	; (8000cec <SystemClock_Config+0xb4>)
 8000c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <SystemClock_Config+0xb4>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <SystemClock_Config+0xb8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a1b      	ldr	r2, [pc, #108]	; (8000cf0 <SystemClock_Config+0xb8>)
 8000c82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <SystemClock_Config+0xb8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c94:	2302      	movs	r3, #2
 8000c96:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 f8c7 	bl	8002e3c <HAL_RCC_OscConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0x80>
		Error_Handler();
 8000cb4:	f000 f96a 	bl	8000f8c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cb8:	230f      	movs	r3, #15
 8000cba:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 fb2a 	bl	800332c <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xaa>
		Error_Handler();
 8000cde:	f000 f955 	bl	8000f8c <Error_Handler>
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	3750      	adds	r7, #80	; 0x50
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40007000 	.word	0x40007000

08000cf4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000cfa:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <MX_I2C1_Init+0x54>)
 8000cfc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d00:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <MX_I2C1_Init+0x58>)
 8000d02:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d16:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_I2C1_Init+0x50>)
 8000d32:	f001 fb09 	bl	8002348 <HAL_I2C_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000d3c:	f000 f926 	bl	8000f8c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200050f0 	.word	0x200050f0
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	00061a80 	.word	0x00061a80

08000d50 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_GPIO_Init+0x68>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800

08000dbc <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
//  /* Infinite loop */
	while (1) {
 8000dc4:	e7fe      	b.n	8000dc4 <StartDefaultTask+0x8>

08000dc6 <Sense_IR_Entry>:
 * @brief Function implementing the Sense_IR thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Sense_IR_Entry */
void Sense_IR_Entry(void const *argument) {
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Sense_IR_Entry */
	/* Infinite loop */
	for (;;) {
		check_ir_sensor();
 8000dce:	f7ff fe5f 	bl	8000a90 <check_ir_sensor>
		osDelay(100); //100
 8000dd2:	2064      	movs	r0, #100	; 0x64
 8000dd4:	f002 ffaf 	bl	8003d36 <osDelay>
		check_ir_sensor();
 8000dd8:	e7f9      	b.n	8000dce <Sense_IR_Entry+0x8>
	...

08000ddc <display_oled_enter>:
 * @brief Function implementing the display_oled thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_display_oled_enter */
void display_oled_enter(void const *argument) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af02      	add	r7, sp, #8
 8000de2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN display_oled_enter */
	/* Infinite loop */
	for (;;) {
		if (return_left_status() && (!(return_right_status()))) {
 8000de4:	f7ff feb4 	bl	8000b50 <return_left_status>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d02c      	beq.n	8000e48 <display_oled_enter+0x6c>
 8000dee:	f7ff fea3 	bl	8000b38 <return_right_status>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f083 0301 	eor.w	r3, r3, #1
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d024      	beq.n	8000e48 <display_oled_enter+0x6c>
			if (clear_oled_left) {
 8000dfe:	4b52      	ldr	r3, [pc, #328]	; (8000f48 <display_oled_enter+0x16c>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d004      	beq.n	8000e10 <display_oled_enter+0x34>
				SSD1306_Clear();
 8000e06:	f000 fe4a 	bl	8001a9e <SSD1306_Clear>
				clear_oled_left = false;
 8000e0a:	4b4f      	ldr	r3, [pc, #316]	; (8000f48 <display_oled_enter+0x16c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
			}
			GPIOA->BSRR |= MASK(ENABLE_, PA5_SET); //Set the buzzer
 8000e10:	4b4e      	ldr	r3, [pc, #312]	; (8000f4c <display_oled_enter+0x170>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a4d      	ldr	r2, [pc, #308]	; (8000f4c <display_oled_enter+0x170>)
 8000e16:	f043 0320 	orr.w	r3, r3, #32
 8000e1a:	6193      	str	r3, [r2, #24]
			SSD1306_DrawBitmap(0, 0, Left_Alert_NEW, 128, 64, 1);
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	2340      	movs	r3, #64	; 0x40
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	4a4a      	ldr	r2, [pc, #296]	; (8000f50 <display_oled_enter+0x174>)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 fbaa 	bl	8001584 <SSD1306_DrawBitmap>
			SSD1306_UpdateScreen();
 8000e30:	f000 fcd4 	bl	80017dc <SSD1306_UpdateScreen>
			clear_oled_right = true;
 8000e34:	4b47      	ldr	r3, [pc, #284]	; (8000f54 <display_oled_enter+0x178>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
			clear_oled_both = true;
 8000e3a:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <display_oled_enter+0x17c>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
			clear_oled_default = true;
 8000e40:	4b46      	ldr	r3, [pc, #280]	; (8000f5c <display_oled_enter+0x180>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	e07b      	b.n	8000f40 <display_oled_enter+0x164>
		} else if (return_right_status() && (!(return_left_status()))) {
 8000e48:	f7ff fe76 	bl	8000b38 <return_right_status>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d02c      	beq.n	8000eac <display_oled_enter+0xd0>
 8000e52:	f7ff fe7d 	bl	8000b50 <return_left_status>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f083 0301 	eor.w	r3, r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d024      	beq.n	8000eac <display_oled_enter+0xd0>
			if (clear_oled_right) {
 8000e62:	4b3c      	ldr	r3, [pc, #240]	; (8000f54 <display_oled_enter+0x178>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d004      	beq.n	8000e74 <display_oled_enter+0x98>
				SSD1306_Clear();
 8000e6a:	f000 fe18 	bl	8001a9e <SSD1306_Clear>
				clear_oled_right = false;
 8000e6e:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <display_oled_enter+0x178>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
			}
			GPIOA->BSRR |= MASK(ENABLE_, PA5_SET); //Set the buzzer
 8000e74:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <display_oled_enter+0x170>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a34      	ldr	r2, [pc, #208]	; (8000f4c <display_oled_enter+0x170>)
 8000e7a:	f043 0320 	orr.w	r3, r3, #32
 8000e7e:	6193      	str	r3, [r2, #24]
			SSD1306_DrawBitmap(0, 0, Right_Alert_NEW, 128, 64, 1);
 8000e80:	2301      	movs	r3, #1
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	2340      	movs	r3, #64	; 0x40
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	4a35      	ldr	r2, [pc, #212]	; (8000f60 <display_oled_enter+0x184>)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f000 fb78 	bl	8001584 <SSD1306_DrawBitmap>
			SSD1306_UpdateScreen();
 8000e94:	f000 fca2 	bl	80017dc <SSD1306_UpdateScreen>
			clear_oled_left = true;
 8000e98:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <display_oled_enter+0x16c>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
			clear_oled_default = true;
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <display_oled_enter+0x180>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
			clear_oled_both = true;
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <display_oled_enter+0x17c>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e049      	b.n	8000f40 <display_oled_enter+0x164>
		} else if (return_both_status()) {
 8000eac:	f7ff fe5c 	bl	8000b68 <return_both_status>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d024      	beq.n	8000f00 <display_oled_enter+0x124>
			if (clear_oled_both) {
 8000eb6:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <display_oled_enter+0x17c>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d004      	beq.n	8000ec8 <display_oled_enter+0xec>
				SSD1306_Clear();
 8000ebe:	f000 fdee 	bl	8001a9e <SSD1306_Clear>
				clear_oled_both = false;
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <display_oled_enter+0x17c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
			}
			GPIOA->BSRR |= MASK(ENABLE_, PA5_SET); //Set the buzzer
 8000ec8:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <display_oled_enter+0x170>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <display_oled_enter+0x170>)
 8000ece:	f043 0320 	orr.w	r3, r3, #32
 8000ed2:	6193      	str	r3, [r2, #24]
			SSD1306_DrawBitmap(0, 0, Both_Side_Alert_NEW, 128, 64, 1);
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	2340      	movs	r3, #64	; 0x40
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <display_oled_enter+0x188>)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 fb4e 	bl	8001584 <SSD1306_DrawBitmap>
			SSD1306_UpdateScreen();
 8000ee8:	f000 fc78 	bl	80017dc <SSD1306_UpdateScreen>
			clear_oled_left = true;
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <display_oled_enter+0x16c>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
			clear_oled_right = true;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <display_oled_enter+0x178>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
			clear_oled_default = true;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <display_oled_enter+0x180>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	e01f      	b.n	8000f40 <display_oled_enter+0x164>
		} else {
			if (clear_oled_default) {
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <display_oled_enter+0x180>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <display_oled_enter+0x136>
				SSD1306_Clear();
 8000f08:	f000 fdc9 	bl	8001a9e <SSD1306_Clear>
				clear_oled_default = false;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <display_oled_enter+0x180>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
			}
			GPIOA->BSRR |= MASK(ENABLE_, PA5_CLEAR); //Clear the buzzer
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <display_oled_enter+0x170>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <display_oled_enter+0x170>)
 8000f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f1c:	6193      	str	r3, [r2, #24]
			RTC_calculate_date();
 8000f1e:	f000 faa5 	bl	800146c <RTC_calculate_date>
			RTC_calculate_time();
 8000f22:	f000 fa43 	bl	80013ac <RTC_calculate_time>
			calculate_temperature();
 8000f26:	f7ff fb7f 	bl	8000628 <calculate_temperature>
			clear_oled_left = true;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <display_oled_enter+0x16c>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
			clear_oled_right = true;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <display_oled_enter+0x178>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
			clear_oled_both = true;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <display_oled_enter+0x17c>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
			Time_Update();
 8000f3c:	f000 f82c 	bl	8000f98 <Time_Update>
		}
		osDelay(1);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f002 fef8 	bl	8003d36 <osDelay>
		if (return_left_status() && (!(return_right_status()))) {
 8000f46:	e74d      	b.n	8000de4 <display_oled_enter+0x8>
 8000f48:	20000010 	.word	0x20000010
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	20000014 	.word	0x20000014
 8000f54:	20000011 	.word	0x20000011
 8000f58:	20000012 	.word	0x20000012
 8000f5c:	20000013 	.word	0x20000013
 8000f60:	20000814 	.word	0x20000814
 8000f64:	20000414 	.word	0x20000414

08000f68 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000f7a:	f000 ff5f 	bl	8001e3c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40000800 	.word	0x40000800

08000f8c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <Time_Update>:
static char temp_tens  = '\0';
static char temp_ones = '\0';

static char date_string[] ={'0','4','/','3','0','/','2','3','\0'};
static char temp_string[] = {'2','7','C','\0'};
void Time_Update(void){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	//SSD1306_Clear();
	SSD1306_GotoXY (COLON_POSITION,TIME_ROW);
 8000f9c:	2123      	movs	r1, #35	; 0x23
 8000f9e:	203a      	movs	r0, #58	; 0x3a
 8000fa0:	f000 fcc2 	bl	8001928 <SSD1306_GotoXY>
	SSD1306_Putc(':', &Font_16x26, 1);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4999      	ldr	r1, [pc, #612]	; (800120c <Time_Update+0x274>)
 8000fa8:	203a      	movs	r0, #58	; 0x3a
 8000faa:	f000 fcd3 	bl	8001954 <SSD1306_Putc>
	//SSD1306_UpdateScreen(); //display

	/*Calculation to seperate the 10s with the ones*/
		prev_min_val = get_minutes();
 8000fae:	f000 faad 	bl	800150c <get_minutes>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b96      	ldr	r3, [pc, #600]	; (8001210 <Time_Update+0x278>)
 8000fb8:	701a      	strb	r2, [r3, #0]

		min_ones = (prev_min_val % 10) + '0';
 8000fba:	4b95      	ldr	r3, [pc, #596]	; (8001210 <Time_Update+0x278>)
 8000fbc:	781a      	ldrb	r2, [r3, #0]
 8000fbe:	4b95      	ldr	r3, [pc, #596]	; (8001214 <Time_Update+0x27c>)
 8000fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8000fc4:	08d9      	lsrs	r1, r3, #3
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	440b      	add	r3, r1
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	3330      	adds	r3, #48	; 0x30
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b90      	ldr	r3, [pc, #576]	; (8001218 <Time_Update+0x280>)
 8000fd8:	701a      	strb	r2, [r3, #0]

		min_tens = (prev_min_val / 10) + '0';
 8000fda:	4b8d      	ldr	r3, [pc, #564]	; (8001210 <Time_Update+0x278>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4a8d      	ldr	r2, [pc, #564]	; (8001214 <Time_Update+0x27c>)
 8000fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe4:	08db      	lsrs	r3, r3, #3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	3330      	adds	r3, #48	; 0x30
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b8b      	ldr	r3, [pc, #556]	; (800121c <Time_Update+0x284>)
 8000fee:	701a      	strb	r2, [r3, #0]

		SSD1306_GotoXY(MIN_TENS_POSITION, TIME_ROW);
 8000ff0:	2123      	movs	r1, #35	; 0x23
 8000ff2:	2048      	movs	r0, #72	; 0x48
 8000ff4:	f000 fc98 	bl	8001928 <SSD1306_GotoXY>
		SSD1306_Putc(min_tens, &Font_16x26, 1);
 8000ff8:	4b88      	ldr	r3, [pc, #544]	; (800121c <Time_Update+0x284>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4983      	ldr	r1, [pc, #524]	; (800120c <Time_Update+0x274>)
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fca7 	bl	8001954 <SSD1306_Putc>
		//SSD1306_UpdateScreen();

		SSD1306_GotoXY(MIN_ONES_POSITION, TIME_ROW);
 8001006:	2123      	movs	r1, #35	; 0x23
 8001008:	2056      	movs	r0, #86	; 0x56
 800100a:	f000 fc8d 	bl	8001928 <SSD1306_GotoXY>
		SSD1306_Putc(min_ones, &Font_16x26, 1);
 800100e:	4b82      	ldr	r3, [pc, #520]	; (8001218 <Time_Update+0x280>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2201      	movs	r2, #1
 8001014:	497d      	ldr	r1, [pc, #500]	; (800120c <Time_Update+0x274>)
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fc9c 	bl	8001954 <SSD1306_Putc>
		//SSD1306_UpdateScreen();

		/*Calculation to seperate the 10s with the ones*/
		prev_hour_val = get_hours();
 800101c:	f000 fa82 	bl	8001524 <get_hours>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	4b7e      	ldr	r3, [pc, #504]	; (8001220 <Time_Update+0x288>)
 8001026:	701a      	strb	r2, [r3, #0]

		hours_ones = (prev_hour_val % 10)+ '0';
 8001028:	4b7d      	ldr	r3, [pc, #500]	; (8001220 <Time_Update+0x288>)
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	4b79      	ldr	r3, [pc, #484]	; (8001214 <Time_Update+0x27c>)
 800102e:	fba3 1302 	umull	r1, r3, r3, r2
 8001032:	08d9      	lsrs	r1, r3, #3
 8001034:	460b      	mov	r3, r1
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	3330      	adds	r3, #48	; 0x30
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b77      	ldr	r3, [pc, #476]	; (8001224 <Time_Update+0x28c>)
 8001046:	701a      	strb	r2, [r3, #0]

		hours_tens = (prev_hour_val / 10) + '0';
 8001048:	4b75      	ldr	r3, [pc, #468]	; (8001220 <Time_Update+0x288>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4a71      	ldr	r2, [pc, #452]	; (8001214 <Time_Update+0x27c>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	08db      	lsrs	r3, r3, #3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	3330      	adds	r3, #48	; 0x30
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b73      	ldr	r3, [pc, #460]	; (8001228 <Time_Update+0x290>)
 800105c:	701a      	strb	r2, [r3, #0]

		SSD1306_GotoXY(HOURS_TENS_POSITION, TIME_ROW);
 800105e:	2123      	movs	r1, #35	; 0x23
 8001060:	201e      	movs	r0, #30
 8001062:	f000 fc61 	bl	8001928 <SSD1306_GotoXY>
		SSD1306_Putc(hours_tens, &Font_16x26, 1);
 8001066:	4b70      	ldr	r3, [pc, #448]	; (8001228 <Time_Update+0x290>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2201      	movs	r2, #1
 800106c:	4967      	ldr	r1, [pc, #412]	; (800120c <Time_Update+0x274>)
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fc70 	bl	8001954 <SSD1306_Putc>
		//SSD1306_UpdateScreen();

		SSD1306_GotoXY(HOURS_ONES_POSITION, TIME_ROW);
 8001074:	2123      	movs	r1, #35	; 0x23
 8001076:	202c      	movs	r0, #44	; 0x2c
 8001078:	f000 fc56 	bl	8001928 <SSD1306_GotoXY>
		SSD1306_Putc(hours_ones, &Font_16x26, 1);
 800107c:	4b69      	ldr	r3, [pc, #420]	; (8001224 <Time_Update+0x28c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2201      	movs	r2, #1
 8001082:	4962      	ldr	r1, [pc, #392]	; (800120c <Time_Update+0x274>)
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fc65 	bl	8001954 <SSD1306_Putc>
		//SSD1306_UpdateScreen();

		month_val = get_month();
 800108a:	f000 fa63 	bl	8001554 <get_month>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	4b66      	ldr	r3, [pc, #408]	; (800122c <Time_Update+0x294>)
 8001094:	701a      	strb	r2, [r3, #0]

		month_tens = (month_val / 10) + '0';
 8001096:	4b65      	ldr	r3, [pc, #404]	; (800122c <Time_Update+0x294>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4a5e      	ldr	r2, [pc, #376]	; (8001214 <Time_Update+0x27c>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	08db      	lsrs	r3, r3, #3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	3330      	adds	r3, #48	; 0x30
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b61      	ldr	r3, [pc, #388]	; (8001230 <Time_Update+0x298>)
 80010aa:	701a      	strb	r2, [r3, #0]
		date_string[0] = month_tens;
 80010ac:	4b60      	ldr	r3, [pc, #384]	; (8001230 <Time_Update+0x298>)
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	4b60      	ldr	r3, [pc, #384]	; (8001234 <Time_Update+0x29c>)
 80010b2:	701a      	strb	r2, [r3, #0]

		month_ones = (month_val % 10)+ '0';
 80010b4:	4b5d      	ldr	r3, [pc, #372]	; (800122c <Time_Update+0x294>)
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	4b56      	ldr	r3, [pc, #344]	; (8001214 <Time_Update+0x27c>)
 80010ba:	fba3 1302 	umull	r1, r3, r3, r2
 80010be:	08d9      	lsrs	r1, r3, #3
 80010c0:	460b      	mov	r3, r1
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	3330      	adds	r3, #48	; 0x30
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b59      	ldr	r3, [pc, #356]	; (8001238 <Time_Update+0x2a0>)
 80010d2:	701a      	strb	r2, [r3, #0]
		date_string[1] = month_ones;
 80010d4:	4b58      	ldr	r3, [pc, #352]	; (8001238 <Time_Update+0x2a0>)
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	4b56      	ldr	r3, [pc, #344]	; (8001234 <Time_Update+0x29c>)
 80010da:	705a      	strb	r2, [r3, #1]

		date_val = get_day();
 80010dc:	f000 fa46 	bl	800156c <get_day>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b55      	ldr	r3, [pc, #340]	; (800123c <Time_Update+0x2a4>)
 80010e6:	701a      	strb	r2, [r3, #0]

		date_tens = (date_val / 10) + '0';
 80010e8:	4b54      	ldr	r3, [pc, #336]	; (800123c <Time_Update+0x2a4>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4a49      	ldr	r2, [pc, #292]	; (8001214 <Time_Update+0x27c>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	3330      	adds	r3, #48	; 0x30
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b51      	ldr	r3, [pc, #324]	; (8001240 <Time_Update+0x2a8>)
 80010fc:	701a      	strb	r2, [r3, #0]
		date_string[3] = date_tens;
 80010fe:	4b50      	ldr	r3, [pc, #320]	; (8001240 <Time_Update+0x2a8>)
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	4b4c      	ldr	r3, [pc, #304]	; (8001234 <Time_Update+0x29c>)
 8001104:	70da      	strb	r2, [r3, #3]

		date_ones = (date_val % 10)+ '0';
 8001106:	4b4d      	ldr	r3, [pc, #308]	; (800123c <Time_Update+0x2a4>)
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	4b42      	ldr	r3, [pc, #264]	; (8001214 <Time_Update+0x27c>)
 800110c:	fba3 1302 	umull	r1, r3, r3, r2
 8001110:	08d9      	lsrs	r1, r3, #3
 8001112:	460b      	mov	r3, r1
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	b2db      	uxtb	r3, r3
 800111e:	3330      	adds	r3, #48	; 0x30
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b48      	ldr	r3, [pc, #288]	; (8001244 <Time_Update+0x2ac>)
 8001124:	701a      	strb	r2, [r3, #0]
		date_string[4] = date_ones;
 8001126:	4b47      	ldr	r3, [pc, #284]	; (8001244 <Time_Update+0x2ac>)
 8001128:	781a      	ldrb	r2, [r3, #0]
 800112a:	4b42      	ldr	r3, [pc, #264]	; (8001234 <Time_Update+0x29c>)
 800112c:	711a      	strb	r2, [r3, #4]

		year_val = get_year();
 800112e:	f000 fa05 	bl	800153c <get_year>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	4b44      	ldr	r3, [pc, #272]	; (8001248 <Time_Update+0x2b0>)
 8001138:	701a      	strb	r2, [r3, #0]

		year_tens = (year_val / 10) + '0';
 800113a:	4b43      	ldr	r3, [pc, #268]	; (8001248 <Time_Update+0x2b0>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	4a35      	ldr	r2, [pc, #212]	; (8001214 <Time_Update+0x27c>)
 8001140:	fba2 2303 	umull	r2, r3, r2, r3
 8001144:	08db      	lsrs	r3, r3, #3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	3330      	adds	r3, #48	; 0x30
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b3f      	ldr	r3, [pc, #252]	; (800124c <Time_Update+0x2b4>)
 800114e:	701a      	strb	r2, [r3, #0]
		date_string[6] = year_tens;
 8001150:	4b3e      	ldr	r3, [pc, #248]	; (800124c <Time_Update+0x2b4>)
 8001152:	781a      	ldrb	r2, [r3, #0]
 8001154:	4b37      	ldr	r3, [pc, #220]	; (8001234 <Time_Update+0x29c>)
 8001156:	719a      	strb	r2, [r3, #6]

		year_ones = (year_val % 10)+ '0';
 8001158:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <Time_Update+0x2b0>)
 800115a:	781a      	ldrb	r2, [r3, #0]
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <Time_Update+0x27c>)
 800115e:	fba3 1302 	umull	r1, r3, r3, r2
 8001162:	08d9      	lsrs	r1, r3, #3
 8001164:	460b      	mov	r3, r1
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	3330      	adds	r3, #48	; 0x30
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <Time_Update+0x2b8>)
 8001176:	701a      	strb	r2, [r3, #0]
		date_string[7] = year_ones;
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <Time_Update+0x2b8>)
 800117a:	781a      	ldrb	r2, [r3, #0]
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <Time_Update+0x29c>)
 800117e:	71da      	strb	r2, [r3, #7]

		SSD1306_GotoXY (DATE_COLUMN,DATE_ROW);
 8001180:	2100      	movs	r1, #0
 8001182:	2000      	movs	r0, #0
 8001184:	f000 fbd0 	bl	8001928 <SSD1306_GotoXY>
		SSD1306_Puts (date_string, &Font_7x10, 1);
 8001188:	2201      	movs	r2, #1
 800118a:	4932      	ldr	r1, [pc, #200]	; (8001254 <Time_Update+0x2bc>)
 800118c:	4829      	ldr	r0, [pc, #164]	; (8001234 <Time_Update+0x29c>)
 800118e:	f000 fc61 	bl	8001a54 <SSD1306_Puts>
		//SSD1306_UpdateScreen();

		temp_val = get_temp();
 8001192:	f7ff fc15 	bl	80009c0 <get_temp>
 8001196:	4603      	mov	r3, r0
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <Time_Update+0x2c0>)
 800119c:	701a      	strb	r2, [r3, #0]

		temp_tens = (temp_val / 10) + '0';
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <Time_Update+0x2c0>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <Time_Update+0x27c>)
 80011a4:	fba2 2303 	umull	r2, r3, r2, r3
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	3330      	adds	r3, #48	; 0x30
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b2a      	ldr	r3, [pc, #168]	; (800125c <Time_Update+0x2c4>)
 80011b2:	701a      	strb	r2, [r3, #0]
		temp_string[0] = temp_tens;
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <Time_Update+0x2c4>)
 80011b6:	781a      	ldrb	r2, [r3, #0]
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <Time_Update+0x2c8>)
 80011ba:	701a      	strb	r2, [r3, #0]

		temp_ones = (temp_val % 10) + '0';
 80011bc:	4b26      	ldr	r3, [pc, #152]	; (8001258 <Time_Update+0x2c0>)
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <Time_Update+0x27c>)
 80011c2:	fba3 1302 	umull	r1, r3, r3, r2
 80011c6:	08d9      	lsrs	r1, r3, #3
 80011c8:	460b      	mov	r3, r1
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	3330      	adds	r3, #48	; 0x30
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <Time_Update+0x2cc>)
 80011da:	701a      	strb	r2, [r3, #0]
		temp_string[1] = temp_ones;
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <Time_Update+0x2cc>)
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <Time_Update+0x2c8>)
 80011e2:	705a      	strb	r2, [r3, #1]

		SSD1306_GotoXY (TEMP_COLUMN,TEMP_ROW);
 80011e4:	2100      	movs	r1, #0
 80011e6:	2060      	movs	r0, #96	; 0x60
 80011e8:	f000 fb9e 	bl	8001928 <SSD1306_GotoXY>
		SSD1306_Puts (temp_string, &Font_7x10, 1);
 80011ec:	2201      	movs	r2, #1
 80011ee:	4919      	ldr	r1, [pc, #100]	; (8001254 <Time_Update+0x2bc>)
 80011f0:	481b      	ldr	r0, [pc, #108]	; (8001260 <Time_Update+0x2c8>)
 80011f2:	f000 fc2f 	bl	8001a54 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80011f6:	f000 faf1 	bl	80017dc <SSD1306_UpdateScreen>
		ADC1->CR2 |= MASK(ENABLE_, START_CONVERSION); //Start the next conversion
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <Time_Update+0x2d0>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	4a1a      	ldr	r2, [pc, #104]	; (8001268 <Time_Update+0x2d0>)
 8001200:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001204:	6093      	str	r3, [r2, #8]
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008
 8001210:	20000f73 	.word	0x20000f73
 8001214:	cccccccd 	.word	0xcccccccd
 8001218:	20000f75 	.word	0x20000f75
 800121c:	20000f76 	.word	0x20000f76
 8001220:	20000f74 	.word	0x20000f74
 8001224:	20000f77 	.word	0x20000f77
 8001228:	20000f78 	.word	0x20000f78
 800122c:	20000f7a 	.word	0x20000f7a
 8001230:	20000f7f 	.word	0x20000f7f
 8001234:	20000c14 	.word	0x20000c14
 8001238:	20000f7e 	.word	0x20000f7e
 800123c:	20000f79 	.word	0x20000f79
 8001240:	20000f7d 	.word	0x20000f7d
 8001244:	20000f7c 	.word	0x20000f7c
 8001248:	20000f7b 	.word	0x20000f7b
 800124c:	20000f81 	.word	0x20000f81
 8001250:	20000f80 	.word	0x20000f80
 8001254:	20000000 	.word	0x20000000
 8001258:	20000f82 	.word	0x20000f82
 800125c:	20000f83 	.word	0x20000f83
 8001260:	20000c20 	.word	0x20000c20
 8001264:	20000f84 	.word	0x20000f84
 8001268:	40012000 	.word	0x40012000

0800126c <rtc_init>:
static uint8_t Day = 0;
static uint8_t Year = 0;
volatile static int test = 0;

void rtc_init()
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= MASK(ENABLE_,POWER_INTERFACE_CLK); // Enable clock for power interface
 8001270:	4b4b      	ldr	r3, [pc, #300]	; (80013a0 <rtc_init+0x134>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	4a4a      	ldr	r2, [pc, #296]	; (80013a0 <rtc_init+0x134>)
 8001276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127a:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= MASK(ENABLE_,NO_WRITE_PROTECT); // Disable the write protect to RTC
 800127c:	4b49      	ldr	r3, [pc, #292]	; (80013a4 <rtc_init+0x138>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a48      	ldr	r2, [pc, #288]	; (80013a4 <rtc_init+0x138>)
 8001282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001286:	6013      	str	r3, [r2, #0]
	RCC->CSR |= MASK(ENABLE_,LOW_SPEED_OSC); // Enable LSI RC oscillator ON
 8001288:	4b45      	ldr	r3, [pc, #276]	; (80013a0 <rtc_init+0x134>)
 800128a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800128c:	4a44      	ldr	r2, [pc, #272]	; (80013a0 <rtc_init+0x134>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6753      	str	r3, [r2, #116]	; 0x74
	while(!(RCC->CSR & MASK(ENABLE_,LOW_SPEED_OSC_READY))); // Wait till the LSI RC oscillator is ON
 8001294:	bf00      	nop
 8001296:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <rtc_init+0x134>)
 8001298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f9      	beq.n	8001296 <rtc_init+0x2a>
	RCC->BDCR |= MASK(ENABLE_,RTC_CLOCK) | MASK(ENABLE_,LSI_CLOCK); // Enable clock for RTC module and select LSI as clock source
 80012a2:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <rtc_init+0x134>)
 80012a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a6:	4a3e      	ldr	r2, [pc, #248]	; (80013a0 <rtc_init+0x134>)
 80012a8:	f443 4302 	orr.w	r3, r3, #33280	; 0x8200
 80012ac:	6713      	str	r3, [r2, #112]	; 0x70
	RTC->WPR |= 0xCA; // Unlock the write protection by using the key
 80012ae:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <rtc_init+0x13c>)
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	4a3d      	ldr	r2, [pc, #244]	; (80013a8 <rtc_init+0x13c>)
 80012b4:	f043 03ca 	orr.w	r3, r3, #202	; 0xca
 80012b8:	6253      	str	r3, [r2, #36]	; 0x24
	RTC->WPR |= 0x53; // Unlock the write protection by using the key
 80012ba:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <rtc_init+0x13c>)
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	4a3a      	ldr	r2, [pc, #232]	; (80013a8 <rtc_init+0x13c>)
 80012c0:	f043 0353 	orr.w	r3, r3, #83	; 0x53
 80012c4:	6253      	str	r3, [r2, #36]	; 0x24
	RTC->ISR |= MASK(ENABLE_,INIT_MODE); // The calendar counter is stopped to allow update
 80012c6:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <rtc_init+0x13c>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	4a37      	ldr	r2, [pc, #220]	; (80013a8 <rtc_init+0x13c>)
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	60d3      	str	r3, [r2, #12]
	while(!(RTC -> ISR & RTC_ISR_INITF)); //wait till its set
 80012d2:	bf00      	nop
 80012d4:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <rtc_init+0x13c>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f9      	beq.n	80012d4 <rtc_init+0x68>
	RTC -> PRER = RESET_MASK;
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <rtc_init+0x13c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
	RTC->PRER |= PREDIV_S; //Set the prescalar to bring down the LSI frequency 1Hz
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <rtc_init+0x13c>)
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <rtc_init+0x13c>)
 80012ec:	f043 03f9 	orr.w	r3, r3, #249	; 0xf9
 80012f0:	6113      	str	r3, [r2, #16]
	RTC->PRER |= PREDIV_A<<16;
 80012f2:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <rtc_init+0x13c>)
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	4a2c      	ldr	r2, [pc, #176]	; (80013a8 <rtc_init+0x13c>)
 80012f8:	f443 03fe 	orr.w	r3, r3, #8323072	; 0x7f0000
 80012fc:	6113      	str	r3, [r2, #16]
	//Set the TR and DR registers for date and time
	RTC->TR &= ~(CLEAR_MASK);
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <rtc_init+0x13c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <rtc_init+0x13c>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
	RTC->TR |= (0b100 << 12); //minutes msb is 4
 8001308:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <rtc_init+0x13c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a26      	ldr	r2, [pc, #152]	; (80013a8 <rtc_init+0x13c>)
 800130e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001312:	6013      	str	r3, [r2, #0]
	RTC->TR |= (0b111 << 16); //hours lsb is 7
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <rtc_init+0x13c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a23      	ldr	r2, [pc, #140]	; (80013a8 <rtc_init+0x13c>)
 800131a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800131e:	6013      	str	r3, [r2, #0]
	RTC->TR |= (0b01 << 20); //hours msb is 1 i.e. 17.40.0
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <rtc_init+0x13c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <rtc_init+0x13c>)
 8001326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800132a:	6013      	str	r3, [r2, #0]
	RTC->DR &= ~(CLEAR_MASK);
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <rtc_init+0x13c>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <rtc_init+0x13c>)
 8001332:	2200      	movs	r2, #0
 8001334:	605a      	str	r2, [r3, #4]
	RTC->DR |= MASK(DATE_ONES,DATE_ONES_POS); //date ones is 0
 8001336:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <rtc_init+0x13c>)
 8001338:	4a1b      	ldr	r2, [pc, #108]	; (80013a8 <rtc_init+0x13c>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	6053      	str	r3, [r2, #4]
	RTC->DR |= MASK(DATE_TENS,DATE_TENS_POS); //date tens is 3
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <rtc_init+0x13c>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	4a19      	ldr	r2, [pc, #100]	; (80013a8 <rtc_init+0x13c>)
 8001344:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001348:	6053      	str	r3, [r2, #4]
	RTC->DR |= MASK(MONTH_ONES,MONTH_ONES_POS); //month ones is 4
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <rtc_init+0x13c>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4a16      	ldr	r2, [pc, #88]	; (80013a8 <rtc_init+0x13c>)
 8001350:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001354:	6053      	str	r3, [r2, #4]
	RTC->DR |= MASK(YEAR_ONES,YEAR_ONES_POS); //years once is 3
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <rtc_init+0x13c>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <rtc_init+0x13c>)
 800135c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001360:	6053      	str	r3, [r2, #4]
	RTC->DR |= MASK(YEARS_TENS,YEARS_TENS_POS); //years tens position is 2
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <rtc_init+0x13c>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <rtc_init+0x13c>)
 8001368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800136c:	6053      	str	r3, [r2, #4]
	RTC->CR |= MASK(ENABLE_,BYPASS); //Calendar values are taken directly from the calendar counters.
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <rtc_init+0x13c>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <rtc_init+0x13c>)
 8001374:	f043 0320 	orr.w	r3, r3, #32
 8001378:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~MASK(ENABLE_,INIT_MODE); //Clear the Init bit to exit Initialization mode
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <rtc_init+0x13c>)
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <rtc_init+0x13c>)
 8001380:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001384:	60d3      	str	r3, [r2, #12]
	PWR->CR &= ~MASK(ENABLE_,NO_WRITE_PROTECT); //Enable the Write protect back
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <rtc_init+0x138>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <rtc_init+0x138>)
 800138c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001390:	f023 0301 	bic.w	r3, r3, #1
 8001394:	6013      	str	r3, [r2, #0]
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40007000 	.word	0x40007000
 80013a8:	40002800 	.word	0x40002800

080013ac <RTC_calculate_time>:

void RTC_calculate_time (void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
	uint8_t min = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	71fb      	strb	r3, [r7, #7]
	uint8_t hrs = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	71bb      	strb	r3, [r7, #6]
	Seconds=(((RTC->TR & 0x7f) >> 4)*10)+(RTC->TR & 0xf);
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <RTC_calculate_time+0xb0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b22      	ldr	r3, [pc, #136]	; (800145c <RTC_calculate_time+0xb0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 030f 	and.w	r3, r3, #15
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4413      	add	r3, r2
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <RTC_calculate_time+0xb4>)
 80013e4:	701a      	strb	r2, [r3, #0]
	min=((RTC->TR & 0x7f00) >> 8);
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <RTC_calculate_time+0xb0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013f2:	71fb      	strb	r3, [r7, #7]
	Minutes=(((min & 0x7f)>>4)*10)+(min & 0xf);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	111b      	asrs	r3, r3, #4
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4413      	add	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	b2da      	uxtb	r2, r3
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 030f 	and.w	r3, r3, #15
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4413      	add	r3, r2
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <RTC_calculate_time+0xb8>)
 8001418:	701a      	strb	r2, [r3, #0]
	hrs=((RTC->TR & 0x7f0000) >> 16);
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <RTC_calculate_time+0xb0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	0c1b      	lsrs	r3, r3, #16
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001426:	71bb      	strb	r3, [r7, #6]
	Hours=(((hrs & 0x7f)>>4)*10)+(hrs & 0xf);
 8001428:	79bb      	ldrb	r3, [r7, #6]
 800142a:	111b      	asrs	r3, r3, #4
 800142c:	b2db      	uxtb	r3, r3
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	b2db      	uxtb	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	0092      	lsls	r2, r2, #2
 8001438:	4413      	add	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	b2da      	uxtb	r2, r3
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	f003 030f 	and.w	r3, r3, #15
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4413      	add	r3, r2
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <RTC_calculate_time+0xbc>)
 800144c:	701a      	strb	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40002800 	.word	0x40002800
 8001460:	20000f87 	.word	0x20000f87
 8001464:	20000f86 	.word	0x20000f86
 8001468:	20000f85 	.word	0x20000f85

0800146c <RTC_calculate_date>:

void RTC_calculate_date(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	Year=((RTC->DR >> 20)*10) + ((RTC->DR >>16) & 0xf);
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <RTC_calculate_date+0x90>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	0d1b      	lsrs	r3, r3, #20
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4413      	add	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <RTC_calculate_date+0x90>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	0c1b      	lsrs	r3, r3, #16
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4413      	add	r3, r2
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <RTC_calculate_date+0x94>)
 8001496:	701a      	strb	r2, [r3, #0]
	Month=((RTC->DR >> 12) & 1)*10 + ((RTC->DR >>8) & 0xf);
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <RTC_calculate_date+0x90>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	0b1b      	lsrs	r3, r3, #12
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	0092      	lsls	r2, r2, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <RTC_calculate_date+0x90>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4413      	add	r3, r2
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <RTC_calculate_date+0x98>)
 80014c4:	701a      	strb	r2, [r3, #0]
	Day=((RTC->DR >> 4) & 3)*10 + (RTC->DR & 0xf);
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <RTC_calculate_date+0x90>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	4413      	add	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <RTC_calculate_date+0x90>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f003 030f 	and.w	r3, r3, #15
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4413      	add	r3, r2
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <RTC_calculate_date+0x9c>)
 80014f0:	701a      	strb	r2, [r3, #0]
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40002800 	.word	0x40002800
 8001500:	20000f8a 	.word	0x20000f8a
 8001504:	20000f88 	.word	0x20000f88
 8001508:	20000f89 	.word	0x20000f89

0800150c <get_minutes>:

/*
 * Getter functions for
 */
uint8_t get_minutes()
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	return Minutes;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <get_minutes+0x14>)
 8001512:	781b      	ldrb	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000f86 	.word	0x20000f86

08001524 <get_hours>:

uint8_t get_hours()
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	return Hours;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <get_hours+0x14>)
 800152a:	781b      	ldrb	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000f85 	.word	0x20000f85

0800153c <get_year>:

uint8_t get_year()
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	return Year;
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <get_year+0x14>)
 8001542:	781b      	ldrb	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000f8a 	.word	0x20000f8a

08001554 <get_month>:

uint8_t get_month()
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
	return Month;
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <get_month+0x14>)
 800155a:	781b      	ldrb	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000f88 	.word	0x20000f88

0800156c <get_day>:

uint8_t get_day()
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
	return Day;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <get_day+0x14>)
 8001572:	781b      	ldrb	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000f89 	.word	0x20000f89

08001584 <SSD1306_DrawBitmap>:
 * 		(5)h 		- The height of the bitmap image.
 * 		(6)color    - Color of the Image
 *
 */
void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60ba      	str	r2, [r7, #8]
 800158c:	461a      	mov	r2, r3
 800158e:	4603      	mov	r3, r0
 8001590:	81fb      	strh	r3, [r7, #14]
 8001592:	460b      	mov	r3, r1
 8001594:	81bb      	strh	r3, [r7, #12]
 8001596:	4613      	mov	r3, r2
 8001598:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800159a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159e:	3307      	adds	r3, #7
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	da00      	bge.n	80015a6 <SSD1306_DrawBitmap+0x22>
 80015a4:	3307      	adds	r3, #7
 80015a6:	10db      	asrs	r3, r3, #3
 80015a8:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	82bb      	strh	r3, [r7, #20]
 80015b2:	e044      	b.n	800163e <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	827b      	strh	r3, [r7, #18]
 80015b8:	e02f      	b.n	800161a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80015ba:	8a7b      	ldrh	r3, [r7, #18]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	75fb      	strb	r3, [r7, #23]
 80015ca:	e012      	b.n	80015f2 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80015cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015d0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80015d4:	fb02 f203 	mul.w	r2, r2, r3
 80015d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da00      	bge.n	80015e2 <SSD1306_DrawBitmap+0x5e>
 80015e0:	3307      	adds	r3, #7
 80015e2:	10db      	asrs	r3, r3, #3
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80015f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	da09      	bge.n	800160e <SSD1306_DrawBitmap+0x8a>
 80015fa:	89fa      	ldrh	r2, [r7, #14]
 80015fc:	8a7b      	ldrh	r3, [r7, #18]
 80015fe:	4413      	add	r3, r2
 8001600:	b29b      	uxth	r3, r3
 8001602:	89b9      	ldrh	r1, [r7, #12]
 8001604:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f000 f92d 	bl	8001868 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800160e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001612:	b29b      	uxth	r3, r3
 8001614:	3301      	adds	r3, #1
 8001616:	b29b      	uxth	r3, r3
 8001618:	827b      	strh	r3, [r7, #18]
 800161a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800161e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001622:	429a      	cmp	r2, r3
 8001624:	dbc9      	blt.n	80015ba <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001626:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800162a:	b29b      	uxth	r3, r3
 800162c:	3301      	adds	r3, #1
 800162e:	b29b      	uxth	r3, r3
 8001630:	82bb      	strh	r3, [r7, #20]
 8001632:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001636:	b29b      	uxth	r3, r3
 8001638:	3301      	adds	r3, #1
 800163a:	b29b      	uxth	r3, r3
 800163c:	81bb      	strh	r3, [r7, #12]
 800163e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001642:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001646:	429a      	cmp	r2, r3
 8001648:	dbb4      	blt.n	80015b4 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800164a:	bf00      	nop
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800165a:	f000 fa29 	bl	8001ab0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800165e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001662:	2201      	movs	r2, #1
 8001664:	2178      	movs	r1, #120	; 0x78
 8001666:	485b      	ldr	r0, [pc, #364]	; (80017d4 <SSD1306_Init+0x180>)
 8001668:	f001 f8b0 	bl	80027cc <HAL_I2C_IsDeviceReady>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001672:	2300      	movs	r3, #0
 8001674:	e0a9      	b.n	80017ca <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001676:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800167a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800167c:	e002      	b.n	8001684 <SSD1306_Init+0x30>
		p--;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3b01      	subs	r3, #1
 8001682:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f9      	bne.n	800167e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800168a:	22ae      	movs	r2, #174	; 0xae
 800168c:	2100      	movs	r1, #0
 800168e:	2078      	movs	r0, #120	; 0x78
 8001690:	f000 fa6c 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001694:	2220      	movs	r2, #32
 8001696:	2100      	movs	r1, #0
 8001698:	2078      	movs	r0, #120	; 0x78
 800169a:	f000 fa67 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800169e:	2210      	movs	r2, #16
 80016a0:	2100      	movs	r1, #0
 80016a2:	2078      	movs	r0, #120	; 0x78
 80016a4:	f000 fa62 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80016a8:	22b0      	movs	r2, #176	; 0xb0
 80016aa:	2100      	movs	r1, #0
 80016ac:	2078      	movs	r0, #120	; 0x78
 80016ae:	f000 fa5d 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80016b2:	22c8      	movs	r2, #200	; 0xc8
 80016b4:	2100      	movs	r1, #0
 80016b6:	2078      	movs	r0, #120	; 0x78
 80016b8:	f000 fa58 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	2078      	movs	r0, #120	; 0x78
 80016c2:	f000 fa53 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80016c6:	2210      	movs	r2, #16
 80016c8:	2100      	movs	r1, #0
 80016ca:	2078      	movs	r0, #120	; 0x78
 80016cc:	f000 fa4e 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80016d0:	2240      	movs	r2, #64	; 0x40
 80016d2:	2100      	movs	r1, #0
 80016d4:	2078      	movs	r0, #120	; 0x78
 80016d6:	f000 fa49 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80016da:	2281      	movs	r2, #129	; 0x81
 80016dc:	2100      	movs	r1, #0
 80016de:	2078      	movs	r0, #120	; 0x78
 80016e0:	f000 fa44 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80016e4:	22ff      	movs	r2, #255	; 0xff
 80016e6:	2100      	movs	r1, #0
 80016e8:	2078      	movs	r0, #120	; 0x78
 80016ea:	f000 fa3f 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80016ee:	22a1      	movs	r2, #161	; 0xa1
 80016f0:	2100      	movs	r1, #0
 80016f2:	2078      	movs	r0, #120	; 0x78
 80016f4:	f000 fa3a 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80016f8:	22a6      	movs	r2, #166	; 0xa6
 80016fa:	2100      	movs	r1, #0
 80016fc:	2078      	movs	r0, #120	; 0x78
 80016fe:	f000 fa35 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001702:	22a8      	movs	r2, #168	; 0xa8
 8001704:	2100      	movs	r1, #0
 8001706:	2078      	movs	r0, #120	; 0x78
 8001708:	f000 fa30 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800170c:	223f      	movs	r2, #63	; 0x3f
 800170e:	2100      	movs	r1, #0
 8001710:	2078      	movs	r0, #120	; 0x78
 8001712:	f000 fa2b 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001716:	22a4      	movs	r2, #164	; 0xa4
 8001718:	2100      	movs	r1, #0
 800171a:	2078      	movs	r0, #120	; 0x78
 800171c:	f000 fa26 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001720:	22d3      	movs	r2, #211	; 0xd3
 8001722:	2100      	movs	r1, #0
 8001724:	2078      	movs	r0, #120	; 0x78
 8001726:	f000 fa21 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2078      	movs	r0, #120	; 0x78
 8001730:	f000 fa1c 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001734:	22d5      	movs	r2, #213	; 0xd5
 8001736:	2100      	movs	r1, #0
 8001738:	2078      	movs	r0, #120	; 0x78
 800173a:	f000 fa17 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800173e:	22f0      	movs	r2, #240	; 0xf0
 8001740:	2100      	movs	r1, #0
 8001742:	2078      	movs	r0, #120	; 0x78
 8001744:	f000 fa12 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001748:	22d9      	movs	r2, #217	; 0xd9
 800174a:	2100      	movs	r1, #0
 800174c:	2078      	movs	r0, #120	; 0x78
 800174e:	f000 fa0d 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001752:	2222      	movs	r2, #34	; 0x22
 8001754:	2100      	movs	r1, #0
 8001756:	2078      	movs	r0, #120	; 0x78
 8001758:	f000 fa08 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800175c:	22da      	movs	r2, #218	; 0xda
 800175e:	2100      	movs	r1, #0
 8001760:	2078      	movs	r0, #120	; 0x78
 8001762:	f000 fa03 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001766:	2212      	movs	r2, #18
 8001768:	2100      	movs	r1, #0
 800176a:	2078      	movs	r0, #120	; 0x78
 800176c:	f000 f9fe 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001770:	22db      	movs	r2, #219	; 0xdb
 8001772:	2100      	movs	r1, #0
 8001774:	2078      	movs	r0, #120	; 0x78
 8001776:	f000 f9f9 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800177a:	2220      	movs	r2, #32
 800177c:	2100      	movs	r1, #0
 800177e:	2078      	movs	r0, #120	; 0x78
 8001780:	f000 f9f4 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001784:	228d      	movs	r2, #141	; 0x8d
 8001786:	2100      	movs	r1, #0
 8001788:	2078      	movs	r0, #120	; 0x78
 800178a:	f000 f9ef 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800178e:	2214      	movs	r2, #20
 8001790:	2100      	movs	r1, #0
 8001792:	2078      	movs	r0, #120	; 0x78
 8001794:	f000 f9ea 	bl	8001b6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001798:	22af      	movs	r2, #175	; 0xaf
 800179a:	2100      	movs	r1, #0
 800179c:	2078      	movs	r0, #120	; 0x78
 800179e:	f000 f9e5 	bl	8001b6c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80017a2:	222e      	movs	r2, #46	; 0x2e
 80017a4:	2100      	movs	r1, #0
 80017a6:	2078      	movs	r0, #120	; 0x78
 80017a8:	f000 f9e0 	bl	8001b6c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f000 f843 	bl	8001838 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80017b2:	f000 f813 	bl	80017dc <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <SSD1306_Init+0x184>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <SSD1306_Init+0x184>)
 80017be:	2200      	movs	r2, #0
 80017c0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SSD1306_Init+0x184>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80017c8:	2301      	movs	r3, #1
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200050f0 	.word	0x200050f0
 80017d8:	2000138c 	.word	0x2000138c

080017dc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80017e2:	2300      	movs	r3, #0
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	e01d      	b.n	8001824 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	3b50      	subs	r3, #80	; 0x50
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	2100      	movs	r1, #0
 80017f2:	2078      	movs	r0, #120	; 0x78
 80017f4:	f000 f9ba 	bl	8001b6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	2078      	movs	r0, #120	; 0x78
 80017fe:	f000 f9b5 	bl	8001b6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001802:	2210      	movs	r2, #16
 8001804:	2100      	movs	r1, #0
 8001806:	2078      	movs	r0, #120	; 0x78
 8001808:	f000 f9b0 	bl	8001b6c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	01db      	lsls	r3, r3, #7
 8001810:	4a08      	ldr	r2, [pc, #32]	; (8001834 <SSD1306_UpdateScreen+0x58>)
 8001812:	441a      	add	r2, r3
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	2140      	movs	r1, #64	; 0x40
 8001818:	2078      	movs	r0, #120	; 0x78
 800181a:	f000 f95f 	bl	8001adc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	3301      	adds	r3, #1
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2b07      	cmp	r3, #7
 8001828:	d9de      	bls.n	80017e8 <SSD1306_UpdateScreen+0xc>
	}
}
 800182a:	bf00      	nop
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000f8c 	.word	0x20000f8c

08001838 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <SSD1306_Fill+0x14>
 8001848:	2300      	movs	r3, #0
 800184a:	e000      	b.n	800184e <SSD1306_Fill+0x16>
 800184c:	23ff      	movs	r3, #255	; 0xff
 800184e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001852:	4619      	mov	r1, r3
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <SSD1306_Fill+0x2c>)
 8001856:	f003 fc9f 	bl	8005198 <memset>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000f8c 	.word	0x20000f8c

08001868 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
 8001872:	460b      	mov	r3, r1
 8001874:	80bb      	strh	r3, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	70fb      	strb	r3, [r7, #3]
	if (
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	2b7f      	cmp	r3, #127	; 0x7f
 800187e:	d848      	bhi.n	8001912 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	2b3f      	cmp	r3, #63	; 0x3f
 8001884:	d845      	bhi.n	8001912 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <SSD1306_DrawPixel+0xb8>)
 8001888:	791b      	ldrb	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d11a      	bne.n	80018d8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018a2:	88fa      	ldrh	r2, [r7, #6]
 80018a4:	88bb      	ldrh	r3, [r7, #4]
 80018a6:	08db      	lsrs	r3, r3, #3
 80018a8:	b298      	uxth	r0, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	01db      	lsls	r3, r3, #7
 80018ae:	4413      	add	r3, r2
 80018b0:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <SSD1306_DrawPixel+0xbc>)
 80018b2:	5cd3      	ldrb	r3, [r2, r3]
 80018b4:	b25a      	sxtb	r2, r3
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	2101      	movs	r1, #1
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	b25b      	sxtb	r3, r3
 80018c4:	4313      	orrs	r3, r2
 80018c6:	b259      	sxtb	r1, r3
 80018c8:	88fa      	ldrh	r2, [r7, #6]
 80018ca:	4603      	mov	r3, r0
 80018cc:	01db      	lsls	r3, r3, #7
 80018ce:	4413      	add	r3, r2
 80018d0:	b2c9      	uxtb	r1, r1
 80018d2:	4a14      	ldr	r2, [pc, #80]	; (8001924 <SSD1306_DrawPixel+0xbc>)
 80018d4:	54d1      	strb	r1, [r2, r3]
 80018d6:	e01d      	b.n	8001914 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018d8:	88fa      	ldrh	r2, [r7, #6]
 80018da:	88bb      	ldrh	r3, [r7, #4]
 80018dc:	08db      	lsrs	r3, r3, #3
 80018de:	b298      	uxth	r0, r3
 80018e0:	4603      	mov	r3, r0
 80018e2:	01db      	lsls	r3, r3, #7
 80018e4:	4413      	add	r3, r2
 80018e6:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <SSD1306_DrawPixel+0xbc>)
 80018e8:	5cd3      	ldrb	r3, [r2, r3]
 80018ea:	b25a      	sxtb	r2, r3
 80018ec:	88bb      	ldrh	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	2101      	movs	r1, #1
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	4013      	ands	r3, r2
 8001900:	b259      	sxtb	r1, r3
 8001902:	88fa      	ldrh	r2, [r7, #6]
 8001904:	4603      	mov	r3, r0
 8001906:	01db      	lsls	r3, r3, #7
 8001908:	4413      	add	r3, r2
 800190a:	b2c9      	uxtb	r1, r1
 800190c:	4a05      	ldr	r2, [pc, #20]	; (8001924 <SSD1306_DrawPixel+0xbc>)
 800190e:	54d1      	strb	r1, [r2, r3]
 8001910:	e000      	b.n	8001914 <SSD1306_DrawPixel+0xac>
		return;
 8001912:	bf00      	nop
	}
}
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	2000138c 	.word	0x2000138c
 8001924:	20000f8c 	.word	0x20000f8c

08001928 <SSD1306_GotoXY>:
 * 			x - The x-coordinate of the new position
 * 			y - The y-coordinate of the new position.
 *
 * @return void
 */
void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	460a      	mov	r2, r1
 8001932:	80fb      	strh	r3, [r7, #6]
 8001934:	4613      	mov	r3, r2
 8001936:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001938:	4a05      	ldr	r2, [pc, #20]	; (8001950 <SSD1306_GotoXY+0x28>)
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800193e:	4a04      	ldr	r2, [pc, #16]	; (8001950 <SSD1306_GotoXY+0x28>)
 8001940:	88bb      	ldrh	r3, [r7, #4]
 8001942:	8053      	strh	r3, [r2, #2]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	2000138c 	.word	0x2000138c

08001954 <SSD1306_Putc>:
 *
 * @brief Used to display a single character on the SSD1306 OLED screen.
 *
 * @params
 */
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	4613      	mov	r3, r2
 8001962:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001964:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <SSD1306_Putc+0xfc>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
	if (
 8001970:	2b7f      	cmp	r3, #127	; 0x7f
 8001972:	dc07      	bgt.n	8001984 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001974:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <SSD1306_Putc+0xfc>)
 8001976:	885b      	ldrh	r3, [r3, #2]
 8001978:	461a      	mov	r2, r3
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	785b      	ldrb	r3, [r3, #1]
 800197e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001980:	2b3f      	cmp	r3, #63	; 0x3f
 8001982:	dd01      	ble.n	8001988 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001984:	2300      	movs	r3, #0
 8001986:	e05e      	b.n	8001a46 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	e04b      	b.n	8001a26 <SSD1306_Putc+0xd2>
		/* Get row data */
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	3b20      	subs	r3, #32
 8001996:	6839      	ldr	r1, [r7, #0]
 8001998:	7849      	ldrb	r1, [r1, #1]
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4619      	mov	r1, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	440b      	add	r3, r1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	60fb      	str	r3, [r7, #12]
		/* Go through columns */
		for (j = 0; j < Font->FontWidth; j++) {
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	e030      	b.n	8001a14 <SSD1306_Putc+0xc0>
			/* Draw pixel */
			if ((b << j) & 0x8000) {
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d010      	beq.n	80019e4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80019c2:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <SSD1306_Putc+0xfc>)
 80019c4:	881a      	ldrh	r2, [r3, #0]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	b298      	uxth	r0, r3
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <SSD1306_Putc+0xfc>)
 80019d0:	885a      	ldrh	r2, [r3, #2]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	b29b      	uxth	r3, r3
 80019da:	79ba      	ldrb	r2, [r7, #6]
 80019dc:	4619      	mov	r1, r3
 80019de:	f7ff ff43 	bl	8001868 <SSD1306_DrawPixel>
 80019e2:	e014      	b.n	8001a0e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80019e4:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <SSD1306_Putc+0xfc>)
 80019e6:	881a      	ldrh	r2, [r3, #0]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	b298      	uxth	r0, r3
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <SSD1306_Putc+0xfc>)
 80019f2:	885a      	ldrh	r2, [r3, #2]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	b299      	uxth	r1, r3
 80019fc:	79bb      	ldrb	r3, [r7, #6]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf0c      	ite	eq
 8001a02:	2301      	moveq	r3, #1
 8001a04:	2300      	movne	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f7ff ff2d 	bl	8001868 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	3301      	adds	r3, #1
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d3c8      	bcc.n	80019b2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	785b      	ldrb	r3, [r3, #1]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d3ad      	bcc.n	800198e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <SSD1306_Putc+0xfc>)
 8001a34:	881a      	ldrh	r2, [r3, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <SSD1306_Putc+0xfc>)
 8001a42:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001a44:	79fb      	ldrb	r3, [r7, #7]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	2000138c 	.word	0x2000138c

08001a54 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001a62:	e012      	b.n	8001a8a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	79fa      	ldrb	r2, [r7, #7]
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff71 	bl	8001954 <SSD1306_Putc>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d002      	beq.n	8001a84 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	e008      	b.n	8001a96 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3301      	adds	r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1e8      	bne.n	8001a64 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	781b      	ldrb	r3, [r3, #0]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff fec8 	bl	8001838 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001aa8:	f7ff fe98 	bl	80017dc <SSD1306_UpdateScreen>
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <ssd1306_I2C_Init+0x28>)
 8001ab8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001aba:	e002      	b.n	8001ac2 <ssd1306_I2C_Init+0x12>
		p--;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f9      	bne.n	8001abc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	0003d090 	.word	0x0003d090

08001adc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001adc:	b590      	push	{r4, r7, lr}
 8001ade:	b0c7      	sub	sp, #284	; 0x11c
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	4639      	mov	r1, r7
 8001ae8:	600a      	str	r2, [r1, #0]
 8001aea:	4619      	mov	r1, r3
 8001aec:	1dfb      	adds	r3, r7, #7
 8001aee:	4622      	mov	r2, r4
 8001af0:	701a      	strb	r2, [r3, #0]
 8001af2:	1dbb      	adds	r3, r7, #6
 8001af4:	4602      	mov	r2, r0
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	460a      	mov	r2, r1
 8001afc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	1dba      	adds	r2, r7, #6
 8001b04:	7812      	ldrb	r2, [r2, #0]
 8001b06:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b0e:	e010      	b.n	8001b32 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001b10:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b14:	463a      	mov	r2, r7
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	441a      	add	r2, r3
 8001b1a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b1e:	3301      	adds	r3, #1
 8001b20:	7811      	ldrb	r1, [r2, #0]
 8001b22:	f107 020c 	add.w	r2, r7, #12
 8001b26:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001b28:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b32:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	1d3a      	adds	r2, r7, #4
 8001b3a:	8812      	ldrh	r2, [r2, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d8e7      	bhi.n	8001b10 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001b40:	1dfb      	adds	r3, r7, #7
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b299      	uxth	r1, r3
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	f107 020c 	add.w	r2, r7, #12
 8001b52:	200a      	movs	r0, #10
 8001b54:	9000      	str	r0, [sp, #0]
 8001b56:	4804      	ldr	r0, [pc, #16]	; (8001b68 <ssd1306_I2C_WriteMulti+0x8c>)
 8001b58:	f000 fd3a 	bl	80025d0 <HAL_I2C_Master_Transmit>
}
 8001b5c:	bf00      	nop
 8001b5e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd90      	pop	{r4, r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200050f0 	.word	0x200050f0

08001b6c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
 8001b76:	460b      	mov	r3, r1
 8001b78:	71bb      	strb	r3, [r7, #6]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001b7e:	79bb      	ldrb	r3, [r7, #6]
 8001b80:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001b82:	797b      	ldrb	r3, [r7, #5]
 8001b84:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	b299      	uxth	r1, r3
 8001b8a:	f107 020c 	add.w	r2, r7, #12
 8001b8e:	230a      	movs	r3, #10
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2302      	movs	r3, #2
 8001b94:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <ssd1306_I2C_Write+0x38>)
 8001b96:	f000 fd1b 	bl	80025d0 <HAL_I2C_Master_Transmit>
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200050f0 	.word	0x200050f0

08001ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_MspInit+0x54>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a11      	ldr	r2, [pc, #68]	; (8001bfc <HAL_MspInit+0x54>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_MspInit+0x54>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_MspInit+0x54>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_MspInit+0x54>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_MspInit+0x54>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	210f      	movs	r1, #15
 8001bea:	f06f 0001 	mvn.w	r0, #1
 8001bee:	f000 f9fd 	bl	8001fec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800

08001c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <HAL_I2C_MspInit+0x84>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d12b      	bne.n	8001c7a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <HAL_I2C_MspInit+0x88>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <HAL_I2C_MspInit+0x88>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <HAL_I2C_MspInit+0x88>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c3e:	23c0      	movs	r3, #192	; 0xc0
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c42:	2312      	movs	r3, #18
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	480c      	ldr	r0, [pc, #48]	; (8001c8c <HAL_I2C_MspInit+0x8c>)
 8001c5a:	f000 f9f1 	bl	8002040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_I2C_MspInit+0x88>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <HAL_I2C_MspInit+0x88>)
 8001c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_I2C_MspInit+0x88>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c7a:	bf00      	nop
 8001c7c:	3728      	adds	r7, #40	; 0x28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40005400 	.word	0x40005400
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40020400 	.word	0x40020400

08001c90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08c      	sub	sp, #48	; 0x30
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	201e      	movs	r0, #30
 8001ca6:	f000 f9a1 	bl	8001fec <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001caa:	201e      	movs	r0, #30
 8001cac:	f000 f9ba 	bl	8002024 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_InitTick+0xa0>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <HAL_InitTick+0xa0>)
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_InitTick+0xa0>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ccc:	f107 0210 	add.w	r2, r7, #16
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f001 fd10 	bl	80036fc <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cdc:	f001 fcfa 	bl	80036d4 <HAL_RCC_GetPCLK1Freq>
 8001ce0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce4:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <HAL_InitTick+0xa4>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	0c9b      	lsrs	r3, r3, #18
 8001cec:	3b01      	subs	r3, #1
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_InitTick+0xa8>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <HAL_InitTick+0xac>)
 8001cf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_InitTick+0xa8>)
 8001cf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cfc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001cfe:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <HAL_InitTick+0xa8>)
 8001d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d02:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <HAL_InitTick+0xa8>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_InitTick+0xa8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001d10:	4809      	ldr	r0, [pc, #36]	; (8001d38 <HAL_InitTick+0xa8>)
 8001d12:	f001 fd25 	bl	8003760 <HAL_TIM_Base_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d104      	bne.n	8001d26 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001d1c:	4806      	ldr	r0, [pc, #24]	; (8001d38 <HAL_InitTick+0xa8>)
 8001d1e:	f001 fd79 	bl	8003814 <HAL_TIM_Base_Start_IT>
 8001d22:	4603      	mov	r3, r0
 8001d24:	e000      	b.n	8001d28 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3730      	adds	r7, #48	; 0x30
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	431bde83 	.word	0x431bde83
 8001d38:	2000514c 	.word	0x2000514c
 8001d3c:	40000800 	.word	0x40000800

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <NMI_Handler+0x4>

08001d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <MemManage_Handler+0x4>

08001d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <TIM4_IRQHandler+0x10>)
 8001d72:	f001 fdb1 	bl	80038d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000514c 	.word	0x2000514c

08001d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <SystemInit+0x20>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <SystemInit+0x20>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ddc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001da8:	480d      	ldr	r0, [pc, #52]	; (8001de0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001daa:	490e      	ldr	r1, [pc, #56]	; (8001de4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dac:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dc0:	4c0b      	ldr	r4, [pc, #44]	; (8001df0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dce:	f7ff ffd7 	bl	8001d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dd2:	f003 f9bb 	bl	800514c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd6:	f7fe fed3 	bl	8000b80 <main>
  bx  lr    
 8001dda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de4:	20000c98 	.word	0x20000c98
  ldr r2, =_sidata
 8001de8:	08006f10 	.word	0x08006f10
  ldr r2, =_sbss
 8001dec:	20000c98 	.word	0x20000c98
  ldr r4, =_ebss
 8001df0:	200051a4 	.word	0x200051a4

08001df4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df4:	e7fe      	b.n	8001df4 <DMA1_Stream0_IRQHandler>
	...

08001df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0d      	ldr	r2, [pc, #52]	; (8001e38 <HAL_Init+0x40>)
 8001e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <HAL_Init+0x40>)
 8001e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <HAL_Init+0x40>)
 8001e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e20:	2003      	movs	r0, #3
 8001e22:	f000 f8d8 	bl	8001fd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e26:	200f      	movs	r0, #15
 8001e28:	f7ff ff32 	bl	8001c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e2c:	f7ff febc 	bl	8001ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_IncTick+0x20>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_IncTick+0x24>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <HAL_IncTick+0x24>)
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000c2c 	.word	0x20000c2c
 8001e60:	20005194 	.word	0x20005194

08001e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return uwTick;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_GetTick+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20005194 	.word	0x20005194

08001e7c <__NVIC_SetPriorityGrouping>:
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eae:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	60d3      	str	r3, [r2, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_GetPriorityGrouping>:
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <__NVIC_GetPriorityGrouping+0x18>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	f003 0307 	and.w	r3, r3, #7
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_EnableIRQ>:
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	db0b      	blt.n	8001f0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	f003 021f 	and.w	r2, r3, #31
 8001ef8:	4907      	ldr	r1, [pc, #28]	; (8001f18 <__NVIC_EnableIRQ+0x38>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	2001      	movs	r0, #1
 8001f02:	fa00 f202 	lsl.w	r2, r0, r2
 8001f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000e100 	.word	0xe000e100

08001f1c <__NVIC_SetPriority>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	db0a      	blt.n	8001f46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	490c      	ldr	r1, [pc, #48]	; (8001f68 <__NVIC_SetPriority+0x4c>)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	0112      	lsls	r2, r2, #4
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f44:	e00a      	b.n	8001f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4908      	ldr	r1, [pc, #32]	; (8001f6c <__NVIC_SetPriority+0x50>)
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	3b04      	subs	r3, #4
 8001f54:	0112      	lsls	r2, r2, #4
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	440b      	add	r3, r1
 8001f5a:	761a      	strb	r2, [r3, #24]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000e100 	.word	0xe000e100
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f1c3 0307 	rsb	r3, r3, #7
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	bf28      	it	cs
 8001f8e:	2304      	movcs	r3, #4
 8001f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3304      	adds	r3, #4
 8001f96:	2b06      	cmp	r3, #6
 8001f98:	d902      	bls.n	8001fa0 <NVIC_EncodePriority+0x30>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3b03      	subs	r3, #3
 8001f9e:	e000      	b.n	8001fa2 <NVIC_EncodePriority+0x32>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	43d9      	mvns	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	4313      	orrs	r3, r2
         );
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3724      	adds	r7, #36	; 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ff4c 	bl	8001e7c <__NVIC_SetPriorityGrouping>
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ffe:	f7ff ff61 	bl	8001ec4 <__NVIC_GetPriorityGrouping>
 8002002:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	68b9      	ldr	r1, [r7, #8]
 8002008:	6978      	ldr	r0, [r7, #20]
 800200a:	f7ff ffb1 	bl	8001f70 <NVIC_EncodePriority>
 800200e:	4602      	mov	r2, r0
 8002010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff80 	bl	8001f1c <__NVIC_SetPriority>
}
 800201c:	bf00      	nop
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ff54 	bl	8001ee0 <__NVIC_EnableIRQ>
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e159      	b.n	8002310 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	f040 8148 	bne.w	800230a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d005      	beq.n	8002092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208e:	2b02      	cmp	r3, #2
 8002090:	d130      	bne.n	80020f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c8:	2201      	movs	r2, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 0201 	and.w	r2, r3, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d017      	beq.n	8002130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d123      	bne.n	8002184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	08da      	lsrs	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3208      	adds	r2, #8
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80a2 	beq.w	800230a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b57      	ldr	r3, [pc, #348]	; (8002328 <HAL_GPIO_Init+0x2e8>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	4a56      	ldr	r2, [pc, #344]	; (8002328 <HAL_GPIO_Init+0x2e8>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d4:	6453      	str	r3, [r2, #68]	; 0x44
 80021d6:	4b54      	ldr	r3, [pc, #336]	; (8002328 <HAL_GPIO_Init+0x2e8>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e2:	4a52      	ldr	r2, [pc, #328]	; (800232c <HAL_GPIO_Init+0x2ec>)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a49      	ldr	r2, [pc, #292]	; (8002330 <HAL_GPIO_Init+0x2f0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d019      	beq.n	8002242 <HAL_GPIO_Init+0x202>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a48      	ldr	r2, [pc, #288]	; (8002334 <HAL_GPIO_Init+0x2f4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_GPIO_Init+0x1fe>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a47      	ldr	r2, [pc, #284]	; (8002338 <HAL_GPIO_Init+0x2f8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00d      	beq.n	800223a <HAL_GPIO_Init+0x1fa>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a46      	ldr	r2, [pc, #280]	; (800233c <HAL_GPIO_Init+0x2fc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <HAL_GPIO_Init+0x1f6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a45      	ldr	r2, [pc, #276]	; (8002340 <HAL_GPIO_Init+0x300>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_GPIO_Init+0x1f2>
 800222e:	2304      	movs	r3, #4
 8002230:	e008      	b.n	8002244 <HAL_GPIO_Init+0x204>
 8002232:	2307      	movs	r3, #7
 8002234:	e006      	b.n	8002244 <HAL_GPIO_Init+0x204>
 8002236:	2303      	movs	r3, #3
 8002238:	e004      	b.n	8002244 <HAL_GPIO_Init+0x204>
 800223a:	2302      	movs	r3, #2
 800223c:	e002      	b.n	8002244 <HAL_GPIO_Init+0x204>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_GPIO_Init+0x204>
 8002242:	2300      	movs	r3, #0
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	f002 0203 	and.w	r2, r2, #3
 800224a:	0092      	lsls	r2, r2, #2
 800224c:	4093      	lsls	r3, r2
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002254:	4935      	ldr	r1, [pc, #212]	; (800232c <HAL_GPIO_Init+0x2ec>)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	3302      	adds	r3, #2
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002262:	4b38      	ldr	r3, [pc, #224]	; (8002344 <HAL_GPIO_Init+0x304>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002286:	4a2f      	ldr	r2, [pc, #188]	; (8002344 <HAL_GPIO_Init+0x304>)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800228c:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <HAL_GPIO_Init+0x304>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b0:	4a24      	ldr	r2, [pc, #144]	; (8002344 <HAL_GPIO_Init+0x304>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b6:	4b23      	ldr	r3, [pc, #140]	; (8002344 <HAL_GPIO_Init+0x304>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022da:	4a1a      	ldr	r2, [pc, #104]	; (8002344 <HAL_GPIO_Init+0x304>)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_GPIO_Init+0x304>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002304:	4a0f      	ldr	r2, [pc, #60]	; (8002344 <HAL_GPIO_Init+0x304>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3301      	adds	r3, #1
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	2b0f      	cmp	r3, #15
 8002314:	f67f aea2 	bls.w	800205c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	3724      	adds	r7, #36	; 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800
 800232c:	40013800 	.word	0x40013800
 8002330:	40020000 	.word	0x40020000
 8002334:	40020400 	.word	0x40020400
 8002338:	40020800 	.word	0x40020800
 800233c:	40020c00 	.word	0x40020c00
 8002340:	40021000 	.word	0x40021000
 8002344:	40013c00 	.word	0x40013c00

08002348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e12b      	b.n	80025b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fc46 	bl	8001c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2224      	movs	r2, #36	; 0x24
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0201 	bic.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800239a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023ac:	f001 f992 	bl	80036d4 <HAL_RCC_GetPCLK1Freq>
 80023b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4a81      	ldr	r2, [pc, #516]	; (80025bc <HAL_I2C_Init+0x274>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d807      	bhi.n	80023cc <HAL_I2C_Init+0x84>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4a80      	ldr	r2, [pc, #512]	; (80025c0 <HAL_I2C_Init+0x278>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	bf94      	ite	ls
 80023c4:	2301      	movls	r3, #1
 80023c6:	2300      	movhi	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	e006      	b.n	80023da <HAL_I2C_Init+0x92>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4a7d      	ldr	r2, [pc, #500]	; (80025c4 <HAL_I2C_Init+0x27c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	bf94      	ite	ls
 80023d4:	2301      	movls	r3, #1
 80023d6:	2300      	movhi	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0e7      	b.n	80025b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a78      	ldr	r2, [pc, #480]	; (80025c8 <HAL_I2C_Init+0x280>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0c9b      	lsrs	r3, r3, #18
 80023ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a6a      	ldr	r2, [pc, #424]	; (80025bc <HAL_I2C_Init+0x274>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d802      	bhi.n	800241c <HAL_I2C_Init+0xd4>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	3301      	adds	r3, #1
 800241a:	e009      	b.n	8002430 <HAL_I2C_Init+0xe8>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	4a69      	ldr	r2, [pc, #420]	; (80025cc <HAL_I2C_Init+0x284>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	099b      	lsrs	r3, r3, #6
 800242e:	3301      	adds	r3, #1
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	430b      	orrs	r3, r1
 8002436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	495c      	ldr	r1, [pc, #368]	; (80025bc <HAL_I2C_Init+0x274>)
 800244c:	428b      	cmp	r3, r1
 800244e:	d819      	bhi.n	8002484 <HAL_I2C_Init+0x13c>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1e59      	subs	r1, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fbb1 f3f3 	udiv	r3, r1, r3
 800245e:	1c59      	adds	r1, r3, #1
 8002460:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002464:	400b      	ands	r3, r1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_I2C_Init+0x138>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1e59      	subs	r1, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fbb1 f3f3 	udiv	r3, r1, r3
 8002478:	3301      	adds	r3, #1
 800247a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247e:	e051      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 8002480:	2304      	movs	r3, #4
 8002482:	e04f      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d111      	bne.n	80024b0 <HAL_I2C_Init+0x168>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1e58      	subs	r0, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	440b      	add	r3, r1
 800249a:	fbb0 f3f3 	udiv	r3, r0, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e012      	b.n	80024d6 <HAL_I2C_Init+0x18e>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1e58      	subs	r0, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	0099      	lsls	r1, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Init+0x196>
 80024da:	2301      	movs	r3, #1
 80024dc:	e022      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10e      	bne.n	8002504 <HAL_I2C_Init+0x1bc>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1e58      	subs	r0, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	440b      	add	r3, r1
 80024f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002502:	e00f      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1e58      	subs	r0, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	0099      	lsls	r1, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	fbb0 f3f3 	udiv	r3, r0, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	6809      	ldr	r1, [r1, #0]
 8002528:	4313      	orrs	r3, r2
 800252a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6911      	ldr	r1, [r2, #16]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68d2      	ldr	r2, [r2, #12]
 800255e:	4311      	orrs	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	430b      	orrs	r3, r1
 8002566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	000186a0 	.word	0x000186a0
 80025c0:	001e847f 	.word	0x001e847f
 80025c4:	003d08ff 	.word	0x003d08ff
 80025c8:	431bde83 	.word	0x431bde83
 80025cc:	10624dd3 	.word	0x10624dd3

080025d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	461a      	mov	r2, r3
 80025dc:	460b      	mov	r3, r1
 80025de:	817b      	strh	r3, [r7, #10]
 80025e0:	4613      	mov	r3, r2
 80025e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025e4:	f7ff fc3e 	bl	8001e64 <HAL_GetTick>
 80025e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	f040 80e0 	bne.w	80027b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2319      	movs	r3, #25
 80025fe:	2201      	movs	r2, #1
 8002600:	4970      	ldr	r1, [pc, #448]	; (80027c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fa92 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800260e:	2302      	movs	r3, #2
 8002610:	e0d3      	b.n	80027ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_I2C_Master_Transmit+0x50>
 800261c:	2302      	movs	r3, #2
 800261e:	e0cc      	b.n	80027ba <HAL_I2C_Master_Transmit+0x1ea>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d007      	beq.n	8002646 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0201 	orr.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002654:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2221      	movs	r2, #33	; 0x21
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2210      	movs	r2, #16
 8002662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	893a      	ldrh	r2, [r7, #8]
 8002676:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4a50      	ldr	r2, [pc, #320]	; (80027c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002688:	8979      	ldrh	r1, [r7, #10]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f9ca 	bl	8002a28 <I2C_MasterRequestWrite>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e08d      	b.n	80027ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026b4:	e066      	b.n	8002784 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	6a39      	ldr	r1, [r7, #32]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 fb0c 	bl	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00d      	beq.n	80026e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d107      	bne.n	80026de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e06b      	b.n	80027ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	781a      	ldrb	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b04      	cmp	r3, #4
 800271e:	d11b      	bne.n	8002758 <HAL_I2C_Master_Transmit+0x188>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	d017      	beq.n	8002758 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	781a      	ldrb	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	6a39      	ldr	r1, [r7, #32]
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fafc 	bl	8002d5a <I2C_WaitOnBTFFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	2b04      	cmp	r3, #4
 800276e:	d107      	bne.n	8002780 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e01a      	b.n	80027ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002788:	2b00      	cmp	r3, #0
 800278a:	d194      	bne.n	80026b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e000      	b.n	80027ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
  }
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	00100002 	.word	0x00100002
 80027c8:	ffff0000 	.word	0xffff0000

080027cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	460b      	mov	r3, r1
 80027da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7ff fb42 	bl	8001e64 <HAL_GetTick>
 80027e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80027e2:	2301      	movs	r3, #1
 80027e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	f040 8111 	bne.w	8002a16 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2319      	movs	r3, #25
 80027fa:	2201      	movs	r2, #1
 80027fc:	4988      	ldr	r1, [pc, #544]	; (8002a20 <HAL_I2C_IsDeviceReady+0x254>)
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f994 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800280a:	2302      	movs	r3, #2
 800280c:	e104      	b.n	8002a18 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_I2C_IsDeviceReady+0x50>
 8002818:	2302      	movs	r3, #2
 800281a:	e0fd      	b.n	8002a18 <HAL_I2C_IsDeviceReady+0x24c>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d007      	beq.n	8002842 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0201 	orr.w	r2, r2, #1
 8002840:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002850:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2224      	movs	r2, #36	; 0x24
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4a70      	ldr	r2, [pc, #448]	; (8002a24 <HAL_I2C_IsDeviceReady+0x258>)
 8002864:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002874:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2200      	movs	r2, #0
 800287e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f952 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289c:	d103      	bne.n	80028a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e0b6      	b.n	8002a18 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028aa:	897b      	ldrh	r3, [r7, #10]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80028ba:	f7ff fad3 	bl	8001e64 <HAL_GetTick>
 80028be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	bf0c      	ite	eq
 80028ce:	2301      	moveq	r3, #1
 80028d0:	2300      	movne	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e4:	bf0c      	ite	eq
 80028e6:	2301      	moveq	r3, #1
 80028e8:	2300      	movne	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028ee:	e025      	b.n	800293c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028f0:	f7ff fab8 	bl	8001e64 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d302      	bcc.n	8002906 <HAL_I2C_IsDeviceReady+0x13a>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d103      	bne.n	800290e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	22a0      	movs	r2, #160	; 0xa0
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b02      	cmp	r3, #2
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2ba0      	cmp	r3, #160	; 0xa0
 8002946:	d005      	beq.n	8002954 <HAL_I2C_IsDeviceReady+0x188>
 8002948:	7dfb      	ldrb	r3, [r7, #23]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <HAL_I2C_IsDeviceReady+0x188>
 800294e:	7dbb      	ldrb	r3, [r7, #22]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0cd      	beq.n	80028f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b02      	cmp	r3, #2
 8002968:	d129      	bne.n	80029be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002978:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	2319      	movs	r3, #25
 8002996:	2201      	movs	r2, #1
 8002998:	4921      	ldr	r1, [pc, #132]	; (8002a20 <HAL_I2C_IsDeviceReady+0x254>)
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f8c6 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e036      	b.n	8002a18 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e02c      	b.n	8002a18 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2319      	movs	r3, #25
 80029de:	2201      	movs	r2, #1
 80029e0:	490f      	ldr	r1, [pc, #60]	; (8002a20 <HAL_I2C_IsDeviceReady+0x254>)
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f8a2 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e012      	b.n	8002a18 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	3301      	adds	r3, #1
 80029f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	f4ff af32 	bcc.w	8002866 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
  }
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3720      	adds	r7, #32
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	00100002 	.word	0x00100002
 8002a24:	ffff0000 	.word	0xffff0000

08002a28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	460b      	mov	r3, r1
 8002a36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d006      	beq.n	8002a52 <I2C_MasterRequestWrite+0x2a>
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d003      	beq.n	8002a52 <I2C_MasterRequestWrite+0x2a>
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a50:	d108      	bne.n	8002a64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	e00b      	b.n	8002a7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	2b12      	cmp	r3, #18
 8002a6a:	d107      	bne.n	8002a7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f84f 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00d      	beq.n	8002ab0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa2:	d103      	bne.n	8002aac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e035      	b.n	8002b1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ab8:	d108      	bne.n	8002acc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aba:	897b      	ldrh	r3, [r7, #10]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ac8:	611a      	str	r2, [r3, #16]
 8002aca:	e01b      	b.n	8002b04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002acc:	897b      	ldrh	r3, [r7, #10]
 8002ace:	11db      	asrs	r3, r3, #7
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f003 0306 	and.w	r3, r3, #6
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f063 030f 	orn	r3, r3, #15
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	490e      	ldr	r1, [pc, #56]	; (8002b24 <I2C_MasterRequestWrite+0xfc>)
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f875 	bl	8002bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e010      	b.n	8002b1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002afa:	897b      	ldrh	r3, [r7, #10]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4907      	ldr	r1, [pc, #28]	; (8002b28 <I2C_MasterRequestWrite+0x100>)
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f865 	bl	8002bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	00010008 	.word	0x00010008
 8002b28:	00010002 	.word	0x00010002

08002b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b3c:	e025      	b.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d021      	beq.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b46:	f7ff f98d 	bl	8001e64 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d302      	bcc.n	8002b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d116      	bne.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2220      	movs	r2, #32
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e023      	b.n	8002bd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d10d      	bne.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bf0c      	ite	eq
 8002ba6:	2301      	moveq	r3, #1
 8002ba8:	2300      	movne	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	e00c      	b.n	8002bca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bf0c      	ite	eq
 8002bc2:	2301      	moveq	r3, #1
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d0b6      	beq.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002be8:	e051      	b.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf8:	d123      	bne.n	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f043 0204 	orr.w	r2, r3, #4
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e046      	b.n	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d021      	beq.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4a:	f7ff f90b 	bl	8001e64 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d302      	bcc.n	8002c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d116      	bne.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f043 0220 	orr.w	r2, r3, #32
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e020      	b.n	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10c      	bne.n	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	bf14      	ite	ne
 8002caa:	2301      	movne	r3, #1
 8002cac:	2300      	moveq	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	e00b      	b.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	43da      	mvns	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d18d      	bne.n	8002bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ce4:	e02d      	b.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f878 	bl	8002ddc <I2C_IsAcknowledgeFailed>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e02d      	b.n	8002d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d021      	beq.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfe:	f7ff f8b1 	bl	8001e64 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d302      	bcc.n	8002d14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d116      	bne.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f043 0220 	orr.w	r2, r3, #32
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e007      	b.n	8002d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4c:	2b80      	cmp	r3, #128	; 0x80
 8002d4e:	d1ca      	bne.n	8002ce6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d66:	e02d      	b.n	8002dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f837 	bl	8002ddc <I2C_IsAcknowledgeFailed>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e02d      	b.n	8002dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7e:	d021      	beq.n	8002dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d80:	f7ff f870 	bl	8001e64 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d302      	bcc.n	8002d96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d116      	bne.n	8002dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f043 0220 	orr.w	r2, r3, #32
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e007      	b.n	8002dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d1ca      	bne.n	8002d68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df2:	d11b      	bne.n	8002e2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dfc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f043 0204 	orr.w	r2, r3, #4
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e264      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d075      	beq.n	8002f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e5a:	4ba3      	ldr	r3, [pc, #652]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d00c      	beq.n	8002e80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e66:	4ba0      	ldr	r3, [pc, #640]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d112      	bne.n	8002e98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e72:	4b9d      	ldr	r3, [pc, #628]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e7e:	d10b      	bne.n	8002e98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	4b99      	ldr	r3, [pc, #612]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d05b      	beq.n	8002f44 <HAL_RCC_OscConfig+0x108>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d157      	bne.n	8002f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e23f      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea0:	d106      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x74>
 8002ea2:	4b91      	ldr	r3, [pc, #580]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a90      	ldr	r2, [pc, #576]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e01d      	b.n	8002eec <HAL_RCC_OscConfig+0xb0>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x98>
 8002eba:	4b8b      	ldr	r3, [pc, #556]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a8a      	ldr	r2, [pc, #552]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	4b88      	ldr	r3, [pc, #544]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a87      	ldr	r2, [pc, #540]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e00b      	b.n	8002eec <HAL_RCC_OscConfig+0xb0>
 8002ed4:	4b84      	ldr	r3, [pc, #528]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a83      	ldr	r2, [pc, #524]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4b81      	ldr	r3, [pc, #516]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a80      	ldr	r2, [pc, #512]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7fe ffb6 	bl	8001e64 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002efc:	f7fe ffb2 	bl	8001e64 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e204      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	4b76      	ldr	r3, [pc, #472]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0xc0>
 8002f1a:	e014      	b.n	8002f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7fe ffa2 	bl	8001e64 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f24:	f7fe ff9e 	bl	8001e64 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e1f0      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	4b6c      	ldr	r3, [pc, #432]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0xe8>
 8002f42:	e000      	b.n	8002f46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d063      	beq.n	800301a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f52:	4b65      	ldr	r3, [pc, #404]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f5e:	4b62      	ldr	r3, [pc, #392]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d11c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f6a:	4b5f      	ldr	r3, [pc, #380]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d116      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f76:	4b5c      	ldr	r3, [pc, #368]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <HAL_RCC_OscConfig+0x152>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d001      	beq.n	8002f8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e1c4      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8e:	4b56      	ldr	r3, [pc, #344]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4952      	ldr	r1, [pc, #328]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa2:	e03a      	b.n	800301a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d020      	beq.n	8002fee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fac:	4b4f      	ldr	r3, [pc, #316]	; (80030ec <HAL_RCC_OscConfig+0x2b0>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7fe ff57 	bl	8001e64 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fba:	f7fe ff53 	bl	8001e64 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e1a5      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fcc:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd8:	4b43      	ldr	r3, [pc, #268]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4940      	ldr	r1, [pc, #256]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	600b      	str	r3, [r1, #0]
 8002fec:	e015      	b.n	800301a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fee:	4b3f      	ldr	r3, [pc, #252]	; (80030ec <HAL_RCC_OscConfig+0x2b0>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7fe ff36 	bl	8001e64 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffc:	f7fe ff32 	bl	8001e64 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e184      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300e:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d030      	beq.n	8003088 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d016      	beq.n	800305c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800302e:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <HAL_RCC_OscConfig+0x2b4>)
 8003030:	2201      	movs	r2, #1
 8003032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fe ff16 	bl	8001e64 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800303c:	f7fe ff12 	bl	8001e64 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e164      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304e:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x200>
 800305a:	e015      	b.n	8003088 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800305c:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <HAL_RCC_OscConfig+0x2b4>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003062:	f7fe feff 	bl	8001e64 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306a:	f7fe fefb 	bl	8001e64 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e14d      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307c:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 800307e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f0      	bne.n	800306a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80a0 	beq.w	80031d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003096:	2300      	movs	r3, #0
 8003098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309a:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	4a0e      	ldr	r2, [pc, #56]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b4:	6413      	str	r3, [r2, #64]	; 0x40
 80030b6:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c2:	2301      	movs	r3, #1
 80030c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_OscConfig+0x2b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d121      	bne.n	8003116 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_RCC_OscConfig+0x2b8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a07      	ldr	r2, [pc, #28]	; (80030f4 <HAL_RCC_OscConfig+0x2b8>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030de:	f7fe fec1 	bl	8001e64 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	e011      	b.n	800310a <HAL_RCC_OscConfig+0x2ce>
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	42470000 	.word	0x42470000
 80030f0:	42470e80 	.word	0x42470e80
 80030f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f8:	f7fe feb4 	bl	8001e64 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e106      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310a:	4b85      	ldr	r3, [pc, #532]	; (8003320 <HAL_RCC_OscConfig+0x4e4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d106      	bne.n	800312c <HAL_RCC_OscConfig+0x2f0>
 800311e:	4b81      	ldr	r3, [pc, #516]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	4a80      	ldr	r2, [pc, #512]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6713      	str	r3, [r2, #112]	; 0x70
 800312a:	e01c      	b.n	8003166 <HAL_RCC_OscConfig+0x32a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b05      	cmp	r3, #5
 8003132:	d10c      	bne.n	800314e <HAL_RCC_OscConfig+0x312>
 8003134:	4b7b      	ldr	r3, [pc, #492]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a7a      	ldr	r2, [pc, #488]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 800313a:	f043 0304 	orr.w	r3, r3, #4
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
 8003140:	4b78      	ldr	r3, [pc, #480]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a77      	ldr	r2, [pc, #476]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
 800314c:	e00b      	b.n	8003166 <HAL_RCC_OscConfig+0x32a>
 800314e:	4b75      	ldr	r3, [pc, #468]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	4a74      	ldr	r2, [pc, #464]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	6713      	str	r3, [r2, #112]	; 0x70
 800315a:	4b72      	ldr	r3, [pc, #456]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	4a71      	ldr	r2, [pc, #452]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 8003160:	f023 0304 	bic.w	r3, r3, #4
 8003164:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d015      	beq.n	800319a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316e:	f7fe fe79 	bl	8001e64 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003174:	e00a      	b.n	800318c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7fe fe75 	bl	8001e64 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	; 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0c5      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318c:	4b65      	ldr	r3, [pc, #404]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ee      	beq.n	8003176 <HAL_RCC_OscConfig+0x33a>
 8003198:	e014      	b.n	80031c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fe fe63 	bl	8001e64 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fe fe5f 	bl	8001e64 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e0af      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b8:	4b5a      	ldr	r3, [pc, #360]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1ee      	bne.n	80031a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d105      	bne.n	80031d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ca:	4b56      	ldr	r3, [pc, #344]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	4a55      	ldr	r2, [pc, #340]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 80031d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 809b 	beq.w	8003316 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031e0:	4b50      	ldr	r3, [pc, #320]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d05c      	beq.n	80032a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d141      	bne.n	8003278 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <HAL_RCC_OscConfig+0x4ec>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7fe fe33 	bl	8001e64 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003202:	f7fe fe2f 	bl	8001e64 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e081      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003214:	4b43      	ldr	r3, [pc, #268]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f0      	bne.n	8003202 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	019b      	lsls	r3, r3, #6
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	3b01      	subs	r3, #1
 800323a:	041b      	lsls	r3, r3, #16
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	061b      	lsls	r3, r3, #24
 8003244:	4937      	ldr	r1, [pc, #220]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 8003246:	4313      	orrs	r3, r2
 8003248:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800324a:	4b37      	ldr	r3, [pc, #220]	; (8003328 <HAL_RCC_OscConfig+0x4ec>)
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fe fe08 	bl	8001e64 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003258:	f7fe fe04 	bl	8001e64 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e056      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	4b2e      	ldr	r3, [pc, #184]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x41c>
 8003276:	e04e      	b.n	8003316 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <HAL_RCC_OscConfig+0x4ec>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7fe fdf1 	bl	8001e64 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003286:	f7fe fded 	bl	8001e64 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e03f      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003298:	4b22      	ldr	r3, [pc, #136]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f0      	bne.n	8003286 <HAL_RCC_OscConfig+0x44a>
 80032a4:	e037      	b.n	8003316 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e032      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032b2:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <HAL_RCC_OscConfig+0x4e8>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d028      	beq.n	8003312 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d121      	bne.n	8003312 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d8:	429a      	cmp	r2, r3
 80032da:	d11a      	bne.n	8003312 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032e2:	4013      	ands	r3, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d111      	bne.n	8003312 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	3b01      	subs	r3, #1
 80032fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d107      	bne.n	8003312 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d001      	beq.n	8003316 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40007000 	.word	0x40007000
 8003324:	40023800 	.word	0x40023800
 8003328:	42470060 	.word	0x42470060

0800332c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0cc      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003340:	4b68      	ldr	r3, [pc, #416]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d90c      	bls.n	8003368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b65      	ldr	r3, [pc, #404]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b63      	ldr	r3, [pc, #396]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0b8      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003380:	4b59      	ldr	r3, [pc, #356]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a58      	ldr	r2, [pc, #352]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800338a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003398:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a52      	ldr	r2, [pc, #328]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a4:	4b50      	ldr	r3, [pc, #320]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	494d      	ldr	r1, [pc, #308]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d044      	beq.n	800344c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	4b47      	ldr	r3, [pc, #284]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d119      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e07f      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d003      	beq.n	80033ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ea:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e06f      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fa:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e067      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340a:	4b37      	ldr	r3, [pc, #220]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4934      	ldr	r1, [pc, #208]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	4313      	orrs	r3, r2
 800341a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800341c:	f7fe fd22 	bl	8001e64 <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fe fd1e 	bl	8001e64 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e04f      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	4b2b      	ldr	r3, [pc, #172]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 020c 	and.w	r2, r3, #12
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	429a      	cmp	r2, r3
 800344a:	d1eb      	bne.n	8003424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800344c:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d20c      	bcs.n	8003474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e032      	b.n	80034da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4916      	ldr	r1, [pc, #88]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800349e:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	490e      	ldr	r1, [pc, #56]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034b2:	f000 f821 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 80034b6:	4602      	mov	r2, r0
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	490a      	ldr	r1, [pc, #40]	; (80034ec <HAL_RCC_ClockConfig+0x1c0>)
 80034c4:	5ccb      	ldrb	r3, [r1, r3]
 80034c6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ca:	4a09      	ldr	r2, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe fbdc 	bl	8001c90 <HAL_InitTick>

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023c00 	.word	0x40023c00
 80034e8:	40023800 	.word	0x40023800
 80034ec:	08006e88 	.word	0x08006e88
 80034f0:	20000c24 	.word	0x20000c24
 80034f4:	20000c28 	.word	0x20000c28

080034f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	607b      	str	r3, [r7, #4]
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	2300      	movs	r3, #0
 800350a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003510:	4b67      	ldr	r3, [pc, #412]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b08      	cmp	r3, #8
 800351a:	d00d      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0x40>
 800351c:	2b08      	cmp	r3, #8
 800351e:	f200 80bd 	bhi.w	800369c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x34>
 8003526:	2b04      	cmp	r3, #4
 8003528:	d003      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0x3a>
 800352a:	e0b7      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4b61      	ldr	r3, [pc, #388]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800352e:	60bb      	str	r3, [r7, #8]
       break;
 8003530:	e0b7      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003532:	4b61      	ldr	r3, [pc, #388]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003534:	60bb      	str	r3, [r7, #8]
      break;
 8003536:	e0b4      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003538:	4b5d      	ldr	r3, [pc, #372]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003540:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003542:	4b5b      	ldr	r3, [pc, #364]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d04d      	beq.n	80035ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354e:	4b58      	ldr	r3, [pc, #352]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	099b      	lsrs	r3, r3, #6
 8003554:	461a      	mov	r2, r3
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800355e:	f04f 0100 	mov.w	r1, #0
 8003562:	ea02 0800 	and.w	r8, r2, r0
 8003566:	ea03 0901 	and.w	r9, r3, r1
 800356a:	4640      	mov	r0, r8
 800356c:	4649      	mov	r1, r9
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	014b      	lsls	r3, r1, #5
 8003578:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800357c:	0142      	lsls	r2, r0, #5
 800357e:	4610      	mov	r0, r2
 8003580:	4619      	mov	r1, r3
 8003582:	ebb0 0008 	subs.w	r0, r0, r8
 8003586:	eb61 0109 	sbc.w	r1, r1, r9
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	018b      	lsls	r3, r1, #6
 8003594:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003598:	0182      	lsls	r2, r0, #6
 800359a:	1a12      	subs	r2, r2, r0
 800359c:	eb63 0301 	sbc.w	r3, r3, r1
 80035a0:	f04f 0000 	mov.w	r0, #0
 80035a4:	f04f 0100 	mov.w	r1, #0
 80035a8:	00d9      	lsls	r1, r3, #3
 80035aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035ae:	00d0      	lsls	r0, r2, #3
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	eb12 0208 	adds.w	r2, r2, r8
 80035b8:	eb43 0309 	adc.w	r3, r3, r9
 80035bc:	f04f 0000 	mov.w	r0, #0
 80035c0:	f04f 0100 	mov.w	r1, #0
 80035c4:	0259      	lsls	r1, r3, #9
 80035c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80035ca:	0250      	lsls	r0, r2, #9
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4610      	mov	r0, r2
 80035d2:	4619      	mov	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	f7fc fe00 	bl	80001e0 <__aeabi_uldivmod>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4613      	mov	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	e04a      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ea:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	099b      	lsrs	r3, r3, #6
 80035f0:	461a      	mov	r2, r3
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	ea02 0400 	and.w	r4, r2, r0
 8003602:	ea03 0501 	and.w	r5, r3, r1
 8003606:	4620      	mov	r0, r4
 8003608:	4629      	mov	r1, r5
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	014b      	lsls	r3, r1, #5
 8003614:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003618:	0142      	lsls	r2, r0, #5
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	1b00      	subs	r0, r0, r4
 8003620:	eb61 0105 	sbc.w	r1, r1, r5
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	018b      	lsls	r3, r1, #6
 800362e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003632:	0182      	lsls	r2, r0, #6
 8003634:	1a12      	subs	r2, r2, r0
 8003636:	eb63 0301 	sbc.w	r3, r3, r1
 800363a:	f04f 0000 	mov.w	r0, #0
 800363e:	f04f 0100 	mov.w	r1, #0
 8003642:	00d9      	lsls	r1, r3, #3
 8003644:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003648:	00d0      	lsls	r0, r2, #3
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	1912      	adds	r2, r2, r4
 8003650:	eb45 0303 	adc.w	r3, r5, r3
 8003654:	f04f 0000 	mov.w	r0, #0
 8003658:	f04f 0100 	mov.w	r1, #0
 800365c:	0299      	lsls	r1, r3, #10
 800365e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003662:	0290      	lsls	r0, r2, #10
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	461a      	mov	r2, r3
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	f7fc fdb4 	bl	80001e0 <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4613      	mov	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	0c1b      	lsrs	r3, r3, #16
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	3301      	adds	r3, #1
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	60bb      	str	r3, [r7, #8]
      break;
 800369a:	e002      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800369e:	60bb      	str	r3, [r7, #8]
      break;
 80036a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036a2:	68bb      	ldr	r3, [r7, #8]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800
 80036b4:	00f42400 	.word	0x00f42400
 80036b8:	007a1200 	.word	0x007a1200

080036bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20000c24 	.word	0x20000c24

080036d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036d8:	f7ff fff0 	bl	80036bc <HAL_RCC_GetHCLKFreq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	0a9b      	lsrs	r3, r3, #10
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	4903      	ldr	r1, [pc, #12]	; (80036f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ea:	5ccb      	ldrb	r3, [r1, r3]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40023800 	.word	0x40023800
 80036f8:	08006e98 	.word	0x08006e98

080036fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	220f      	movs	r2, #15
 800370a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800370c:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_RCC_GetClockConfig+0x5c>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0203 	and.w	r2, r3, #3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003718:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <HAL_RCC_GetClockConfig+0x5c>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <HAL_RCC_GetClockConfig+0x5c>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCC_GetClockConfig+0x5c>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	08db      	lsrs	r3, r3, #3
 8003736:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <HAL_RCC_GetClockConfig+0x60>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0207 	and.w	r2, r3, #7
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	601a      	str	r2, [r3, #0]
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800
 800375c:	40023c00 	.word	0x40023c00

08003760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e041      	b.n	80037f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f839 	bl	80037fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f000 f9ca 	bl	8003b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d001      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e044      	b.n	80038b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d018      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x6c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003856:	d013      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x6c>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00e      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x6c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a19      	ldr	r2, [pc, #100]	; (80038cc <HAL_TIM_Base_Start_IT+0xb8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d009      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x6c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a17      	ldr	r2, [pc, #92]	; (80038d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x6c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a16      	ldr	r2, [pc, #88]	; (80038d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d111      	bne.n	80038a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b06      	cmp	r3, #6
 8003890:	d010      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a2:	e007      	b.n	80038b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800
 80038d0:	40000c00 	.word	0x40000c00
 80038d4:	40014000 	.word	0x40014000

080038d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d122      	bne.n	8003934 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d11b      	bne.n	8003934 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0202 	mvn.w	r2, #2
 8003904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f8ee 	bl	8003afc <HAL_TIM_IC_CaptureCallback>
 8003920:	e005      	b.n	800392e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f8e0 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f8f1 	bl	8003b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b04      	cmp	r3, #4
 8003940:	d122      	bne.n	8003988 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b04      	cmp	r3, #4
 800394e:	d11b      	bne.n	8003988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0204 	mvn.w	r2, #4
 8003958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f8c4 	bl	8003afc <HAL_TIM_IC_CaptureCallback>
 8003974:	e005      	b.n	8003982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f8b6 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f8c7 	bl	8003b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b08      	cmp	r3, #8
 8003994:	d122      	bne.n	80039dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d11b      	bne.n	80039dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0208 	mvn.w	r2, #8
 80039ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2204      	movs	r2, #4
 80039b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f89a 	bl	8003afc <HAL_TIM_IC_CaptureCallback>
 80039c8:	e005      	b.n	80039d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f88c 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f89d 	bl	8003b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d122      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	d11b      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0210 	mvn.w	r2, #16
 8003a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2208      	movs	r2, #8
 8003a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f870 	bl	8003afc <HAL_TIM_IC_CaptureCallback>
 8003a1c:	e005      	b.n	8003a2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f862 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f873 	bl	8003b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d10e      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d107      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0201 	mvn.w	r2, #1
 8003a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd fa86 	bl	8000f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a66:	2b80      	cmp	r3, #128	; 0x80
 8003a68:	d10e      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a74:	2b80      	cmp	r3, #128	; 0x80
 8003a76:	d107      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f8e2 	bl	8003c4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	d10e      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	d107      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f838 	bl	8003b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d107      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0220 	mvn.w	r2, #32
 8003ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f8ac 	bl	8003c38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a34      	ldr	r2, [pc, #208]	; (8003c1c <TIM_Base_SetConfig+0xe4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00f      	beq.n	8003b70 <TIM_Base_SetConfig+0x38>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b56:	d00b      	beq.n	8003b70 <TIM_Base_SetConfig+0x38>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a31      	ldr	r2, [pc, #196]	; (8003c20 <TIM_Base_SetConfig+0xe8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d007      	beq.n	8003b70 <TIM_Base_SetConfig+0x38>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a30      	ldr	r2, [pc, #192]	; (8003c24 <TIM_Base_SetConfig+0xec>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d003      	beq.n	8003b70 <TIM_Base_SetConfig+0x38>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a2f      	ldr	r2, [pc, #188]	; (8003c28 <TIM_Base_SetConfig+0xf0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d108      	bne.n	8003b82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a25      	ldr	r2, [pc, #148]	; (8003c1c <TIM_Base_SetConfig+0xe4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d01b      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b90:	d017      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a22      	ldr	r2, [pc, #136]	; (8003c20 <TIM_Base_SetConfig+0xe8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a21      	ldr	r2, [pc, #132]	; (8003c24 <TIM_Base_SetConfig+0xec>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00f      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a20      	ldr	r2, [pc, #128]	; (8003c28 <TIM_Base_SetConfig+0xf0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00b      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a1f      	ldr	r2, [pc, #124]	; (8003c2c <TIM_Base_SetConfig+0xf4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d007      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <TIM_Base_SetConfig+0xf8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <TIM_Base_SetConfig+0x8a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <TIM_Base_SetConfig+0xfc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d108      	bne.n	8003bd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <TIM_Base_SetConfig+0xe4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d103      	bne.n	8003c08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	615a      	str	r2, [r3, #20]
}
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40010000 	.word	0x40010000
 8003c20:	40000400 	.word	0x40000400
 8003c24:	40000800 	.word	0x40000800
 8003c28:	40000c00 	.word	0x40000c00
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40014400 	.word	0x40014400
 8003c34:	40014800 	.word	0x40014800

08003c38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c72:	2b84      	cmp	r3, #132	; 0x84
 8003c74:	d005      	beq.n	8003c82 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3303      	adds	r3, #3
 8003c80:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c82:	68fb      	ldr	r3, [r7, #12]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c94:	f000 faf6 	bl	8004284 <vTaskStartScheduler>
  
  return osOK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca0:	b089      	sub	sp, #36	; 0x24
 8003ca2:	af04      	add	r7, sp, #16
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <osThreadCreate+0x54>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01c      	beq.n	8003cf2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685c      	ldr	r4, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681d      	ldr	r5, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691e      	ldr	r6, [r3, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff ffc8 	bl	8003c60 <makeFreeRtosPriority>
 8003cd0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cda:	9202      	str	r2, [sp, #8]
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	9100      	str	r1, [sp, #0]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	4632      	mov	r2, r6
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f000 f8ed 	bl	8003ec6 <xTaskCreateStatic>
 8003cec:	4603      	mov	r3, r0
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e01c      	b.n	8003d2c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685c      	ldr	r4, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cfe:	b29e      	uxth	r6, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff ffaa 	bl	8003c60 <makeFreeRtosPriority>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	f107 030c 	add.w	r3, r7, #12
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	9200      	str	r2, [sp, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	4632      	mov	r2, r6
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f000 f92f 	bl	8003f80 <xTaskCreate>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d001      	beq.n	8003d2c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e000      	b.n	8003d2e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d36 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <osDelay+0x16>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	e000      	b.n	8003d4e <osDelay+0x18>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fa64 	bl	800421c <vTaskDelay>
  
  return osOK;
 8003d54:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f103 0208 	add.w	r2, r3, #8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f04f 32ff 	mov.w	r2, #4294967295
 8003d76:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f103 0208 	add.w	r2, r3, #8
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f103 0208 	add.w	r2, r3, #8
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	601a      	str	r2, [r3, #0]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e16:	d103      	bne.n	8003e20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	e00c      	b.n	8003e3a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3308      	adds	r3, #8
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e002      	b.n	8003e2e <vListInsert+0x2e>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d2f6      	bcs.n	8003e28 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	601a      	str	r2, [r3, #0]
}
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e72:	b480      	push	{r7}
 8003e74:	b085      	sub	sp, #20
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6892      	ldr	r2, [r2, #8]
 8003e88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6852      	ldr	r2, [r2, #4]
 8003e92:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d103      	bne.n	8003ea6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	1e5a      	subs	r2, r3, #1
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b08e      	sub	sp, #56	; 0x38
 8003eca:	af04      	add	r7, sp, #16
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
 8003ed2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003eec:	bf00      	nop
 8003eee:	e7fe      	b.n	8003eee <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <xTaskCreateStatic+0x46>
	__asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	61fb      	str	r3, [r7, #28]
}
 8003f08:	bf00      	nop
 8003f0a:	e7fe      	b.n	8003f0a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f0c:	23b4      	movs	r3, #180	; 0xb4
 8003f0e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	2bb4      	cmp	r3, #180	; 0xb4
 8003f14:	d00a      	beq.n	8003f2c <xTaskCreateStatic+0x66>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	61bb      	str	r3, [r7, #24]
}
 8003f28:	bf00      	nop
 8003f2a:	e7fe      	b.n	8003f2a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01e      	beq.n	8003f72 <xTaskCreateStatic+0xac>
 8003f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01b      	beq.n	8003f72 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9303      	str	r3, [sp, #12]
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	9302      	str	r3, [sp, #8]
 8003f54:	f107 0314 	add.w	r3, r7, #20
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f851 	bl	800400c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f6c:	f000 f8ec 	bl	8004148 <prvAddNewTaskToReadyList>
 8003f70:	e001      	b.n	8003f76 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f76:	697b      	ldr	r3, [r7, #20]
	}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3728      	adds	r7, #40	; 0x28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08c      	sub	sp, #48	; 0x30
 8003f84:	af04      	add	r7, sp, #16
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 feef 	bl	8004d78 <pvPortMalloc>
 8003f9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00e      	beq.n	8003fc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fa2:	20b4      	movs	r0, #180	; 0xb4
 8003fa4:	f000 fee8 	bl	8004d78 <pvPortMalloc>
 8003fa8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
 8003fb6:	e005      	b.n	8003fc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fb8:	6978      	ldr	r0, [r7, #20]
 8003fba:	f000 ffa9 	bl	8004f10 <vPortFree>
 8003fbe:	e001      	b.n	8003fc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d017      	beq.n	8003ffa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fd2:	88fa      	ldrh	r2, [r7, #6]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	9303      	str	r3, [sp, #12]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	9302      	str	r3, [sp, #8]
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	9301      	str	r3, [sp, #4]
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f80f 	bl	800400c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fee:	69f8      	ldr	r0, [r7, #28]
 8003ff0:	f000 f8aa 	bl	8004148 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	e002      	b.n	8004000 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004000:	69bb      	ldr	r3, [r7, #24]
	}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800401a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004024:	3b01      	subs	r3, #1
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	f023 0307 	bic.w	r3, r3, #7
 8004032:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <prvInitialiseNewTask+0x48>
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	617b      	str	r3, [r7, #20]
}
 8004050:	bf00      	nop
 8004052:	e7fe      	b.n	8004052 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01f      	beq.n	800409a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	e012      	b.n	8004086 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4413      	add	r3, r2
 8004066:	7819      	ldrb	r1, [r3, #0]
 8004068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	4413      	add	r3, r2
 800406e:	3334      	adds	r3, #52	; 0x34
 8004070:	460a      	mov	r2, r1
 8004072:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	4413      	add	r3, r2
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d006      	beq.n	800408e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	3301      	adds	r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	2b0f      	cmp	r3, #15
 800408a:	d9e9      	bls.n	8004060 <prvInitialiseNewTask+0x54>
 800408c:	e000      	b.n	8004090 <prvInitialiseNewTask+0x84>
			{
				break;
 800408e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004098:	e003      	b.n	80040a2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	2b06      	cmp	r3, #6
 80040a6:	d901      	bls.n	80040ac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040a8:	2306      	movs	r3, #6
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	2200      	movs	r2, #0
 80040bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	3304      	adds	r3, #4
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fe6b 	bl	8003d9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	3318      	adds	r3, #24
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fe66 	bl	8003d9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	f1c3 0207 	rsb	r2, r3, #7
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	334c      	adds	r3, #76	; 0x4c
 80040fc:	2260      	movs	r2, #96	; 0x60
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f001 f849 	bl	8005198 <memset>
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	4a0c      	ldr	r2, [pc, #48]	; (800413c <prvInitialiseNewTask+0x130>)
 800410a:	651a      	str	r2, [r3, #80]	; 0x50
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	4a0c      	ldr	r2, [pc, #48]	; (8004140 <prvInitialiseNewTask+0x134>)
 8004110:	655a      	str	r2, [r3, #84]	; 0x54
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	4a0b      	ldr	r2, [pc, #44]	; (8004144 <prvInitialiseNewTask+0x138>)
 8004116:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	68f9      	ldr	r1, [r7, #12]
 800411c:	69b8      	ldr	r0, [r7, #24]
 800411e:	f000 fc1f 	bl	8004960 <pxPortInitialiseStack>
 8004122:	4602      	mov	r2, r0
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800412e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004132:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004134:	bf00      	nop
 8004136:	3720      	adds	r7, #32
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	08006ec0 	.word	0x08006ec0
 8004140:	08006ee0 	.word	0x08006ee0
 8004144:	08006ea0 	.word	0x08006ea0

08004148 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004150:	f000 fd30 	bl	8004bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004154:	4b2a      	ldr	r3, [pc, #168]	; (8004200 <prvAddNewTaskToReadyList+0xb8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3301      	adds	r3, #1
 800415a:	4a29      	ldr	r2, [pc, #164]	; (8004200 <prvAddNewTaskToReadyList+0xb8>)
 800415c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800415e:	4b29      	ldr	r3, [pc, #164]	; (8004204 <prvAddNewTaskToReadyList+0xbc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004166:	4a27      	ldr	r2, [pc, #156]	; (8004204 <prvAddNewTaskToReadyList+0xbc>)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800416c:	4b24      	ldr	r3, [pc, #144]	; (8004200 <prvAddNewTaskToReadyList+0xb8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d110      	bne.n	8004196 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004174:	f000 facc 	bl	8004710 <prvInitialiseTaskLists>
 8004178:	e00d      	b.n	8004196 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800417a:	4b23      	ldr	r3, [pc, #140]	; (8004208 <prvAddNewTaskToReadyList+0xc0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <prvAddNewTaskToReadyList+0xbc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	429a      	cmp	r2, r3
 800418e:	d802      	bhi.n	8004196 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004190:	4a1c      	ldr	r2, [pc, #112]	; (8004204 <prvAddNewTaskToReadyList+0xbc>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004196:	4b1d      	ldr	r3, [pc, #116]	; (800420c <prvAddNewTaskToReadyList+0xc4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3301      	adds	r3, #1
 800419c:	4a1b      	ldr	r2, [pc, #108]	; (800420c <prvAddNewTaskToReadyList+0xc4>)
 800419e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	2201      	movs	r2, #1
 80041a6:	409a      	lsls	r2, r3
 80041a8:	4b19      	ldr	r3, [pc, #100]	; (8004210 <prvAddNewTaskToReadyList+0xc8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	4a18      	ldr	r2, [pc, #96]	; (8004210 <prvAddNewTaskToReadyList+0xc8>)
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4a15      	ldr	r2, [pc, #84]	; (8004214 <prvAddNewTaskToReadyList+0xcc>)
 80041c0:	441a      	add	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3304      	adds	r3, #4
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f7ff fdf5 	bl	8003db8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041ce:	f000 fd21 	bl	8004c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041d2:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <prvAddNewTaskToReadyList+0xc0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00e      	beq.n	80041f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <prvAddNewTaskToReadyList+0xbc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d207      	bcs.n	80041f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <prvAddNewTaskToReadyList+0xd0>)
 80041ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20001494 	.word	0x20001494
 8004204:	20001394 	.word	0x20001394
 8004208:	200014a0 	.word	0x200014a0
 800420c:	200014b0 	.word	0x200014b0
 8004210:	2000149c 	.word	0x2000149c
 8004214:	20001398 	.word	0x20001398
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d017      	beq.n	800425e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800422e:	4b13      	ldr	r3, [pc, #76]	; (800427c <vTaskDelay+0x60>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <vTaskDelay+0x30>
	__asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	60bb      	str	r3, [r7, #8]
}
 8004248:	bf00      	nop
 800424a:	e7fe      	b.n	800424a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800424c:	f000 f884 	bl	8004358 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004250:	2100      	movs	r1, #0
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fb1e 	bl	8004894 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004258:	f000 f88c 	bl	8004374 <xTaskResumeAll>
 800425c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d107      	bne.n	8004274 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <vTaskDelay+0x64>)
 8004266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	200014bc 	.word	0x200014bc
 8004280:	e000ed04 	.word	0xe000ed04

08004284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08a      	sub	sp, #40	; 0x28
 8004288:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004292:	463a      	mov	r2, r7
 8004294:	1d39      	adds	r1, r7, #4
 8004296:	f107 0308 	add.w	r3, r7, #8
 800429a:	4618      	mov	r0, r3
 800429c:	f7fc fb9c 	bl	80009d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042a0:	6839      	ldr	r1, [r7, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	9202      	str	r2, [sp, #8]
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	2300      	movs	r3, #0
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2300      	movs	r3, #0
 80042b0:	460a      	mov	r2, r1
 80042b2:	4921      	ldr	r1, [pc, #132]	; (8004338 <vTaskStartScheduler+0xb4>)
 80042b4:	4821      	ldr	r0, [pc, #132]	; (800433c <vTaskStartScheduler+0xb8>)
 80042b6:	f7ff fe06 	bl	8003ec6 <xTaskCreateStatic>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4a20      	ldr	r2, [pc, #128]	; (8004340 <vTaskStartScheduler+0xbc>)
 80042be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042c0:	4b1f      	ldr	r3, [pc, #124]	; (8004340 <vTaskStartScheduler+0xbc>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042c8:	2301      	movs	r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e001      	b.n	80042d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d11b      	bne.n	8004310 <vTaskStartScheduler+0x8c>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	613b      	str	r3, [r7, #16]
}
 80042ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80042ec:	4b15      	ldr	r3, [pc, #84]	; (8004344 <vTaskStartScheduler+0xc0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	334c      	adds	r3, #76	; 0x4c
 80042f2:	4a15      	ldr	r2, [pc, #84]	; (8004348 <vTaskStartScheduler+0xc4>)
 80042f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042f6:	4b15      	ldr	r3, [pc, #84]	; (800434c <vTaskStartScheduler+0xc8>)
 80042f8:	f04f 32ff 	mov.w	r2, #4294967295
 80042fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042fe:	4b14      	ldr	r3, [pc, #80]	; (8004350 <vTaskStartScheduler+0xcc>)
 8004300:	2201      	movs	r2, #1
 8004302:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004304:	4b13      	ldr	r3, [pc, #76]	; (8004354 <vTaskStartScheduler+0xd0>)
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800430a:	f000 fbb1 	bl	8004a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800430e:	e00e      	b.n	800432e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	d10a      	bne.n	800432e <vTaskStartScheduler+0xaa>
	__asm volatile
 8004318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	60fb      	str	r3, [r7, #12]
}
 800432a:	bf00      	nop
 800432c:	e7fe      	b.n	800432c <vTaskStartScheduler+0xa8>
}
 800432e:	bf00      	nop
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	080053c8 	.word	0x080053c8
 800433c:	080046e1 	.word	0x080046e1
 8004340:	200014b8 	.word	0x200014b8
 8004344:	20001394 	.word	0x20001394
 8004348:	20000c34 	.word	0x20000c34
 800434c:	200014b4 	.word	0x200014b4
 8004350:	200014a0 	.word	0x200014a0
 8004354:	20001498 	.word	0x20001498

08004358 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <vTaskSuspendAll+0x18>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3301      	adds	r3, #1
 8004362:	4a03      	ldr	r2, [pc, #12]	; (8004370 <vTaskSuspendAll+0x18>)
 8004364:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004366:	bf00      	nop
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	200014bc 	.word	0x200014bc

08004374 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004382:	4b41      	ldr	r3, [pc, #260]	; (8004488 <xTaskResumeAll+0x114>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	603b      	str	r3, [r7, #0]
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043a0:	f000 fc08 	bl	8004bb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043a4:	4b38      	ldr	r3, [pc, #224]	; (8004488 <xTaskResumeAll+0x114>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	4a37      	ldr	r2, [pc, #220]	; (8004488 <xTaskResumeAll+0x114>)
 80043ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ae:	4b36      	ldr	r3, [pc, #216]	; (8004488 <xTaskResumeAll+0x114>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d161      	bne.n	800447a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043b6:	4b35      	ldr	r3, [pc, #212]	; (800448c <xTaskResumeAll+0x118>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d05d      	beq.n	800447a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043be:	e02e      	b.n	800441e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c0:	4b33      	ldr	r3, [pc, #204]	; (8004490 <xTaskResumeAll+0x11c>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3318      	adds	r3, #24
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff fd50 	bl	8003e72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3304      	adds	r3, #4
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fd4b 	bl	8003e72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	2201      	movs	r2, #1
 80043e2:	409a      	lsls	r2, r3
 80043e4:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <xTaskResumeAll+0x120>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	4a2a      	ldr	r2, [pc, #168]	; (8004494 <xTaskResumeAll+0x120>)
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4a27      	ldr	r2, [pc, #156]	; (8004498 <xTaskResumeAll+0x124>)
 80043fc:	441a      	add	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3304      	adds	r3, #4
 8004402:	4619      	mov	r1, r3
 8004404:	4610      	mov	r0, r2
 8004406:	f7ff fcd7 	bl	8003db8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440e:	4b23      	ldr	r3, [pc, #140]	; (800449c <xTaskResumeAll+0x128>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	429a      	cmp	r2, r3
 8004416:	d302      	bcc.n	800441e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004418:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <xTaskResumeAll+0x12c>)
 800441a:	2201      	movs	r2, #1
 800441c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800441e:	4b1c      	ldr	r3, [pc, #112]	; (8004490 <xTaskResumeAll+0x11c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1cc      	bne.n	80043c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800442c:	f000 fa12 	bl	8004854 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004430:	4b1c      	ldr	r3, [pc, #112]	; (80044a4 <xTaskResumeAll+0x130>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d010      	beq.n	800445e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800443c:	f000 f836 	bl	80044ac <xTaskIncrementTick>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004446:	4b16      	ldr	r3, [pc, #88]	; (80044a0 <xTaskResumeAll+0x12c>)
 8004448:	2201      	movs	r2, #1
 800444a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3b01      	subs	r3, #1
 8004450:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1f1      	bne.n	800443c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004458:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <xTaskResumeAll+0x130>)
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800445e:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <xTaskResumeAll+0x12c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004466:	2301      	movs	r3, #1
 8004468:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800446a:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <xTaskResumeAll+0x134>)
 800446c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800447a:	f000 fbcb 	bl	8004c14 <vPortExitCritical>

	return xAlreadyYielded;
 800447e:	68bb      	ldr	r3, [r7, #8]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	200014bc 	.word	0x200014bc
 800448c:	20001494 	.word	0x20001494
 8004490:	20001454 	.word	0x20001454
 8004494:	2000149c 	.word	0x2000149c
 8004498:	20001398 	.word	0x20001398
 800449c:	20001394 	.word	0x20001394
 80044a0:	200014a8 	.word	0x200014a8
 80044a4:	200014a4 	.word	0x200014a4
 80044a8:	e000ed04 	.word	0xe000ed04

080044ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044b6:	4b4e      	ldr	r3, [pc, #312]	; (80045f0 <xTaskIncrementTick+0x144>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f040 808e 	bne.w	80045dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044c0:	4b4c      	ldr	r3, [pc, #304]	; (80045f4 <xTaskIncrementTick+0x148>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3301      	adds	r3, #1
 80044c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044c8:	4a4a      	ldr	r2, [pc, #296]	; (80045f4 <xTaskIncrementTick+0x148>)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d120      	bne.n	8004516 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80044d4:	4b48      	ldr	r3, [pc, #288]	; (80045f8 <xTaskIncrementTick+0x14c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	603b      	str	r3, [r7, #0]
}
 80044f0:	bf00      	nop
 80044f2:	e7fe      	b.n	80044f2 <xTaskIncrementTick+0x46>
 80044f4:	4b40      	ldr	r3, [pc, #256]	; (80045f8 <xTaskIncrementTick+0x14c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	4b40      	ldr	r3, [pc, #256]	; (80045fc <xTaskIncrementTick+0x150>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a3e      	ldr	r2, [pc, #248]	; (80045f8 <xTaskIncrementTick+0x14c>)
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	4a3e      	ldr	r2, [pc, #248]	; (80045fc <xTaskIncrementTick+0x150>)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	4b3d      	ldr	r3, [pc, #244]	; (8004600 <xTaskIncrementTick+0x154>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3301      	adds	r3, #1
 800450e:	4a3c      	ldr	r2, [pc, #240]	; (8004600 <xTaskIncrementTick+0x154>)
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	f000 f99f 	bl	8004854 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004516:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <xTaskIncrementTick+0x158>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	429a      	cmp	r2, r3
 800451e:	d348      	bcc.n	80045b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004520:	4b35      	ldr	r3, [pc, #212]	; (80045f8 <xTaskIncrementTick+0x14c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800452a:	4b36      	ldr	r3, [pc, #216]	; (8004604 <xTaskIncrementTick+0x158>)
 800452c:	f04f 32ff 	mov.w	r2, #4294967295
 8004530:	601a      	str	r2, [r3, #0]
					break;
 8004532:	e03e      	b.n	80045b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004534:	4b30      	ldr	r3, [pc, #192]	; (80045f8 <xTaskIncrementTick+0x14c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	429a      	cmp	r2, r3
 800454a:	d203      	bcs.n	8004554 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800454c:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <xTaskIncrementTick+0x158>)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004552:	e02e      	b.n	80045b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	3304      	adds	r3, #4
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fc8a 	bl	8003e72 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	2b00      	cmp	r3, #0
 8004564:	d004      	beq.n	8004570 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	3318      	adds	r3, #24
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fc81 	bl	8003e72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	2201      	movs	r2, #1
 8004576:	409a      	lsls	r2, r3
 8004578:	4b23      	ldr	r3, [pc, #140]	; (8004608 <xTaskIncrementTick+0x15c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4313      	orrs	r3, r2
 800457e:	4a22      	ldr	r2, [pc, #136]	; (8004608 <xTaskIncrementTick+0x15c>)
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4a1f      	ldr	r2, [pc, #124]	; (800460c <xTaskIncrementTick+0x160>)
 8004590:	441a      	add	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	3304      	adds	r3, #4
 8004596:	4619      	mov	r1, r3
 8004598:	4610      	mov	r0, r2
 800459a:	f7ff fc0d 	bl	8003db8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a2:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <xTaskIncrementTick+0x164>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d3b9      	bcc.n	8004520 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045b0:	e7b6      	b.n	8004520 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045b2:	4b17      	ldr	r3, [pc, #92]	; (8004610 <xTaskIncrementTick+0x164>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4914      	ldr	r1, [pc, #80]	; (800460c <xTaskIncrementTick+0x160>)
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d901      	bls.n	80045ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80045ca:	2301      	movs	r3, #1
 80045cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80045ce:	4b11      	ldr	r3, [pc, #68]	; (8004614 <xTaskIncrementTick+0x168>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d007      	beq.n	80045e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80045d6:	2301      	movs	r3, #1
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	e004      	b.n	80045e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80045dc:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <xTaskIncrementTick+0x16c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3301      	adds	r3, #1
 80045e2:	4a0d      	ldr	r2, [pc, #52]	; (8004618 <xTaskIncrementTick+0x16c>)
 80045e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80045e6:	697b      	ldr	r3, [r7, #20]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	200014bc 	.word	0x200014bc
 80045f4:	20001498 	.word	0x20001498
 80045f8:	2000144c 	.word	0x2000144c
 80045fc:	20001450 	.word	0x20001450
 8004600:	200014ac 	.word	0x200014ac
 8004604:	200014b4 	.word	0x200014b4
 8004608:	2000149c 	.word	0x2000149c
 800460c:	20001398 	.word	0x20001398
 8004610:	20001394 	.word	0x20001394
 8004614:	200014a8 	.word	0x200014a8
 8004618:	200014a4 	.word	0x200014a4

0800461c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004622:	4b29      	ldr	r3, [pc, #164]	; (80046c8 <vTaskSwitchContext+0xac>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800462a:	4b28      	ldr	r3, [pc, #160]	; (80046cc <vTaskSwitchContext+0xb0>)
 800462c:	2201      	movs	r2, #1
 800462e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004630:	e044      	b.n	80046bc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004632:	4b26      	ldr	r3, [pc, #152]	; (80046cc <vTaskSwitchContext+0xb0>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004638:	4b25      	ldr	r3, [pc, #148]	; (80046d0 <vTaskSwitchContext+0xb4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004646:	7afb      	ldrb	r3, [r7, #11]
 8004648:	f1c3 031f 	rsb	r3, r3, #31
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	4921      	ldr	r1, [pc, #132]	; (80046d4 <vTaskSwitchContext+0xb8>)
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	607b      	str	r3, [r7, #4]
}
 8004674:	bf00      	nop
 8004676:	e7fe      	b.n	8004676 <vTaskSwitchContext+0x5a>
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4a14      	ldr	r2, [pc, #80]	; (80046d4 <vTaskSwitchContext+0xb8>)
 8004684:	4413      	add	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	3308      	adds	r3, #8
 800469a:	429a      	cmp	r2, r3
 800469c:	d104      	bne.n	80046a8 <vTaskSwitchContext+0x8c>
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	605a      	str	r2, [r3, #4]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	4a0a      	ldr	r2, [pc, #40]	; (80046d8 <vTaskSwitchContext+0xbc>)
 80046b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046b2:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <vTaskSwitchContext+0xbc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	334c      	adds	r3, #76	; 0x4c
 80046b8:	4a08      	ldr	r2, [pc, #32]	; (80046dc <vTaskSwitchContext+0xc0>)
 80046ba:	6013      	str	r3, [r2, #0]
}
 80046bc:	bf00      	nop
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	200014bc 	.word	0x200014bc
 80046cc:	200014a8 	.word	0x200014a8
 80046d0:	2000149c 	.word	0x2000149c
 80046d4:	20001398 	.word	0x20001398
 80046d8:	20001394 	.word	0x20001394
 80046dc:	20000c34 	.word	0x20000c34

080046e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046e8:	f000 f852 	bl	8004790 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046ec:	4b06      	ldr	r3, [pc, #24]	; (8004708 <prvIdleTask+0x28>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d9f9      	bls.n	80046e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80046f4:	4b05      	ldr	r3, [pc, #20]	; (800470c <prvIdleTask+0x2c>)
 80046f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004704:	e7f0      	b.n	80046e8 <prvIdleTask+0x8>
 8004706:	bf00      	nop
 8004708:	20001398 	.word	0x20001398
 800470c:	e000ed04 	.word	0xe000ed04

08004710 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004716:	2300      	movs	r3, #0
 8004718:	607b      	str	r3, [r7, #4]
 800471a:	e00c      	b.n	8004736 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4a12      	ldr	r2, [pc, #72]	; (8004770 <prvInitialiseTaskLists+0x60>)
 8004728:	4413      	add	r3, r2
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fb17 	bl	8003d5e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3301      	adds	r3, #1
 8004734:	607b      	str	r3, [r7, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b06      	cmp	r3, #6
 800473a:	d9ef      	bls.n	800471c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800473c:	480d      	ldr	r0, [pc, #52]	; (8004774 <prvInitialiseTaskLists+0x64>)
 800473e:	f7ff fb0e 	bl	8003d5e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004742:	480d      	ldr	r0, [pc, #52]	; (8004778 <prvInitialiseTaskLists+0x68>)
 8004744:	f7ff fb0b 	bl	8003d5e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004748:	480c      	ldr	r0, [pc, #48]	; (800477c <prvInitialiseTaskLists+0x6c>)
 800474a:	f7ff fb08 	bl	8003d5e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800474e:	480c      	ldr	r0, [pc, #48]	; (8004780 <prvInitialiseTaskLists+0x70>)
 8004750:	f7ff fb05 	bl	8003d5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004754:	480b      	ldr	r0, [pc, #44]	; (8004784 <prvInitialiseTaskLists+0x74>)
 8004756:	f7ff fb02 	bl	8003d5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800475a:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <prvInitialiseTaskLists+0x78>)
 800475c:	4a05      	ldr	r2, [pc, #20]	; (8004774 <prvInitialiseTaskLists+0x64>)
 800475e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004760:	4b0a      	ldr	r3, [pc, #40]	; (800478c <prvInitialiseTaskLists+0x7c>)
 8004762:	4a05      	ldr	r2, [pc, #20]	; (8004778 <prvInitialiseTaskLists+0x68>)
 8004764:	601a      	str	r2, [r3, #0]
}
 8004766:	bf00      	nop
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20001398 	.word	0x20001398
 8004774:	20001424 	.word	0x20001424
 8004778:	20001438 	.word	0x20001438
 800477c:	20001454 	.word	0x20001454
 8004780:	20001468 	.word	0x20001468
 8004784:	20001480 	.word	0x20001480
 8004788:	2000144c 	.word	0x2000144c
 800478c:	20001450 	.word	0x20001450

08004790 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004796:	e019      	b.n	80047cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004798:	f000 fa0c 	bl	8004bb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800479c:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <prvCheckTasksWaitingTermination+0x50>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fb62 	bl	8003e72 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <prvCheckTasksWaitingTermination+0x54>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	4a0b      	ldr	r2, [pc, #44]	; (80047e4 <prvCheckTasksWaitingTermination+0x54>)
 80047b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <prvCheckTasksWaitingTermination+0x58>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3b01      	subs	r3, #1
 80047be:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <prvCheckTasksWaitingTermination+0x58>)
 80047c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047c2:	f000 fa27 	bl	8004c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f810 	bl	80047ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047cc:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <prvCheckTasksWaitingTermination+0x58>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e1      	bne.n	8004798 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20001468 	.word	0x20001468
 80047e4:	20001494 	.word	0x20001494
 80047e8:	2000147c 	.word	0x2000147c

080047ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	334c      	adds	r3, #76	; 0x4c
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 fce3 	bl	80051c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d108      	bne.n	800481a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fb7f 	bl	8004f10 <vPortFree>
				vPortFree( pxTCB );
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fb7c 	bl	8004f10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004818:	e018      	b.n	800484c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004820:	2b01      	cmp	r3, #1
 8004822:	d103      	bne.n	800482c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fb73 	bl	8004f10 <vPortFree>
	}
 800482a:	e00f      	b.n	800484c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004832:	2b02      	cmp	r3, #2
 8004834:	d00a      	beq.n	800484c <prvDeleteTCB+0x60>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	60fb      	str	r3, [r7, #12]
}
 8004848:	bf00      	nop
 800484a:	e7fe      	b.n	800484a <prvDeleteTCB+0x5e>
	}
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800485a:	4b0c      	ldr	r3, [pc, #48]	; (800488c <prvResetNextTaskUnblockTime+0x38>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d104      	bne.n	800486e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004864:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <prvResetNextTaskUnblockTime+0x3c>)
 8004866:	f04f 32ff 	mov.w	r2, #4294967295
 800486a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800486c:	e008      	b.n	8004880 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486e:	4b07      	ldr	r3, [pc, #28]	; (800488c <prvResetNextTaskUnblockTime+0x38>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4a04      	ldr	r2, [pc, #16]	; (8004890 <prvResetNextTaskUnblockTime+0x3c>)
 800487e:	6013      	str	r3, [r2, #0]
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	2000144c 	.word	0x2000144c
 8004890:	200014b4 	.word	0x200014b4

08004894 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800489e:	4b29      	ldr	r3, [pc, #164]	; (8004944 <prvAddCurrentTaskToDelayedList+0xb0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048a4:	4b28      	ldr	r3, [pc, #160]	; (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3304      	adds	r3, #4
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fae1 	bl	8003e72 <uxListRemove>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10b      	bne.n	80048ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80048b6:	4b24      	ldr	r3, [pc, #144]	; (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	2201      	movs	r2, #1
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43da      	mvns	r2, r3
 80048c4:	4b21      	ldr	r3, [pc, #132]	; (800494c <prvAddCurrentTaskToDelayedList+0xb8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4013      	ands	r3, r2
 80048ca:	4a20      	ldr	r2, [pc, #128]	; (800494c <prvAddCurrentTaskToDelayedList+0xb8>)
 80048cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d10a      	bne.n	80048ec <prvAddCurrentTaskToDelayedList+0x58>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048dc:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4619      	mov	r1, r3
 80048e4:	481a      	ldr	r0, [pc, #104]	; (8004950 <prvAddCurrentTaskToDelayedList+0xbc>)
 80048e6:	f7ff fa67 	bl	8003db8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048ea:	e026      	b.n	800493a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4413      	add	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048f4:	4b14      	ldr	r3, [pc, #80]	; (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	429a      	cmp	r2, r3
 8004902:	d209      	bcs.n	8004918 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004904:	4b13      	ldr	r3, [pc, #76]	; (8004954 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3304      	adds	r3, #4
 800490e:	4619      	mov	r1, r3
 8004910:	4610      	mov	r0, r2
 8004912:	f7ff fa75 	bl	8003e00 <vListInsert>
}
 8004916:	e010      	b.n	800493a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004918:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <prvAddCurrentTaskToDelayedList+0xc4>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <prvAddCurrentTaskToDelayedList+0xb4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3304      	adds	r3, #4
 8004922:	4619      	mov	r1, r3
 8004924:	4610      	mov	r0, r2
 8004926:	f7ff fa6b 	bl	8003e00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800492a:	4b0c      	ldr	r3, [pc, #48]	; (800495c <prvAddCurrentTaskToDelayedList+0xc8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	429a      	cmp	r2, r3
 8004932:	d202      	bcs.n	800493a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004934:	4a09      	ldr	r2, [pc, #36]	; (800495c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	6013      	str	r3, [r2, #0]
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20001498 	.word	0x20001498
 8004948:	20001394 	.word	0x20001394
 800494c:	2000149c 	.word	0x2000149c
 8004950:	20001480 	.word	0x20001480
 8004954:	20001450 	.word	0x20001450
 8004958:	2000144c 	.word	0x2000144c
 800495c:	200014b4 	.word	0x200014b4

08004960 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3b04      	subs	r3, #4
 8004970:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3b04      	subs	r3, #4
 800497e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f023 0201 	bic.w	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3b04      	subs	r3, #4
 800498e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004990:	4a0c      	ldr	r2, [pc, #48]	; (80049c4 <pxPortInitialiseStack+0x64>)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3b14      	subs	r3, #20
 800499a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3b04      	subs	r3, #4
 80049a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f06f 0202 	mvn.w	r2, #2
 80049ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3b20      	subs	r3, #32
 80049b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049b6:	68fb      	ldr	r3, [r7, #12]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	080049c9 	.word	0x080049c9

080049c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049d2:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <prvTaskExitError+0x54>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049da:	d00a      	beq.n	80049f2 <prvTaskExitError+0x2a>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	60fb      	str	r3, [r7, #12]
}
 80049ee:	bf00      	nop
 80049f0:	e7fe      	b.n	80049f0 <prvTaskExitError+0x28>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	60bb      	str	r3, [r7, #8]
}
 8004a04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a06:	bf00      	nop
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0fc      	beq.n	8004a08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	20000c30 	.word	0x20000c30

08004a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a20:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <pxCurrentTCBConst2>)
 8004a22:	6819      	ldr	r1, [r3, #0]
 8004a24:	6808      	ldr	r0, [r1, #0]
 8004a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2a:	f380 8809 	msr	PSP, r0
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	f380 8811 	msr	BASEPRI, r0
 8004a3a:	4770      	bx	lr
 8004a3c:	f3af 8000 	nop.w

08004a40 <pxCurrentTCBConst2>:
 8004a40:	20001394 	.word	0x20001394
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop

08004a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a48:	4808      	ldr	r0, [pc, #32]	; (8004a6c <prvPortStartFirstTask+0x24>)
 8004a4a:	6800      	ldr	r0, [r0, #0]
 8004a4c:	6800      	ldr	r0, [r0, #0]
 8004a4e:	f380 8808 	msr	MSP, r0
 8004a52:	f04f 0000 	mov.w	r0, #0
 8004a56:	f380 8814 	msr	CONTROL, r0
 8004a5a:	b662      	cpsie	i
 8004a5c:	b661      	cpsie	f
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	df00      	svc	0
 8004a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a6a:	bf00      	nop
 8004a6c:	e000ed08 	.word	0xe000ed08

08004a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a76:	4b46      	ldr	r3, [pc, #280]	; (8004b90 <xPortStartScheduler+0x120>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a46      	ldr	r2, [pc, #280]	; (8004b94 <xPortStartScheduler+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d10a      	bne.n	8004a96 <xPortStartScheduler+0x26>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	613b      	str	r3, [r7, #16]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a96:	4b3e      	ldr	r3, [pc, #248]	; (8004b90 <xPortStartScheduler+0x120>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a3f      	ldr	r2, [pc, #252]	; (8004b98 <xPortStartScheduler+0x128>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d10a      	bne.n	8004ab6 <xPortStartScheduler+0x46>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	60fb      	str	r3, [r7, #12]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ab6:	4b39      	ldr	r3, [pc, #228]	; (8004b9c <xPortStartScheduler+0x12c>)
 8004ab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	22ff      	movs	r2, #255	; 0xff
 8004ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	4b31      	ldr	r3, [pc, #196]	; (8004ba0 <xPortStartScheduler+0x130>)
 8004adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ade:	4b31      	ldr	r3, [pc, #196]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004ae0:	2207      	movs	r2, #7
 8004ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ae4:	e009      	b.n	8004afa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ae6:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	4a2d      	ldr	r2, [pc, #180]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	d0ef      	beq.n	8004ae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b06:	4b27      	ldr	r3, [pc, #156]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f1c3 0307 	rsb	r3, r3, #7
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d00a      	beq.n	8004b28 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	60bb      	str	r3, [r7, #8]
}
 8004b24:	bf00      	nop
 8004b26:	e7fe      	b.n	8004b26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b28:	4b1e      	ldr	r3, [pc, #120]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004b30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b32:	4b1c      	ldr	r3, [pc, #112]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004b3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b46:	4b18      	ldr	r3, [pc, #96]	; (8004ba8 <xPortStartScheduler+0x138>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <xPortStartScheduler+0x138>)
 8004b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b52:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <xPortStartScheduler+0x138>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a14      	ldr	r2, [pc, #80]	; (8004ba8 <xPortStartScheduler+0x138>)
 8004b58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b5e:	f000 f8dd 	bl	8004d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b62:	4b12      	ldr	r3, [pc, #72]	; (8004bac <xPortStartScheduler+0x13c>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b68:	f000 f8fc 	bl	8004d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b6c:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <xPortStartScheduler+0x140>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a0f      	ldr	r2, [pc, #60]	; (8004bb0 <xPortStartScheduler+0x140>)
 8004b72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b78:	f7ff ff66 	bl	8004a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b7c:	f7ff fd4e 	bl	800461c <vTaskSwitchContext>
	prvTaskExitError();
 8004b80:	f7ff ff22 	bl	80049c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	e000ed00 	.word	0xe000ed00
 8004b94:	410fc271 	.word	0x410fc271
 8004b98:	410fc270 	.word	0x410fc270
 8004b9c:	e000e400 	.word	0xe000e400
 8004ba0:	200014c0 	.word	0x200014c0
 8004ba4:	200014c4 	.word	0x200014c4
 8004ba8:	e000ed20 	.word	0xe000ed20
 8004bac:	20000c30 	.word	0x20000c30
 8004bb0:	e000ef34 	.word	0xe000ef34

08004bb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	607b      	str	r3, [r7, #4]
}
 8004bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bce:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <vPortEnterCritical+0x58>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	4a0d      	ldr	r2, [pc, #52]	; (8004c0c <vPortEnterCritical+0x58>)
 8004bd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <vPortEnterCritical+0x58>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d10f      	bne.n	8004c00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <vPortEnterCritical+0x5c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <vPortEnterCritical+0x4c>
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	603b      	str	r3, [r7, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	e7fe      	b.n	8004bfe <vPortEnterCritical+0x4a>
	}
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	20000c30 	.word	0x20000c30
 8004c10:	e000ed04 	.word	0xe000ed04

08004c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c1a:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <vPortExitCritical+0x50>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <vPortExitCritical+0x24>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	607b      	str	r3, [r7, #4]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <vPortExitCritical+0x50>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <vPortExitCritical+0x50>)
 8004c40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c42:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <vPortExitCritical+0x50>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d105      	bne.n	8004c56 <vPortExitCritical+0x42>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000c30 	.word	0x20000c30
	...

08004c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c70:	f3ef 8009 	mrs	r0, PSP
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <pxCurrentTCBConst>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	f01e 0f10 	tst.w	lr, #16
 8004c80:	bf08      	it	eq
 8004c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8a:	6010      	str	r0, [r2, #0]
 8004c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c94:	f380 8811 	msr	BASEPRI, r0
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f7ff fcbc 	bl	800461c <vTaskSwitchContext>
 8004ca4:	f04f 0000 	mov.w	r0, #0
 8004ca8:	f380 8811 	msr	BASEPRI, r0
 8004cac:	bc09      	pop	{r0, r3}
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	6808      	ldr	r0, [r1, #0]
 8004cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb6:	f01e 0f10 	tst.w	lr, #16
 8004cba:	bf08      	it	eq
 8004cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cc0:	f380 8809 	msr	PSP, r0
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	f3af 8000 	nop.w

08004cd0 <pxCurrentTCBConst>:
 8004cd0:	20001394 	.word	0x20001394
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop

08004cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	607b      	str	r3, [r7, #4]
}
 8004cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004cf2:	f7ff fbdb 	bl	80044ac <xTaskIncrementTick>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <SysTick_Handler+0x40>)
 8004cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	2300      	movs	r3, #0
 8004d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f383 8811 	msr	BASEPRI, r3
}
 8004d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	e000ed04 	.word	0xe000ed04

08004d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <vPortSetupTimerInterrupt+0x34>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <vPortSetupTimerInterrupt+0x38>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <vPortSetupTimerInterrupt+0x3c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0a      	ldr	r2, [pc, #40]	; (8004d5c <vPortSetupTimerInterrupt+0x40>)
 8004d32:	fba2 2303 	umull	r2, r3, r2, r3
 8004d36:	099b      	lsrs	r3, r3, #6
 8004d38:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <vPortSetupTimerInterrupt+0x44>)
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d3e:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <vPortSetupTimerInterrupt+0x34>)
 8004d40:	2207      	movs	r2, #7
 8004d42:	601a      	str	r2, [r3, #0]
}
 8004d44:	bf00      	nop
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	e000e010 	.word	0xe000e010
 8004d54:	e000e018 	.word	0xe000e018
 8004d58:	20000c24 	.word	0x20000c24
 8004d5c:	10624dd3 	.word	0x10624dd3
 8004d60:	e000e014 	.word	0xe000e014

08004d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d74 <vPortEnableVFP+0x10>
 8004d68:	6801      	ldr	r1, [r0, #0]
 8004d6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d6e:	6001      	str	r1, [r0, #0]
 8004d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d72:	bf00      	nop
 8004d74:	e000ed88 	.word	0xe000ed88

08004d78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	; 0x28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d84:	f7ff fae8 	bl	8004358 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d88:	4b5b      	ldr	r3, [pc, #364]	; (8004ef8 <pvPortMalloc+0x180>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d90:	f000 f920 	bl	8004fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d94:	4b59      	ldr	r3, [pc, #356]	; (8004efc <pvPortMalloc+0x184>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f040 8093 	bne.w	8004ec8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01d      	beq.n	8004de4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004da8:	2208      	movs	r2, #8
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4413      	add	r3, r2
 8004dae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d014      	beq.n	8004de4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f023 0307 	bic.w	r3, r3, #7
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <pvPortMalloc+0x6c>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	617b      	str	r3, [r7, #20]
}
 8004de0:	bf00      	nop
 8004de2:	e7fe      	b.n	8004de2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d06e      	beq.n	8004ec8 <pvPortMalloc+0x150>
 8004dea:	4b45      	ldr	r3, [pc, #276]	; (8004f00 <pvPortMalloc+0x188>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d869      	bhi.n	8004ec8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004df4:	4b43      	ldr	r3, [pc, #268]	; (8004f04 <pvPortMalloc+0x18c>)
 8004df6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004df8:	4b42      	ldr	r3, [pc, #264]	; (8004f04 <pvPortMalloc+0x18c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dfe:	e004      	b.n	8004e0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d903      	bls.n	8004e1c <pvPortMalloc+0xa4>
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1f1      	bne.n	8004e00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e1c:	4b36      	ldr	r3, [pc, #216]	; (8004ef8 <pvPortMalloc+0x180>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d050      	beq.n	8004ec8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2208      	movs	r2, #8
 8004e2c:	4413      	add	r3, r2
 8004e2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	1ad2      	subs	r2, r2, r3
 8004e40:	2308      	movs	r3, #8
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d91f      	bls.n	8004e88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <pvPortMalloc+0xf8>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	613b      	str	r3, [r7, #16]
}
 8004e6c:	bf00      	nop
 8004e6e:	e7fe      	b.n	8004e6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	1ad2      	subs	r2, r2, r3
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e82:	69b8      	ldr	r0, [r7, #24]
 8004e84:	f000 f908 	bl	8005098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e88:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <pvPortMalloc+0x188>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	4a1b      	ldr	r2, [pc, #108]	; (8004f00 <pvPortMalloc+0x188>)
 8004e94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e96:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <pvPortMalloc+0x188>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <pvPortMalloc+0x190>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d203      	bcs.n	8004eaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ea2:	4b17      	ldr	r3, [pc, #92]	; (8004f00 <pvPortMalloc+0x188>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a18      	ldr	r2, [pc, #96]	; (8004f08 <pvPortMalloc+0x190>)
 8004ea8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	4b13      	ldr	r3, [pc, #76]	; (8004efc <pvPortMalloc+0x184>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004ebe:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <pvPortMalloc+0x194>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	4a11      	ldr	r2, [pc, #68]	; (8004f0c <pvPortMalloc+0x194>)
 8004ec6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ec8:	f7ff fa54 	bl	8004374 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <pvPortMalloc+0x174>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	60fb      	str	r3, [r7, #12]
}
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <pvPortMalloc+0x172>
	return pvReturn;
 8004eec:	69fb      	ldr	r3, [r7, #28]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3728      	adds	r7, #40	; 0x28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	200050d0 	.word	0x200050d0
 8004efc:	200050e4 	.word	0x200050e4
 8004f00:	200050d4 	.word	0x200050d4
 8004f04:	200050c8 	.word	0x200050c8
 8004f08:	200050d8 	.word	0x200050d8
 8004f0c:	200050dc 	.word	0x200050dc

08004f10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d04d      	beq.n	8004fbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f22:	2308      	movs	r3, #8
 8004f24:	425b      	negs	r3, r3
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4413      	add	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <vPortFree+0xb8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <vPortFree+0x44>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	60fb      	str	r3, [r7, #12]
}
 8004f50:	bf00      	nop
 8004f52:	e7fe      	b.n	8004f52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <vPortFree+0x62>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	60bb      	str	r3, [r7, #8]
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <vPortFree+0xb8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01e      	beq.n	8004fbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d11a      	bne.n	8004fbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <vPortFree+0xb8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	401a      	ands	r2, r3
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f98:	f7ff f9de 	bl	8004358 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <vPortFree+0xbc>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	4a09      	ldr	r2, [pc, #36]	; (8004fcc <vPortFree+0xbc>)
 8004fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004faa:	6938      	ldr	r0, [r7, #16]
 8004fac:	f000 f874 	bl	8005098 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004fb0:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <vPortFree+0xc0>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	4a06      	ldr	r2, [pc, #24]	; (8004fd0 <vPortFree+0xc0>)
 8004fb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004fba:	f7ff f9db 	bl	8004374 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fbe:	bf00      	nop
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	200050e4 	.word	0x200050e4
 8004fcc:	200050d4 	.word	0x200050d4
 8004fd0:	200050e0 	.word	0x200050e0

08004fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fe0:	4b27      	ldr	r3, [pc, #156]	; (8005080 <prvHeapInit+0xac>)
 8004fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00c      	beq.n	8005008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3307      	adds	r3, #7
 8004ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0307 	bic.w	r3, r3, #7
 8004ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	4a1f      	ldr	r2, [pc, #124]	; (8005080 <prvHeapInit+0xac>)
 8005004:	4413      	add	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800500c:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <prvHeapInit+0xb0>)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005012:	4b1c      	ldr	r3, [pc, #112]	; (8005084 <prvHeapInit+0xb0>)
 8005014:	2200      	movs	r2, #0
 8005016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	4413      	add	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005020:	2208      	movs	r2, #8
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1a9b      	subs	r3, r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0307 	bic.w	r3, r3, #7
 800502e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4a15      	ldr	r2, [pc, #84]	; (8005088 <prvHeapInit+0xb4>)
 8005034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005036:	4b14      	ldr	r3, [pc, #80]	; (8005088 <prvHeapInit+0xb4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2200      	movs	r2, #0
 800503c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800503e:	4b12      	ldr	r3, [pc, #72]	; (8005088 <prvHeapInit+0xb4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005054:	4b0c      	ldr	r3, [pc, #48]	; (8005088 <prvHeapInit+0xb4>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	4a0a      	ldr	r2, [pc, #40]	; (800508c <prvHeapInit+0xb8>)
 8005062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4a09      	ldr	r2, [pc, #36]	; (8005090 <prvHeapInit+0xbc>)
 800506a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800506c:	4b09      	ldr	r3, [pc, #36]	; (8005094 <prvHeapInit+0xc0>)
 800506e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005072:	601a      	str	r2, [r3, #0]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	200014c8 	.word	0x200014c8
 8005084:	200050c8 	.word	0x200050c8
 8005088:	200050d0 	.word	0x200050d0
 800508c:	200050d8 	.word	0x200050d8
 8005090:	200050d4 	.word	0x200050d4
 8005094:	200050e4 	.word	0x200050e4

08005098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050a0:	4b28      	ldr	r3, [pc, #160]	; (8005144 <prvInsertBlockIntoFreeList+0xac>)
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	e002      	b.n	80050ac <prvInsertBlockIntoFreeList+0x14>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d8f7      	bhi.n	80050a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	4413      	add	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d108      	bne.n	80050da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	441a      	add	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	441a      	add	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d118      	bne.n	8005120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b15      	ldr	r3, [pc, #84]	; (8005148 <prvInsertBlockIntoFreeList+0xb0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d00d      	beq.n	8005116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	441a      	add	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	e008      	b.n	8005128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005116:	4b0c      	ldr	r3, [pc, #48]	; (8005148 <prvInsertBlockIntoFreeList+0xb0>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e003      	b.n	8005128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	429a      	cmp	r2, r3
 800512e:	d002      	beq.n	8005136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	200050c8 	.word	0x200050c8
 8005148:	200050d0 	.word	0x200050d0

0800514c <__libc_init_array>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	4d0d      	ldr	r5, [pc, #52]	; (8005184 <__libc_init_array+0x38>)
 8005150:	4c0d      	ldr	r4, [pc, #52]	; (8005188 <__libc_init_array+0x3c>)
 8005152:	1b64      	subs	r4, r4, r5
 8005154:	10a4      	asrs	r4, r4, #2
 8005156:	2600      	movs	r6, #0
 8005158:	42a6      	cmp	r6, r4
 800515a:	d109      	bne.n	8005170 <__libc_init_array+0x24>
 800515c:	4d0b      	ldr	r5, [pc, #44]	; (800518c <__libc_init_array+0x40>)
 800515e:	4c0c      	ldr	r4, [pc, #48]	; (8005190 <__libc_init_array+0x44>)
 8005160:	f000 f8e8 	bl	8005334 <_init>
 8005164:	1b64      	subs	r4, r4, r5
 8005166:	10a4      	asrs	r4, r4, #2
 8005168:	2600      	movs	r6, #0
 800516a:	42a6      	cmp	r6, r4
 800516c:	d105      	bne.n	800517a <__libc_init_array+0x2e>
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	f855 3b04 	ldr.w	r3, [r5], #4
 8005174:	4798      	blx	r3
 8005176:	3601      	adds	r6, #1
 8005178:	e7ee      	b.n	8005158 <__libc_init_array+0xc>
 800517a:	f855 3b04 	ldr.w	r3, [r5], #4
 800517e:	4798      	blx	r3
 8005180:	3601      	adds	r6, #1
 8005182:	e7f2      	b.n	800516a <__libc_init_array+0x1e>
 8005184:	08006f08 	.word	0x08006f08
 8005188:	08006f08 	.word	0x08006f08
 800518c:	08006f08 	.word	0x08006f08
 8005190:	08006f0c 	.word	0x08006f0c

08005194 <__retarget_lock_acquire_recursive>:
 8005194:	4770      	bx	lr

08005196 <__retarget_lock_release_recursive>:
 8005196:	4770      	bx	lr

08005198 <memset>:
 8005198:	4402      	add	r2, r0
 800519a:	4603      	mov	r3, r0
 800519c:	4293      	cmp	r3, r2
 800519e:	d100      	bne.n	80051a2 <memset+0xa>
 80051a0:	4770      	bx	lr
 80051a2:	f803 1b01 	strb.w	r1, [r3], #1
 80051a6:	e7f9      	b.n	800519c <memset+0x4>

080051a8 <cleanup_glue>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	460c      	mov	r4, r1
 80051ac:	6809      	ldr	r1, [r1, #0]
 80051ae:	4605      	mov	r5, r0
 80051b0:	b109      	cbz	r1, 80051b6 <cleanup_glue+0xe>
 80051b2:	f7ff fff9 	bl	80051a8 <cleanup_glue>
 80051b6:	4621      	mov	r1, r4
 80051b8:	4628      	mov	r0, r5
 80051ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051be:	f000 b869 	b.w	8005294 <_free_r>
	...

080051c4 <_reclaim_reent>:
 80051c4:	4b2c      	ldr	r3, [pc, #176]	; (8005278 <_reclaim_reent+0xb4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4283      	cmp	r3, r0
 80051ca:	b570      	push	{r4, r5, r6, lr}
 80051cc:	4604      	mov	r4, r0
 80051ce:	d051      	beq.n	8005274 <_reclaim_reent+0xb0>
 80051d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051d2:	b143      	cbz	r3, 80051e6 <_reclaim_reent+0x22>
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d14a      	bne.n	8005270 <_reclaim_reent+0xac>
 80051da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051dc:	6819      	ldr	r1, [r3, #0]
 80051de:	b111      	cbz	r1, 80051e6 <_reclaim_reent+0x22>
 80051e0:	4620      	mov	r0, r4
 80051e2:	f000 f857 	bl	8005294 <_free_r>
 80051e6:	6961      	ldr	r1, [r4, #20]
 80051e8:	b111      	cbz	r1, 80051f0 <_reclaim_reent+0x2c>
 80051ea:	4620      	mov	r0, r4
 80051ec:	f000 f852 	bl	8005294 <_free_r>
 80051f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80051f2:	b111      	cbz	r1, 80051fa <_reclaim_reent+0x36>
 80051f4:	4620      	mov	r0, r4
 80051f6:	f000 f84d 	bl	8005294 <_free_r>
 80051fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80051fc:	b111      	cbz	r1, 8005204 <_reclaim_reent+0x40>
 80051fe:	4620      	mov	r0, r4
 8005200:	f000 f848 	bl	8005294 <_free_r>
 8005204:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005206:	b111      	cbz	r1, 800520e <_reclaim_reent+0x4a>
 8005208:	4620      	mov	r0, r4
 800520a:	f000 f843 	bl	8005294 <_free_r>
 800520e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005210:	b111      	cbz	r1, 8005218 <_reclaim_reent+0x54>
 8005212:	4620      	mov	r0, r4
 8005214:	f000 f83e 	bl	8005294 <_free_r>
 8005218:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800521a:	b111      	cbz	r1, 8005222 <_reclaim_reent+0x5e>
 800521c:	4620      	mov	r0, r4
 800521e:	f000 f839 	bl	8005294 <_free_r>
 8005222:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005224:	b111      	cbz	r1, 800522c <_reclaim_reent+0x68>
 8005226:	4620      	mov	r0, r4
 8005228:	f000 f834 	bl	8005294 <_free_r>
 800522c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800522e:	b111      	cbz	r1, 8005236 <_reclaim_reent+0x72>
 8005230:	4620      	mov	r0, r4
 8005232:	f000 f82f 	bl	8005294 <_free_r>
 8005236:	69a3      	ldr	r3, [r4, #24]
 8005238:	b1e3      	cbz	r3, 8005274 <_reclaim_reent+0xb0>
 800523a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800523c:	4620      	mov	r0, r4
 800523e:	4798      	blx	r3
 8005240:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005242:	b1b9      	cbz	r1, 8005274 <_reclaim_reent+0xb0>
 8005244:	4620      	mov	r0, r4
 8005246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800524a:	f7ff bfad 	b.w	80051a8 <cleanup_glue>
 800524e:	5949      	ldr	r1, [r1, r5]
 8005250:	b941      	cbnz	r1, 8005264 <_reclaim_reent+0xa0>
 8005252:	3504      	adds	r5, #4
 8005254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005256:	2d80      	cmp	r5, #128	; 0x80
 8005258:	68d9      	ldr	r1, [r3, #12]
 800525a:	d1f8      	bne.n	800524e <_reclaim_reent+0x8a>
 800525c:	4620      	mov	r0, r4
 800525e:	f000 f819 	bl	8005294 <_free_r>
 8005262:	e7ba      	b.n	80051da <_reclaim_reent+0x16>
 8005264:	680e      	ldr	r6, [r1, #0]
 8005266:	4620      	mov	r0, r4
 8005268:	f000 f814 	bl	8005294 <_free_r>
 800526c:	4631      	mov	r1, r6
 800526e:	e7ef      	b.n	8005250 <_reclaim_reent+0x8c>
 8005270:	2500      	movs	r5, #0
 8005272:	e7ef      	b.n	8005254 <_reclaim_reent+0x90>
 8005274:	bd70      	pop	{r4, r5, r6, pc}
 8005276:	bf00      	nop
 8005278:	20000c34 	.word	0x20000c34

0800527c <__malloc_lock>:
 800527c:	4801      	ldr	r0, [pc, #4]	; (8005284 <__malloc_lock+0x8>)
 800527e:	f7ff bf89 	b.w	8005194 <__retarget_lock_acquire_recursive>
 8005282:	bf00      	nop
 8005284:	2000519c 	.word	0x2000519c

08005288 <__malloc_unlock>:
 8005288:	4801      	ldr	r0, [pc, #4]	; (8005290 <__malloc_unlock+0x8>)
 800528a:	f7ff bf84 	b.w	8005196 <__retarget_lock_release_recursive>
 800528e:	bf00      	nop
 8005290:	2000519c 	.word	0x2000519c

08005294 <_free_r>:
 8005294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005296:	2900      	cmp	r1, #0
 8005298:	d048      	beq.n	800532c <_free_r+0x98>
 800529a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800529e:	9001      	str	r0, [sp, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f1a1 0404 	sub.w	r4, r1, #4
 80052a6:	bfb8      	it	lt
 80052a8:	18e4      	addlt	r4, r4, r3
 80052aa:	f7ff ffe7 	bl	800527c <__malloc_lock>
 80052ae:	4a20      	ldr	r2, [pc, #128]	; (8005330 <_free_r+0x9c>)
 80052b0:	9801      	ldr	r0, [sp, #4]
 80052b2:	6813      	ldr	r3, [r2, #0]
 80052b4:	4615      	mov	r5, r2
 80052b6:	b933      	cbnz	r3, 80052c6 <_free_r+0x32>
 80052b8:	6063      	str	r3, [r4, #4]
 80052ba:	6014      	str	r4, [r2, #0]
 80052bc:	b003      	add	sp, #12
 80052be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052c2:	f7ff bfe1 	b.w	8005288 <__malloc_unlock>
 80052c6:	42a3      	cmp	r3, r4
 80052c8:	d90b      	bls.n	80052e2 <_free_r+0x4e>
 80052ca:	6821      	ldr	r1, [r4, #0]
 80052cc:	1862      	adds	r2, r4, r1
 80052ce:	4293      	cmp	r3, r2
 80052d0:	bf04      	itt	eq
 80052d2:	681a      	ldreq	r2, [r3, #0]
 80052d4:	685b      	ldreq	r3, [r3, #4]
 80052d6:	6063      	str	r3, [r4, #4]
 80052d8:	bf04      	itt	eq
 80052da:	1852      	addeq	r2, r2, r1
 80052dc:	6022      	streq	r2, [r4, #0]
 80052de:	602c      	str	r4, [r5, #0]
 80052e0:	e7ec      	b.n	80052bc <_free_r+0x28>
 80052e2:	461a      	mov	r2, r3
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	b10b      	cbz	r3, 80052ec <_free_r+0x58>
 80052e8:	42a3      	cmp	r3, r4
 80052ea:	d9fa      	bls.n	80052e2 <_free_r+0x4e>
 80052ec:	6811      	ldr	r1, [r2, #0]
 80052ee:	1855      	adds	r5, r2, r1
 80052f0:	42a5      	cmp	r5, r4
 80052f2:	d10b      	bne.n	800530c <_free_r+0x78>
 80052f4:	6824      	ldr	r4, [r4, #0]
 80052f6:	4421      	add	r1, r4
 80052f8:	1854      	adds	r4, r2, r1
 80052fa:	42a3      	cmp	r3, r4
 80052fc:	6011      	str	r1, [r2, #0]
 80052fe:	d1dd      	bne.n	80052bc <_free_r+0x28>
 8005300:	681c      	ldr	r4, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	6053      	str	r3, [r2, #4]
 8005306:	4421      	add	r1, r4
 8005308:	6011      	str	r1, [r2, #0]
 800530a:	e7d7      	b.n	80052bc <_free_r+0x28>
 800530c:	d902      	bls.n	8005314 <_free_r+0x80>
 800530e:	230c      	movs	r3, #12
 8005310:	6003      	str	r3, [r0, #0]
 8005312:	e7d3      	b.n	80052bc <_free_r+0x28>
 8005314:	6825      	ldr	r5, [r4, #0]
 8005316:	1961      	adds	r1, r4, r5
 8005318:	428b      	cmp	r3, r1
 800531a:	bf04      	itt	eq
 800531c:	6819      	ldreq	r1, [r3, #0]
 800531e:	685b      	ldreq	r3, [r3, #4]
 8005320:	6063      	str	r3, [r4, #4]
 8005322:	bf04      	itt	eq
 8005324:	1949      	addeq	r1, r1, r5
 8005326:	6021      	streq	r1, [r4, #0]
 8005328:	6054      	str	r4, [r2, #4]
 800532a:	e7c7      	b.n	80052bc <_free_r+0x28>
 800532c:	b003      	add	sp, #12
 800532e:	bd30      	pop	{r4, r5, pc}
 8005330:	200050e8 	.word	0x200050e8

08005334 <_init>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	bf00      	nop
 8005338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533a:	bc08      	pop	{r3}
 800533c:	469e      	mov	lr, r3
 800533e:	4770      	bx	lr

08005340 <_fini>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	bf00      	nop
 8005344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005346:	bc08      	pop	{r3}
 8005348:	469e      	mov	lr, r3
 800534a:	4770      	bx	lr
