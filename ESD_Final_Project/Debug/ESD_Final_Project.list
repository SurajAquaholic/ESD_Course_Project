
ESD_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001948  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001ae0  08001ae0  00011ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001af0  08001af0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001af0  08001af0  00011af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001af8  08001af8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001af8  08001af8  00011af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001afc  08001afc  00011afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000000c  08001b0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08001b0c  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000047ad  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010bd  00000000  00000000  000247e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  000258a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c8  00000000  00000000  00025d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001481d  00000000  00000000  000260e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005810  00000000  00000000  0003a8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f25d  00000000  00000000  0004010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bf36a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f58  00000000  00000000  000bf3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001ac8 	.word	0x08001ac8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001ac8 	.word	0x08001ac8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	db0b      	blt.n	8000506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f003 021f 	and.w	r2, r3, #31
 80004f4:	4907      	ldr	r1, [pc, #28]	; (8000514 <__NVIC_EnableIRQ+0x38>)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	095b      	lsrs	r3, r3, #5
 80004fc:	2001      	movs	r0, #1
 80004fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000e100 	.word	0xe000e100

08000518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	6039      	str	r1, [r7, #0]
 8000522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	db0a      	blt.n	8000542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	b2da      	uxtb	r2, r3
 8000530:	490c      	ldr	r1, [pc, #48]	; (8000564 <__NVIC_SetPriority+0x4c>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	0112      	lsls	r2, r2, #4
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	440b      	add	r3, r1
 800053c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000540:	e00a      	b.n	8000558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4908      	ldr	r1, [pc, #32]	; (8000568 <__NVIC_SetPriority+0x50>)
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	f003 030f 	and.w	r3, r3, #15
 800054e:	3b04      	subs	r3, #4
 8000550:	0112      	lsls	r2, r2, #4
 8000552:	b2d2      	uxtb	r2, r2
 8000554:	440b      	add	r3, r1
 8000556:	761a      	strb	r2, [r3, #24]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	e000e100 	.word	0xe000e100
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <adc_init>:
  21000, 22000, 23000, 24000, 25000, 26000, 27000, 28000, 29000
};


void adc_init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= MASK(ENABLE_, GPIOA_CLOCK); // Enable clock source for PORT A
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <adc_init+0x80>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000574:	4a1d      	ldr	r2, [pc, #116]	; (80005ec <adc_init+0x80>)
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= MASK(ANALOG_MODE, PA0); // PA0 pin is Analog Mode
 800057c:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <adc_init+0x84>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <adc_init+0x84>)
 8000582:	f043 0303 	orr.w	r3, r3, #3
 8000586:	6013      	str	r3, [r2, #0]
	RCC->APB2ENR |= MASK(ENABLE_, ADC_CLOCK);  // Enable clock source for ADC1
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <adc_init+0x80>)
 800058a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800058c:	4a17      	ldr	r2, [pc, #92]	; (80005ec <adc_init+0x80>)
 800058e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000592:	6453      	str	r3, [r2, #68]	; 0x44
	ADC1->CR1 |= MASK(ENABLE_, ADC_RESOLUTION);  //  set ADC resolution to 10bit i.e. max is 1023
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <adc_init+0x88>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	4a16      	ldr	r2, [pc, #88]	; (80005f4 <adc_init+0x88>)
 800059a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800059e:	6053      	str	r3, [r2, #4]
	ADC1->CR2 &= ~ MASK(ENABLE_, ADC_ENABLE);  //  ADC disable
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <adc_init+0x88>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <adc_init+0x88>)
 80005a6:	f023 0301 	bic.w	r3, r3, #1
 80005aa:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= 0; // Enable ADC 0th Channel
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <adc_init+0x88>)
 80005ae:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <adc_init+0x88>)
 80005b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b2:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->CR1 |= MASK(ENABLE_, INTERRUPT_EOC); //end of conversion interrupt
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <adc_init+0x88>)
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <adc_init+0x88>)
 80005ba:	f043 0320 	orr.w	r3, r3, #32
 80005be:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |=  MASK(ENABLE_, ADC_ENABLE);  // ADC ON
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <adc_init+0x88>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <adc_init+0x88>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6093      	str	r3, [r2, #8]
	NVIC_EnableIRQ(ADC_IRQn);
 80005cc:	2012      	movs	r0, #18
 80005ce:	f7ff ff85 	bl	80004dc <__NVIC_EnableIRQ>
	NVIC_SetPriority(ADC_IRQn,2);
 80005d2:	2102      	movs	r1, #2
 80005d4:	2012      	movs	r0, #18
 80005d6:	f7ff ff9f 	bl	8000518 <__NVIC_SetPriority>
	ADC1->CR2 |= MASK(ENABLE_, START_CONVERSION);  // Start  ADC conversion
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <adc_init+0x88>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <adc_init+0x88>)
 80005e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80005e4:	6093      	str	r3, [r2, #8]
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020000 	.word	0x40020000
 80005f4:	40012000 	.word	0x40012000

080005f8 <ADC_IRQHandler>:


void ADC_IRQHandler()
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
	//store the DR register contents in a variable,
	//no need to clear the EOC as its cleared when you read the DR register
	if(ADC1->SR & MASK(ENABLE_, EOC))
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <ADC_IRQHandler+0x38>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 0302 	and.w	r3, r3, #2
 8000604:	2b00      	cmp	r3, #0
 8000606:	d008      	beq.n	800061a <ADC_IRQHandler+0x22>
	{
		adc_value = ADC1->DR;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <ADC_IRQHandler+0x38>)
 800060a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060c:	ee07 3a90 	vmov	s15, r3
 8000610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <ADC_IRQHandler+0x3c>)
 8000616:	edc3 7a00 	vstr	s15, [r3]
	}
	ADC1->CR2 |= MASK(ENABLE_, START_CONVERSION); //Start the next conversion
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <ADC_IRQHandler+0x38>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	4a04      	ldr	r2, [pc, #16]	; (8000630 <ADC_IRQHandler+0x38>)
 8000620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000624:	6093      	str	r3, [r2, #8]
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40012000 	.word	0x40012000
 8000634:	20000028 	.word	0x20000028

08000638 <calculate_temperature>:

void calculate_temperature()
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
	float analog_voltage = 0;
 800063e:	f04f 0300 	mov.w	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
	int ntc_resistance = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	603b      	str	r3, [r7, #0]
	analog_voltage = (3*adc_value)/1023; //gets the analog voltage corresponding to adc output value
 8000648:	4b9a      	ldr	r3, [pc, #616]	; (80008b4 <calculate_temperature+0x27c>)
 800064a:	edd3 7a00 	vldr	s15, [r3]
 800064e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000652:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000656:	eddf 6a98 	vldr	s13, [pc, #608]	; 80008b8 <calculate_temperature+0x280>
 800065a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800065e:	edc7 7a01 	vstr	s15, [r7, #4]
	ntc_resistance = ((-analog_voltage*10000)/(analog_voltage-3)); //3 is vcc, 10k is nominal resistance
 8000662:	edd7 7a01 	vldr	s15, [r7, #4]
 8000666:	eef1 7a67 	vneg.f32	s15, s15
 800066a:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80008bc <calculate_temperature+0x284>
 800066e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000672:	edd7 7a01 	vldr	s15, [r7, #4]
 8000676:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800067a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800067e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000686:	ee17 3a90 	vmov	r3, s15
 800068a:	603b      	str	r3, [r7, #0]
	if(ntc_resistance == lookupTable[28])
 800068c:	f247 1248 	movw	r2, #29000	; 0x7148
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	4293      	cmp	r3, r2
 8000694:	d103      	bne.n	800069e <calculate_temperature+0x66>
	{
		temperature = 2;
 8000696:	4b8a      	ldr	r3, [pc, #552]	; (80008c0 <calculate_temperature+0x288>)
 8000698:	2202      	movs	r2, #2
 800069a:	601a      	str	r2, [r3, #0]
	}
	else if(ntc_resistance < lookupTable[1] && ntc_resistance >= lookupTable[0])
	{
		temperature = 95;
	}
}
 800069c:	e190      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[28] && ntc_resistance >= lookupTable[27])
 800069e:	f247 1248 	movw	r2, #29000	; 0x7148
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	4293      	cmp	r3, r2
 80006a6:	da08      	bge.n	80006ba <calculate_temperature+0x82>
 80006a8:	f646 5260 	movw	r2, #28000	; 0x6d60
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	4293      	cmp	r3, r2
 80006b0:	db03      	blt.n	80006ba <calculate_temperature+0x82>
		temperature = 3;
 80006b2:	4b83      	ldr	r3, [pc, #524]	; (80008c0 <calculate_temperature+0x288>)
 80006b4:	2203      	movs	r2, #3
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	e182      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[27] && ntc_resistance >= lookupTable[26])
 80006ba:	f646 5260 	movw	r2, #28000	; 0x6d60
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	4293      	cmp	r3, r2
 80006c2:	da08      	bge.n	80006d6 <calculate_temperature+0x9e>
 80006c4:	f646 1278 	movw	r2, #27000	; 0x6978
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	4293      	cmp	r3, r2
 80006cc:	db03      	blt.n	80006d6 <calculate_temperature+0x9e>
		temperature = 4;
 80006ce:	4b7c      	ldr	r3, [pc, #496]	; (80008c0 <calculate_temperature+0x288>)
 80006d0:	2204      	movs	r2, #4
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	e174      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[26] && ntc_resistance >= lookupTable[25])
 80006d6:	f646 1278 	movw	r2, #27000	; 0x6978
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	4293      	cmp	r3, r2
 80006de:	da08      	bge.n	80006f2 <calculate_temperature+0xba>
 80006e0:	f246 5290 	movw	r2, #26000	; 0x6590
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	4293      	cmp	r3, r2
 80006e8:	db03      	blt.n	80006f2 <calculate_temperature+0xba>
		temperature = 5;
 80006ea:	4b75      	ldr	r3, [pc, #468]	; (80008c0 <calculate_temperature+0x288>)
 80006ec:	2205      	movs	r2, #5
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	e166      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[25] && ntc_resistance >= lookupTable[24])
 80006f2:	f246 5290 	movw	r2, #26000	; 0x6590
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	4293      	cmp	r3, r2
 80006fa:	da08      	bge.n	800070e <calculate_temperature+0xd6>
 80006fc:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	4293      	cmp	r3, r2
 8000704:	db03      	blt.n	800070e <calculate_temperature+0xd6>
		temperature = 6;
 8000706:	4b6e      	ldr	r3, [pc, #440]	; (80008c0 <calculate_temperature+0x288>)
 8000708:	2206      	movs	r2, #6
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	e158      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[24] && ntc_resistance >= lookupTable[23])
 800070e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	4293      	cmp	r3, r2
 8000716:	da08      	bge.n	800072a <calculate_temperature+0xf2>
 8000718:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	4293      	cmp	r3, r2
 8000720:	db03      	blt.n	800072a <calculate_temperature+0xf2>
		temperature = 7;
 8000722:	4b67      	ldr	r3, [pc, #412]	; (80008c0 <calculate_temperature+0x288>)
 8000724:	2207      	movs	r2, #7
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	e14a      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[23] && ntc_resistance >= lookupTable[22])
 800072a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	4293      	cmp	r3, r2
 8000732:	da08      	bge.n	8000746 <calculate_temperature+0x10e>
 8000734:	f645 12d8 	movw	r2, #23000	; 0x59d8
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	4293      	cmp	r3, r2
 800073c:	db03      	blt.n	8000746 <calculate_temperature+0x10e>
		temperature = 8;
 800073e:	4b60      	ldr	r3, [pc, #384]	; (80008c0 <calculate_temperature+0x288>)
 8000740:	2208      	movs	r2, #8
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	e13c      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[22] && ntc_resistance >= lookupTable[21])
 8000746:	f645 12d8 	movw	r2, #23000	; 0x59d8
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	4293      	cmp	r3, r2
 800074e:	da08      	bge.n	8000762 <calculate_temperature+0x12a>
 8000750:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	4293      	cmp	r3, r2
 8000758:	db03      	blt.n	8000762 <calculate_temperature+0x12a>
		temperature = 9;
 800075a:	4b59      	ldr	r3, [pc, #356]	; (80008c0 <calculate_temperature+0x288>)
 800075c:	2209      	movs	r2, #9
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	e12e      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[21] && ntc_resistance >= lookupTable[20])
 8000762:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	4293      	cmp	r3, r2
 800076a:	da08      	bge.n	800077e <calculate_temperature+0x146>
 800076c:	f245 2208 	movw	r2, #21000	; 0x5208
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	4293      	cmp	r3, r2
 8000774:	db03      	blt.n	800077e <calculate_temperature+0x146>
		temperature = 10;
 8000776:	4b52      	ldr	r3, [pc, #328]	; (80008c0 <calculate_temperature+0x288>)
 8000778:	220a      	movs	r2, #10
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	e120      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[20] && ntc_resistance >= lookupTable[19])
 800077e:	f245 2208 	movw	r2, #21000	; 0x5208
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	4293      	cmp	r3, r2
 8000786:	da08      	bge.n	800079a <calculate_temperature+0x162>
 8000788:	f644 6220 	movw	r2, #20000	; 0x4e20
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	4293      	cmp	r3, r2
 8000790:	db03      	blt.n	800079a <calculate_temperature+0x162>
		temperature = 11;
 8000792:	4b4b      	ldr	r3, [pc, #300]	; (80008c0 <calculate_temperature+0x288>)
 8000794:	220b      	movs	r2, #11
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	e112      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[19] && ntc_resistance >= lookupTable[18])
 800079a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	4293      	cmp	r3, r2
 80007a2:	da08      	bge.n	80007b6 <calculate_temperature+0x17e>
 80007a4:	f644 2238 	movw	r2, #19000	; 0x4a38
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	4293      	cmp	r3, r2
 80007ac:	db03      	blt.n	80007b6 <calculate_temperature+0x17e>
		temperature = 12;
 80007ae:	4b44      	ldr	r3, [pc, #272]	; (80008c0 <calculate_temperature+0x288>)
 80007b0:	220c      	movs	r2, #12
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	e104      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[18] && ntc_resistance >= lookupTable[17])
 80007b6:	f644 2238 	movw	r2, #19000	; 0x4a38
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	4293      	cmp	r3, r2
 80007be:	da08      	bge.n	80007d2 <calculate_temperature+0x19a>
 80007c0:	f244 6250 	movw	r2, #18000	; 0x4650
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	4293      	cmp	r3, r2
 80007c8:	db03      	blt.n	80007d2 <calculate_temperature+0x19a>
		temperature = 13;
 80007ca:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <calculate_temperature+0x288>)
 80007cc:	220d      	movs	r2, #13
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	e0f6      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[17] && ntc_resistance >= lookupTable[16])
 80007d2:	f244 6250 	movw	r2, #18000	; 0x4650
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	4293      	cmp	r3, r2
 80007da:	da08      	bge.n	80007ee <calculate_temperature+0x1b6>
 80007dc:	f244 2268 	movw	r2, #17000	; 0x4268
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	4293      	cmp	r3, r2
 80007e4:	db03      	blt.n	80007ee <calculate_temperature+0x1b6>
		temperature = 14;
 80007e6:	4b36      	ldr	r3, [pc, #216]	; (80008c0 <calculate_temperature+0x288>)
 80007e8:	220e      	movs	r2, #14
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	e0e8      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[16] && ntc_resistance >= lookupTable[15])
 80007ee:	f244 2268 	movw	r2, #17000	; 0x4268
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	4293      	cmp	r3, r2
 80007f6:	da08      	bge.n	800080a <calculate_temperature+0x1d2>
 80007f8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	4293      	cmp	r3, r2
 8000800:	db03      	blt.n	800080a <calculate_temperature+0x1d2>
		temperature = 15;
 8000802:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <calculate_temperature+0x288>)
 8000804:	220f      	movs	r2, #15
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	e0da      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[15] && ntc_resistance >= lookupTable[14])
 800080a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	4293      	cmp	r3, r2
 8000812:	da08      	bge.n	8000826 <calculate_temperature+0x1ee>
 8000814:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	4293      	cmp	r3, r2
 800081c:	db03      	blt.n	8000826 <calculate_temperature+0x1ee>
		temperature = 17;
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <calculate_temperature+0x288>)
 8000820:	2211      	movs	r2, #17
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	e0cc      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[14] && ntc_resistance >= lookupTable[13])
 8000826:	f643 2298 	movw	r2, #15000	; 0x3a98
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	4293      	cmp	r3, r2
 800082e:	da08      	bge.n	8000842 <calculate_temperature+0x20a>
 8000830:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	4293      	cmp	r3, r2
 8000838:	db03      	blt.n	8000842 <calculate_temperature+0x20a>
		temperature = 19;
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <calculate_temperature+0x288>)
 800083c:	2213      	movs	r2, #19
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	e0be      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[13] && ntc_resistance >= lookupTable[12])
 8000842:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	4293      	cmp	r3, r2
 800084a:	da08      	bge.n	800085e <calculate_temperature+0x226>
 800084c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	4293      	cmp	r3, r2
 8000854:	db03      	blt.n	800085e <calculate_temperature+0x226>
		temperature = 20;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <calculate_temperature+0x288>)
 8000858:	2214      	movs	r2, #20
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	e0b0      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[12] && ntc_resistance >= lookupTable[11])
 800085e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	4293      	cmp	r3, r2
 8000866:	da08      	bge.n	800087a <calculate_temperature+0x242>
 8000868:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	4293      	cmp	r3, r2
 8000870:	db03      	blt.n	800087a <calculate_temperature+0x242>
		temperature = 22;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <calculate_temperature+0x288>)
 8000874:	2216      	movs	r2, #22
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	e0a2      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[11] && ntc_resistance >= lookupTable[10])
 800087a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	4293      	cmp	r3, r2
 8000882:	da08      	bge.n	8000896 <calculate_temperature+0x25e>
 8000884:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	4293      	cmp	r3, r2
 800088c:	db03      	blt.n	8000896 <calculate_temperature+0x25e>
		temperature = 23;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <calculate_temperature+0x288>)
 8000890:	2217      	movs	r2, #23
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	e094      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[10] && ntc_resistance >= lookupTable[9])
 8000896:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	4293      	cmp	r3, r2
 800089e:	da11      	bge.n	80008c4 <calculate_temperature+0x28c>
 80008a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	4293      	cmp	r3, r2
 80008a8:	db0c      	blt.n	80008c4 <calculate_temperature+0x28c>
		temperature = 25;
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <calculate_temperature+0x288>)
 80008ac:	2219      	movs	r2, #25
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	e086      	b.n	80009c0 <calculate_temperature+0x388>
 80008b2:	bf00      	nop
 80008b4:	20000028 	.word	0x20000028
 80008b8:	447fc000 	.word	0x447fc000
 80008bc:	461c4000 	.word	0x461c4000
 80008c0:	2000002c 	.word	0x2000002c
	else if(ntc_resistance < lookupTable[9] && ntc_resistance >= lookupTable[8])
 80008c4:	f242 7210 	movw	r2, #10000	; 0x2710
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	4293      	cmp	r3, r2
 80008cc:	da08      	bge.n	80008e0 <calculate_temperature+0x2a8>
 80008ce:	f242 3228 	movw	r2, #9000	; 0x2328
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	4293      	cmp	r3, r2
 80008d6:	db03      	blt.n	80008e0 <calculate_temperature+0x2a8>
		temperature = 28;
 80008d8:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <calculate_temperature+0x394>)
 80008da:	221c      	movs	r2, #28
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	e06f      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[8] && ntc_resistance >= lookupTable[7])
 80008e0:	f242 3228 	movw	r2, #9000	; 0x2328
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	4293      	cmp	r3, r2
 80008e8:	da08      	bge.n	80008fc <calculate_temperature+0x2c4>
 80008ea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	4293      	cmp	r3, r2
 80008f2:	db03      	blt.n	80008fc <calculate_temperature+0x2c4>
		temperature = 33;
 80008f4:	4b35      	ldr	r3, [pc, #212]	; (80009cc <calculate_temperature+0x394>)
 80008f6:	2221      	movs	r2, #33	; 0x21
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	e061      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[7] && ntc_resistance >= lookupTable[6])
 80008fc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	4293      	cmp	r3, r2
 8000904:	da08      	bge.n	8000918 <calculate_temperature+0x2e0>
 8000906:	f641 3258 	movw	r2, #7000	; 0x1b58
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	4293      	cmp	r3, r2
 800090e:	db03      	blt.n	8000918 <calculate_temperature+0x2e0>
		temperature = 35;
 8000910:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <calculate_temperature+0x394>)
 8000912:	2223      	movs	r2, #35	; 0x23
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	e053      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[6] && ntc_resistance >= lookupTable[5])
 8000918:	f641 3258 	movw	r2, #7000	; 0x1b58
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	4293      	cmp	r3, r2
 8000920:	da08      	bge.n	8000934 <calculate_temperature+0x2fc>
 8000922:	f241 7270 	movw	r2, #6000	; 0x1770
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	4293      	cmp	r3, r2
 800092a:	db03      	blt.n	8000934 <calculate_temperature+0x2fc>
		temperature = 40;
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <calculate_temperature+0x394>)
 800092e:	2228      	movs	r2, #40	; 0x28
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	e045      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[5] && ntc_resistance >= lookupTable[4])
 8000934:	f241 7270 	movw	r2, #6000	; 0x1770
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	4293      	cmp	r3, r2
 800093c:	da08      	bge.n	8000950 <calculate_temperature+0x318>
 800093e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	4293      	cmp	r3, r2
 8000946:	db03      	blt.n	8000950 <calculate_temperature+0x318>
		temperature = 45;
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <calculate_temperature+0x394>)
 800094a:	222d      	movs	r2, #45	; 0x2d
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	e037      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[4] && ntc_resistance >= lookupTable[3])
 8000950:	f241 3288 	movw	r2, #5000	; 0x1388
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	4293      	cmp	r3, r2
 8000958:	da08      	bge.n	800096c <calculate_temperature+0x334>
 800095a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	4293      	cmp	r3, r2
 8000962:	db03      	blt.n	800096c <calculate_temperature+0x334>
		temperature = 50;
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <calculate_temperature+0x394>)
 8000966:	2232      	movs	r2, #50	; 0x32
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	e029      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[3] && ntc_resistance >= lookupTable[2])
 800096c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	4293      	cmp	r3, r2
 8000974:	da08      	bge.n	8000988 <calculate_temperature+0x350>
 8000976:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	4293      	cmp	r3, r2
 800097e:	db03      	blt.n	8000988 <calculate_temperature+0x350>
		temperature = 55;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <calculate_temperature+0x394>)
 8000982:	2237      	movs	r2, #55	; 0x37
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	e01b      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[2] && ntc_resistance >= lookupTable[1])
 8000988:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	4293      	cmp	r3, r2
 8000990:	da08      	bge.n	80009a4 <calculate_temperature+0x36c>
 8000992:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	4293      	cmp	r3, r2
 800099a:	db03      	blt.n	80009a4 <calculate_temperature+0x36c>
		temperature = 75;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <calculate_temperature+0x394>)
 800099e:	224b      	movs	r2, #75	; 0x4b
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	e00d      	b.n	80009c0 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[1] && ntc_resistance >= lookupTable[0])
 80009a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	4293      	cmp	r3, r2
 80009ac:	da08      	bge.n	80009c0 <calculate_temperature+0x388>
 80009ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	4293      	cmp	r3, r2
 80009b6:	db03      	blt.n	80009c0 <calculate_temperature+0x388>
		temperature = 95;
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <calculate_temperature+0x394>)
 80009ba:	225f      	movs	r2, #95	; 0x5f
 80009bc:	601a      	str	r2, [r3, #0]
}
 80009be:	e7ff      	b.n	80009c0 <calculate_temperature+0x388>
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	2000002c 	.word	0x2000002c

080009d0 <ir_init>:


static bool vehicle_leftside = false;
static bool vehicle_rightside = false;
void ir_init()
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= MASK(ENABLE_, GPIOA_EN); //Enable the Clock for GPIO A
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <ir_init+0x70>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	4a19      	ldr	r2, [pc, #100]	; (8000a40 <ir_init+0x70>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~(MASK(INPUT_MODE, PA7_MODER)); //Set the mode to GPIO Input for PA7
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <ir_init+0x74>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <ir_init+0x74>)
 80009e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ea:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR |= MASK(ENABLE_, PUPD_PA7); //Configure a Pull down resistor to PA7
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <ir_init+0x74>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <ir_init+0x74>)
 80009f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f6:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER &= ~(MASK(INPUT_MODE, PA6_MODER)); //Set the mode to GPIO Input for PA6
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <ir_init+0x74>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <ir_init+0x74>)
 80009fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a02:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR |= MASK(ENABLE_, PUPD_PA6); //Configure a Pull down resistor to PA6
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <ir_init+0x74>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <ir_init+0x74>)
 8000a0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a0e:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER |= MASK(ENABLE_, PA5); //Set output mode to GPIO5 for buzzer
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <ir_init+0x74>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <ir_init+0x74>)
 8000a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a1a:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~MASK(ENABLE_, PA5_SET); //output type register push - pull
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <ir_init+0x74>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <ir_init+0x74>)
 8000a22:	f023 0320 	bic.w	r3, r3, #32
 8000a26:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR |= MASK(ENABLE_, PA5); // pull up for buzzer
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <ir_init+0x74>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <ir_init+0x74>)
 8000a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000

08000a48 <check_ir_sensor>:

void check_ir_sensor()
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
	if(GPIOA->IDR & MASK(ENABLE_, PA7))
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <check_ir_sensor+0x90>)
 8000a4e:	691b      	ldr	r3, [r3, #16]
 8000a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d009      	beq.n	8000a6c <check_ir_sensor+0x24>
	{
		vehicle_leftside = true;
 8000a58:	4b20      	ldr	r3, [pc, #128]	; (8000adc <check_ir_sensor+0x94>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
		GPIOA->BSRR |= MASK(ENABLE_, PA5_SET); //Set the buzzer
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <check_ir_sensor+0x90>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a1d      	ldr	r2, [pc, #116]	; (8000ad8 <check_ir_sensor+0x90>)
 8000a64:	f043 0320 	orr.w	r3, r3, #32
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	e00f      	b.n	8000a8c <check_ir_sensor+0x44>
//		SSD1306_UpdateScreen();

	}
	else
	{
		vehicle_leftside = false;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <check_ir_sensor+0x94>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
		if(!vehicle_rightside)
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <check_ir_sensor+0x98>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	f083 0301 	eor.w	r3, r3, #1
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d005      	beq.n	8000a8c <check_ir_sensor+0x44>
		{
			GPIOA->BSRR |= MASK(ENABLE_, PA5_CLEAR); //Clear the buzzer
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <check_ir_sensor+0x90>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <check_ir_sensor+0x90>)
 8000a86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a8a:	6193      	str	r3, [r2, #24]
		}
//		SSD1306_Clear();
	}
	if(GPIOA->IDR & MASK(ENABLE_, PA6))
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <check_ir_sensor+0x90>)
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d009      	beq.n	8000aac <check_ir_sensor+0x64>
	{
		vehicle_rightside = true;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <check_ir_sensor+0x98>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
		GPIOA->BSRR |= MASK(ENABLE_, PA5_SET); //Set the buzzer
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <check_ir_sensor+0x90>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <check_ir_sensor+0x90>)
 8000aa4:	f043 0320 	orr.w	r3, r3, #32
 8000aa8:	6193      	str	r3, [r2, #24]
//	{
//		SSD1306_Clear();
//		SSD1306_DrawBitmap(0,0,Both_Side_Alert, 128, 64, 1);
//		SSD1306_UpdateScreen();
//	}
}
 8000aaa:	e00f      	b.n	8000acc <check_ir_sensor+0x84>
		vehicle_rightside = false;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <check_ir_sensor+0x98>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
		if(!vehicle_leftside)
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <check_ir_sensor+0x94>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	f083 0301 	eor.w	r3, r3, #1
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d005      	beq.n	8000acc <check_ir_sensor+0x84>
			GPIOA->BSRR |= MASK(ENABLE_, PA5_CLEAR); //Clear the buzzer
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <check_ir_sensor+0x90>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <check_ir_sensor+0x90>)
 8000ac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aca:	6193      	str	r3, [r2, #24]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	20000030 	.word	0x20000030
 8000ae0:	20000031 	.word	0x20000031

08000ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae8:	f000 f812 	bl	8000b10 <SystemClock_Config>
  rtc_init();
 8000aec:	f000 f874 	bl	8000bd8 <rtc_init>
  timer_init();
 8000af0:	f000 fa1c 	bl	8000f2c <timer_init>
  adc_init();
 8000af4:	f7ff fd3a 	bl	800056c <adc_init>
  ir_init();
 8000af8:	f7ff ff6a 	bl	80009d0 <ir_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  RTC_calculate_date();
 8000afc:	f000 f96c 	bl	8000dd8 <RTC_calculate_date>
	  RTC_calculate_time();
 8000b00:	f000 f90a 	bl	8000d18 <RTC_calculate_time>
	  calculate_temperature();
 8000b04:	f7ff fd98 	bl	8000638 <calculate_temperature>
	  check_ir_sensor();
 8000b08:	f7ff ff9e 	bl	8000a48 <check_ir_sensor>
	  RTC_calculate_date();
 8000b0c:	e7f6      	b.n	8000afc <main+0x18>
	...

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b094      	sub	sp, #80	; 0x50
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 0320 	add.w	r3, r7, #32
 8000b1a:	2230      	movs	r2, #48	; 0x30
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 ffca 	bl	8001ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <SystemClock_Config+0xb4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <SystemClock_Config+0xb4>)
 8000b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b42:	6413      	str	r3, [r2, #64]	; 0x40
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <SystemClock_Config+0xb4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b50:	2300      	movs	r3, #0
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <SystemClock_Config+0xb8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <SystemClock_Config+0xb8>)
 8000b5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <SystemClock_Config+0xb8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b70:	2301      	movs	r3, #1
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b74:	2310      	movs	r3, #16
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fb51 	bl	8001228 <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b8c:	f000 f81e 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fdb4 	bl	8001718 <HAL_RCC_ClockConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000bb6:	f000 f809 	bl	8000bcc <Error_Handler>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3750      	adds	r7, #80	; 0x50
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <rtc_init>:
static uint8_t Month = 0;
static uint8_t Day = 0;
static uint8_t Year = 0;

void rtc_init()
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= MASK(ENABLE_,POWER_INTERFACE_CLK); // Enable clock for power interface
 8000bdc:	4b4b      	ldr	r3, [pc, #300]	; (8000d0c <rtc_init+0x134>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	4a4a      	ldr	r2, [pc, #296]	; (8000d0c <rtc_init+0x134>)
 8000be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be6:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= MASK(ENABLE_,NO_WRITE_PROTECT); // Disable the write protect to RTC
 8000be8:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <rtc_init+0x138>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a48      	ldr	r2, [pc, #288]	; (8000d10 <rtc_init+0x138>)
 8000bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf2:	6013      	str	r3, [r2, #0]
	RCC->CSR |= MASK(ENABLE_,LOW_SPEED_OSC); // Enable LSI RC oscillator ON
 8000bf4:	4b45      	ldr	r3, [pc, #276]	; (8000d0c <rtc_init+0x134>)
 8000bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bf8:	4a44      	ldr	r2, [pc, #272]	; (8000d0c <rtc_init+0x134>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6753      	str	r3, [r2, #116]	; 0x74
	while(!(RCC->CSR & MASK(ENABLE_,LOW_SPEED_OSC_READY))); // Wait till the LSI RC oscillator is ON
 8000c00:	bf00      	nop
 8000c02:	4b42      	ldr	r3, [pc, #264]	; (8000d0c <rtc_init+0x134>)
 8000c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f9      	beq.n	8000c02 <rtc_init+0x2a>
	RCC->BDCR |= MASK(ENABLE_,RTC_CLOCK) | MASK(ENABLE_,LSI_CLOCK); // Enable clock for RTC module and select LSI as clock source
 8000c0e:	4b3f      	ldr	r3, [pc, #252]	; (8000d0c <rtc_init+0x134>)
 8000c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c12:	4a3e      	ldr	r2, [pc, #248]	; (8000d0c <rtc_init+0x134>)
 8000c14:	f443 4302 	orr.w	r3, r3, #33280	; 0x8200
 8000c18:	6713      	str	r3, [r2, #112]	; 0x70
	RTC->WPR |= 0xCA; // Unlock the write protection by using the key
 8000c1a:	4b3e      	ldr	r3, [pc, #248]	; (8000d14 <rtc_init+0x13c>)
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1e:	4a3d      	ldr	r2, [pc, #244]	; (8000d14 <rtc_init+0x13c>)
 8000c20:	f043 03ca 	orr.w	r3, r3, #202	; 0xca
 8000c24:	6253      	str	r3, [r2, #36]	; 0x24
	RTC->WPR |= 0x53; // Unlock the write protection by using the key
 8000c26:	4b3b      	ldr	r3, [pc, #236]	; (8000d14 <rtc_init+0x13c>)
 8000c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2a:	4a3a      	ldr	r2, [pc, #232]	; (8000d14 <rtc_init+0x13c>)
 8000c2c:	f043 0353 	orr.w	r3, r3, #83	; 0x53
 8000c30:	6253      	str	r3, [r2, #36]	; 0x24
	RTC->ISR |= MASK(ENABLE_,INIT_MODE); // The calendar counter is stopped to allow update
 8000c32:	4b38      	ldr	r3, [pc, #224]	; (8000d14 <rtc_init+0x13c>)
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	4a37      	ldr	r2, [pc, #220]	; (8000d14 <rtc_init+0x13c>)
 8000c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3c:	60d3      	str	r3, [r2, #12]
	while(!(RTC -> ISR & RTC_ISR_INITF)); //wait till its set
 8000c3e:	bf00      	nop
 8000c40:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <rtc_init+0x13c>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d0f9      	beq.n	8000c40 <rtc_init+0x68>
	RTC->PRER |= PREDIV_S; //Set the prescalar to bring down the LSI frequency 1Hz
 8000c4c:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <rtc_init+0x13c>)
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	4a30      	ldr	r2, [pc, #192]	; (8000d14 <rtc_init+0x13c>)
 8000c52:	f443 739f 	orr.w	r3, r3, #318	; 0x13e
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6113      	str	r3, [r2, #16]
	RTC->PRER |= PREDIV_A<<16;
 8000c5c:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <rtc_init+0x13c>)
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	4a2c      	ldr	r2, [pc, #176]	; (8000d14 <rtc_init+0x13c>)
 8000c62:	f443 03c6 	orr.w	r3, r3, #6488064	; 0x630000
 8000c66:	6113      	str	r3, [r2, #16]
	//Set the TR and DR registers for date and time
	RTC->TR &= ~(0xFFFFFFFF);
 8000c68:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <rtc_init+0x13c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <rtc_init+0x13c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
	RTC->TR |= (0b100 << 12); //minutes msb is 4
 8000c72:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <rtc_init+0x13c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a27      	ldr	r2, [pc, #156]	; (8000d14 <rtc_init+0x13c>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6013      	str	r3, [r2, #0]
	RTC->TR |= (0b111 << 16); //hours lsb is 7
 8000c7e:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <rtc_init+0x13c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a24      	ldr	r2, [pc, #144]	; (8000d14 <rtc_init+0x13c>)
 8000c84:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000c88:	6013      	str	r3, [r2, #0]
	RTC->TR |= (0b01 << 20); //hours msb is 1 i.e. 17.40.0
 8000c8a:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <rtc_init+0x13c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <rtc_init+0x13c>)
 8000c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c94:	6013      	str	r3, [r2, #0]
	RTC->DR &= ~(0xFFFFFFFF);
 8000c96:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <rtc_init+0x13c>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <rtc_init+0x13c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
	RTC->DR |= (0b0011 << 0); //date units is 3
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <rtc_init+0x13c>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <rtc_init+0x13c>)
 8000ca6:	f043 0303 	orr.w	r3, r3, #3
 8000caa:	6053      	str	r3, [r2, #4]
	RTC->DR |= (0b10 << 4); //date units is 2
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <rtc_init+0x13c>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	4a18      	ldr	r2, [pc, #96]	; (8000d14 <rtc_init+0x13c>)
 8000cb2:	f043 0320 	orr.w	r3, r3, #32
 8000cb6:	6053      	str	r3, [r2, #4]
	RTC->DR |= (0b0100 <<8); //month uints is 4
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <rtc_init+0x13c>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <rtc_init+0x13c>)
 8000cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc2:	6053      	str	r3, [r2, #4]
	RTC->DR |= (0b0011 << 16); //years uints is 3
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <rtc_init+0x13c>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <rtc_init+0x13c>)
 8000cca:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000cce:	6053      	str	r3, [r2, #4]
	RTC->DR |= (0b0010 <<20); //years tens position is 2
 8000cd0:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <rtc_init+0x13c>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <rtc_init+0x13c>)
 8000cd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cda:	6053      	str	r3, [r2, #4]
	RTC->CR |= MASK(ENABLE_,BYPASS); //Calendar values are taken directly from the calendar counters.
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <rtc_init+0x13c>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	4a0c      	ldr	r2, [pc, #48]	; (8000d14 <rtc_init+0x13c>)
 8000ce2:	f043 0320 	orr.w	r3, r3, #32
 8000ce6:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~MASK(ENABLE_,INIT_MODE); //Clear the Init bit to exit Initialization mode
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <rtc_init+0x13c>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <rtc_init+0x13c>)
 8000cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000cf2:	60d3      	str	r3, [r2, #12]
	PWR->CR &= ~MASK(ENABLE_,NO_WRITE_PROTECT); //Enable the Write protect back
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <rtc_init+0x138>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <rtc_init+0x138>)
 8000cfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40007000 	.word	0x40007000
 8000d14:	40002800 	.word	0x40002800

08000d18 <RTC_calculate_time>:

void RTC_calculate_time (void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
	uint8_t min = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	71fb      	strb	r3, [r7, #7]
	uint8_t hrs = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	71bb      	strb	r3, [r7, #6]
	Seconds=(((RTC->TR & 0x7f) >> 4)*10)+(RTC->TR & 0xf);
 8000d26:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <RTC_calculate_time+0xb0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	461a      	mov	r2, r3
 8000d36:	0092      	lsls	r2, r2, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <RTC_calculate_time+0xb0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	f003 030f 	and.w	r3, r3, #15
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <RTC_calculate_time+0xb4>)
 8000d50:	701a      	strb	r2, [r3, #0]
	min=((RTC->TR & 0x7f00) >> 8);
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <RTC_calculate_time+0xb0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	0a1b      	lsrs	r3, r3, #8
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d5e:	71fb      	strb	r3, [r7, #7]
	Minutes=(((min & 0x7f)>>4)*10)+(min & 0xf);
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	111b      	asrs	r3, r3, #4
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	0092      	lsls	r2, r2, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 030f 	and.w	r3, r3, #15
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4413      	add	r3, r2
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <RTC_calculate_time+0xb8>)
 8000d84:	701a      	strb	r2, [r3, #0]
	hrs=((RTC->TR & 0x7f0000) >> 16);
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <RTC_calculate_time+0xb0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	0c1b      	lsrs	r3, r3, #16
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d92:	71bb      	strb	r3, [r7, #6]
	Hours=(((hrs & 0x7f)>>4)*10)+(hrs & 0xf);
 8000d94:	79bb      	ldrb	r3, [r7, #6]
 8000d96:	111b      	asrs	r3, r3, #4
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	461a      	mov	r2, r3
 8000da2:	0092      	lsls	r2, r2, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	79bb      	ldrb	r3, [r7, #6]
 8000dac:	f003 030f 	and.w	r3, r3, #15
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	4413      	add	r3, r2
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <RTC_calculate_time+0xbc>)
 8000db8:	701a      	strb	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40002800 	.word	0x40002800
 8000dcc:	20000034 	.word	0x20000034
 8000dd0:	20000033 	.word	0x20000033
 8000dd4:	20000032 	.word	0x20000032

08000dd8 <RTC_calculate_date>:

void RTC_calculate_date(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
	Year=((RTC->DR >> 20)*10) + ((RTC->DR >>16) & 0xf);
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <RTC_calculate_date+0x90>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	0d1b      	lsrs	r3, r3, #20
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	461a      	mov	r2, r3
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <RTC_calculate_date+0x90>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	0c1b      	lsrs	r3, r3, #16
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <RTC_calculate_date+0x94>)
 8000e02:	701a      	strb	r2, [r3, #0]
	Month=((RTC->DR >> 12) & 1)*10 + ((RTC->DR >>8) & 0xf);
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <RTC_calculate_date+0x90>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	0b1b      	lsrs	r3, r3, #12
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	0092      	lsls	r2, r2, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <RTC_calculate_date+0x90>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	f003 030f 	and.w	r3, r3, #15
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <RTC_calculate_date+0x98>)
 8000e30:	701a      	strb	r2, [r3, #0]
	Day=((RTC->DR >> 4) & 3)*10 + (RTC->DR & 0xf);
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <RTC_calculate_date+0x90>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <RTC_calculate_date+0x90>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	f003 030f 	and.w	r3, r3, #15
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4413      	add	r3, r2
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <RTC_calculate_date+0x9c>)
 8000e5c:	701a      	strb	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	40002800 	.word	0x40002800
 8000e6c:	20000037 	.word	0x20000037
 8000e70:	20000035 	.word	0x20000035
 8000e74:	20000036 	.word	0x20000036

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <NMI_Handler+0x4>

08000e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 f8da 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_EnableIRQ>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4907      	ldr	r1, [pc, #28]	; (8000f28 <__NVIC_EnableIRQ+0x38>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <timer_init>:
#include "timer.h"

int count = 0;
void timer_init()
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (SET << TIM2_CLK); //Enable the clock for Timer2
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <timer_init+0x5c>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <timer_init+0x5c>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC = 0; //The PSC and ARR values are set to provide 1millisec delay
 8000f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f40:	2200      	movs	r2, #0
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 15999;
 8000f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f48:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000f4c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= (SET << URS); //By setting this bit counter overflow/underflow generates an update interrupt
 8000f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6013      	str	r3, [r2, #0]
	TIM2->DIER |= (SET << UIE); //Update interrupt enable
 8000f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	60d3      	str	r3, [r2, #12]
	TIM2->EGR |= (SET << UG); //To clear the counter and generate the interrupt again
 8000f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6153      	str	r3, [r2, #20]
	NVIC_EnableIRQ(TIM2_IRQn); //Enable the Interrupt IRQ for TIM2
 8000f7e:	201c      	movs	r0, #28
 8000f80:	f7ff ffb6 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800

08000f8c <TIM2_IRQHandler>:
  * @brief This is the interrupt handler that is called when ever the counter overflows
  *  It gets called for every 1millisec as we have set the ARR and PSC for 1Millisec
  *
  */
void TIM2_IRQHandler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
	if(TIM2->SR & (SET << UIF))  //Check for the interrupt
 8000f90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00c      	beq.n	8000fb8 <TIM2_IRQHandler+0x2c>
	{
		TIM2->SR &= ~(SET << UIF); //Clear the interrupt
 8000f9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	6113      	str	r3, [r2, #16]
		count++;
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <TIM2_IRQHandler+0x38>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <TIM2_IRQHandler+0x38>)
 8000fb6:	6013      	str	r3, [r2, #0]
	}
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000038 	.word	0x20000038

08000fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001000 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fce:	490e      	ldr	r1, [pc, #56]	; (8001008 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd0:	4a0e      	ldr	r2, [pc, #56]	; (800100c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe4:	4c0b      	ldr	r4, [pc, #44]	; (8001014 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff2:	f7ff ff6b 	bl	8000ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f000 fd3b 	bl	8001a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffa:	f7ff fd73 	bl	8000ae4 <main>
  bx  lr    
 8000ffe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001000:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800100c:	08001b00 	.word	0x08001b00
  ldr r2, =_sbss
 8001010:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001014:	20000040 	.word	0x20000040

08001018 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <DMA1_Stream0_IRQHandler>
	...

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x54>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f8e8 	bl	8001210 <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f8be 	bl	80011d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_InitTick+0x5c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000000 	.word	0x20000000
 8001074:	20000008 	.word	0x20000008
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008
 80010a0:	2000003c 	.word	0x2000003c

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	2000003c 	.word	0x2000003c

080010bc <__NVIC_GetPriorityGrouping>:
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_SetPriority>:
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db0a      	blt.n	8001102 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	490c      	ldr	r1, [pc, #48]	; (8001124 <__NVIC_SetPriority+0x4c>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	0112      	lsls	r2, r2, #4
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	440b      	add	r3, r1
 80010fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001100:	e00a      	b.n	8001118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4908      	ldr	r1, [pc, #32]	; (8001128 <__NVIC_SetPriority+0x50>)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	3b04      	subs	r3, #4
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	440b      	add	r3, r1
 8001116:	761a      	strb	r2, [r3, #24]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f1c3 0307 	rsb	r3, r3, #7
 8001146:	2b04      	cmp	r3, #4
 8001148:	bf28      	it	cs
 800114a:	2304      	movcs	r3, #4
 800114c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3304      	adds	r3, #4
 8001152:	2b06      	cmp	r3, #6
 8001154:	d902      	bls.n	800115c <NVIC_EncodePriority+0x30>
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3b03      	subs	r3, #3
 800115a:	e000      	b.n	800115e <NVIC_EncodePriority+0x32>
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	f04f 32ff 	mov.w	r2, #4294967295
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43da      	mvns	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	401a      	ands	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43d9      	mvns	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	4313      	orrs	r3, r2
         );
}
 8001186:	4618      	mov	r0, r3
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f7ff ff8e 	bl	80010d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ea:	f7ff ff67 	bl	80010bc <__NVIC_GetPriorityGrouping>
 80011ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	6978      	ldr	r0, [r7, #20]
 80011f6:	f7ff ff99 	bl	800112c <NVIC_EncodePriority>
 80011fa:	4602      	mov	r2, r0
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff68 	bl	80010d8 <__NVIC_SetPriority>
}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ffbb 	bl	8001194 <SysTick_Config>
 800121e:	4603      	mov	r3, r0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e267      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d075      	beq.n	8001332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001246:	4b88      	ldr	r3, [pc, #544]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b04      	cmp	r3, #4
 8001250:	d00c      	beq.n	800126c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001252:	4b85      	ldr	r3, [pc, #532]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800125a:	2b08      	cmp	r3, #8
 800125c:	d112      	bne.n	8001284 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125e:	4b82      	ldr	r3, [pc, #520]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800126a:	d10b      	bne.n	8001284 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	4b7e      	ldr	r3, [pc, #504]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d05b      	beq.n	8001330 <HAL_RCC_OscConfig+0x108>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d157      	bne.n	8001330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e242      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800128c:	d106      	bne.n	800129c <HAL_RCC_OscConfig+0x74>
 800128e:	4b76      	ldr	r3, [pc, #472]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a75      	ldr	r2, [pc, #468]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e01d      	b.n	80012d8 <HAL_RCC_OscConfig+0xb0>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x98>
 80012a6:	4b70      	ldr	r3, [pc, #448]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a6f      	ldr	r2, [pc, #444]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b6d      	ldr	r3, [pc, #436]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6c      	ldr	r2, [pc, #432]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0xb0>
 80012c0:	4b69      	ldr	r3, [pc, #420]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a68      	ldr	r2, [pc, #416]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b66      	ldr	r3, [pc, #408]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a65      	ldr	r2, [pc, #404]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d013      	beq.n	8001308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fee0 	bl	80010a4 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fedc 	bl	80010a4 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e207      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b5b      	ldr	r3, [pc, #364]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0xc0>
 8001306:	e014      	b.n	8001332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fecc 	bl	80010a4 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fec8 	bl	80010a4 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e1f3      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	4b51      	ldr	r3, [pc, #324]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0xe8>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d063      	beq.n	8001406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800133e:	4b4a      	ldr	r3, [pc, #296]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00b      	beq.n	8001362 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134a:	4b47      	ldr	r3, [pc, #284]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001352:	2b08      	cmp	r3, #8
 8001354:	d11c      	bne.n	8001390 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001356:	4b44      	ldr	r3, [pc, #272]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d116      	bne.n	8001390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001362:	4b41      	ldr	r3, [pc, #260]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <HAL_RCC_OscConfig+0x152>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e1c7      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137a:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4937      	ldr	r1, [pc, #220]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	e03a      	b.n	8001406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d020      	beq.n	80013da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <HAL_RCC_OscConfig+0x244>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139e:	f7ff fe81 	bl	80010a4 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a6:	f7ff fe7d 	bl	80010a4 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e1a8      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4925      	ldr	r1, [pc, #148]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
 80013d8:	e015      	b.n	8001406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_RCC_OscConfig+0x244>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fe60 	bl	80010a4 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fe5c 	bl	80010a4 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e187      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d036      	beq.n	8001480 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d016      	beq.n	8001448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_RCC_OscConfig+0x248>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001420:	f7ff fe40 	bl	80010a4 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001428:	f7ff fe3c 	bl	80010a4 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e167      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_RCC_OscConfig+0x240>)
 800143c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x200>
 8001446:	e01b      	b.n	8001480 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_RCC_OscConfig+0x248>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff fe29 	bl	80010a4 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	e00e      	b.n	8001474 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001456:	f7ff fe25 	bl	80010a4 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d907      	bls.n	8001474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e150      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
 8001468:	40023800 	.word	0x40023800
 800146c:	42470000 	.word	0x42470000
 8001470:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001474:	4b88      	ldr	r3, [pc, #544]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1ea      	bne.n	8001456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8097 	beq.w	80015bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001492:	4b81      	ldr	r3, [pc, #516]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10f      	bne.n	80014be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b7d      	ldr	r3, [pc, #500]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a7c      	ldr	r2, [pc, #496]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b7a      	ldr	r3, [pc, #488]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ba:	2301      	movs	r3, #1
 80014bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014be:	4b77      	ldr	r3, [pc, #476]	; (800169c <HAL_RCC_OscConfig+0x474>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d118      	bne.n	80014fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ca:	4b74      	ldr	r3, [pc, #464]	; (800169c <HAL_RCC_OscConfig+0x474>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a73      	ldr	r2, [pc, #460]	; (800169c <HAL_RCC_OscConfig+0x474>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fde5 	bl	80010a4 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014de:	f7ff fde1 	bl	80010a4 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e10c      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	4b6a      	ldr	r3, [pc, #424]	; (800169c <HAL_RCC_OscConfig+0x474>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d106      	bne.n	8001512 <HAL_RCC_OscConfig+0x2ea>
 8001504:	4b64      	ldr	r3, [pc, #400]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001508:	4a63      	ldr	r2, [pc, #396]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6713      	str	r3, [r2, #112]	; 0x70
 8001510:	e01c      	b.n	800154c <HAL_RCC_OscConfig+0x324>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b05      	cmp	r3, #5
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x30c>
 800151a:	4b5f      	ldr	r3, [pc, #380]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	4a5e      	ldr	r2, [pc, #376]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	6713      	str	r3, [r2, #112]	; 0x70
 8001526:	4b5c      	ldr	r3, [pc, #368]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a5b      	ldr	r2, [pc, #364]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	e00b      	b.n	800154c <HAL_RCC_OscConfig+0x324>
 8001534:	4b58      	ldr	r3, [pc, #352]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001538:	4a57      	ldr	r2, [pc, #348]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	6713      	str	r3, [r2, #112]	; 0x70
 8001540:	4b55      	ldr	r3, [pc, #340]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	4a54      	ldr	r2, [pc, #336]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 0304 	bic.w	r3, r3, #4
 800154a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d015      	beq.n	8001580 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001554:	f7ff fda6 	bl	80010a4 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155a:	e00a      	b.n	8001572 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800155c:	f7ff fda2 	bl	80010a4 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	; 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e0cb      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001572:	4b49      	ldr	r3, [pc, #292]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0ee      	beq.n	800155c <HAL_RCC_OscConfig+0x334>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001580:	f7ff fd90 	bl	80010a4 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001586:	e00a      	b.n	800159e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001588:	f7ff fd8c 	bl	80010a4 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0b5      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159e:	4b3e      	ldr	r3, [pc, #248]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ee      	bne.n	8001588 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d105      	bne.n	80015bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b0:	4b39      	ldr	r3, [pc, #228]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	4a38      	ldr	r2, [pc, #224]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80015b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80a1 	beq.w	8001708 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d05c      	beq.n	800168c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d141      	bne.n	800165e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <HAL_RCC_OscConfig+0x478>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fd60 	bl	80010a4 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff fd5c 	bl	80010a4 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e087      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	4b27      	ldr	r3, [pc, #156]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69da      	ldr	r2, [r3, #28]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	019b      	lsls	r3, r3, #6
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	085b      	lsrs	r3, r3, #1
 800161e:	3b01      	subs	r3, #1
 8001620:	041b      	lsls	r3, r3, #16
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	491b      	ldr	r1, [pc, #108]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_RCC_OscConfig+0x478>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff fd35 	bl	80010a4 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163e:	f7ff fd31 	bl	80010a4 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e05c      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x416>
 800165c:	e054      	b.n	8001708 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <HAL_RCC_OscConfig+0x478>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fd1e 	bl	80010a4 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff fd1a 	bl	80010a4 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e045      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_RCC_OscConfig+0x470>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x444>
 800168a:	e03d      	b.n	8001708 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d107      	bne.n	80016a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e038      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
 8001698:	40023800 	.word	0x40023800
 800169c:	40007000 	.word	0x40007000
 80016a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_RCC_OscConfig+0x4ec>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d028      	beq.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d121      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d11a      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016d4:	4013      	ands	r3, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016dc:	4293      	cmp	r3, r2
 80016de:	d111      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	085b      	lsrs	r3, r3, #1
 80016ec:	3b01      	subs	r3, #1
 80016ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0cc      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800172c:	4b68      	ldr	r3, [pc, #416]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d90c      	bls.n	8001754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b65      	ldr	r3, [pc, #404]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b63      	ldr	r3, [pc, #396]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0b8      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800176c:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001784:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a52      	ldr	r2, [pc, #328]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800178e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001790:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	494d      	ldr	r1, [pc, #308]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d044      	beq.n	8001838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d119      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e07f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d003      	beq.n	80017d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d6:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e06f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e6:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e067      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f023 0203 	bic.w	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4934      	ldr	r1, [pc, #208]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	4313      	orrs	r3, r2
 8001806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001808:	f7ff fc4c 	bl	80010a4 <HAL_GetTick>
 800180c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	e00a      	b.n	8001826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001810:	f7ff fc48 	bl	80010a4 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	; 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e04f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 020c 	and.w	r2, r3, #12
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	429a      	cmp	r2, r3
 8001836:	d1eb      	bne.n	8001810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d20c      	bcs.n	8001860 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e032      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4916      	ldr	r1, [pc, #88]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	490e      	ldr	r1, [pc, #56]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800189e:	f000 f821 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	490a      	ldr	r1, [pc, #40]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	5ccb      	ldrb	r3, [r1, r3]
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fbac 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00
 80018d4:	40023800 	.word	0x40023800
 80018d8:	08001ae0 	.word	0x08001ae0
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e8:	b090      	sub	sp, #64	; 0x40
 80018ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
 80018f0:	2300      	movs	r3, #0
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018f4:	2300      	movs	r3, #0
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018fc:	4b59      	ldr	r3, [pc, #356]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x180>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	d00d      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x40>
 8001908:	2b08      	cmp	r3, #8
 800190a:	f200 80a1 	bhi.w	8001a50 <HAL_RCC_GetSysClockFreq+0x16c>
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0x34>
 8001912:	2b04      	cmp	r3, #4
 8001914:	d003      	beq.n	800191e <HAL_RCC_GetSysClockFreq+0x3a>
 8001916:	e09b      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001918:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x184>)
 800191a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800191c:	e09b      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800191e:	4b53      	ldr	r3, [pc, #332]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001920:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001922:	e098      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001924:	4b4f      	ldr	r3, [pc, #316]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800192e:	4b4d      	ldr	r3, [pc, #308]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d028      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x180>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	099b      	lsrs	r3, r3, #6
 8001940:	2200      	movs	r2, #0
 8001942:	623b      	str	r3, [r7, #32]
 8001944:	627a      	str	r2, [r7, #36]	; 0x24
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800194c:	2100      	movs	r1, #0
 800194e:	4b47      	ldr	r3, [pc, #284]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001950:	fb03 f201 	mul.w	r2, r3, r1
 8001954:	2300      	movs	r3, #0
 8001956:	fb00 f303 	mul.w	r3, r0, r3
 800195a:	4413      	add	r3, r2
 800195c:	4a43      	ldr	r2, [pc, #268]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x188>)
 800195e:	fba0 1202 	umull	r1, r2, r0, r2
 8001962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001964:	460a      	mov	r2, r1
 8001966:	62ba      	str	r2, [r7, #40]	; 0x28
 8001968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800196a:	4413      	add	r3, r2
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800196e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001970:	2200      	movs	r2, #0
 8001972:	61bb      	str	r3, [r7, #24]
 8001974:	61fa      	str	r2, [r7, #28]
 8001976:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800197a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800197e:	f7fe fc2b 	bl	80001d8 <__aeabi_uldivmod>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4613      	mov	r3, r2
 8001988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800198a:	e053      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198c:	4b35      	ldr	r3, [pc, #212]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x180>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	099b      	lsrs	r3, r3, #6
 8001992:	2200      	movs	r2, #0
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	617a      	str	r2, [r7, #20]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800199e:	f04f 0b00 	mov.w	fp, #0
 80019a2:	4652      	mov	r2, sl
 80019a4:	465b      	mov	r3, fp
 80019a6:	f04f 0000 	mov.w	r0, #0
 80019aa:	f04f 0100 	mov.w	r1, #0
 80019ae:	0159      	lsls	r1, r3, #5
 80019b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b4:	0150      	lsls	r0, r2, #5
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	ebb2 080a 	subs.w	r8, r2, sl
 80019be:	eb63 090b 	sbc.w	r9, r3, fp
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019d6:	ebb2 0408 	subs.w	r4, r2, r8
 80019da:	eb63 0509 	sbc.w	r5, r3, r9
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	00eb      	lsls	r3, r5, #3
 80019e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019ec:	00e2      	lsls	r2, r4, #3
 80019ee:	4614      	mov	r4, r2
 80019f0:	461d      	mov	r5, r3
 80019f2:	eb14 030a 	adds.w	r3, r4, sl
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	eb45 030b 	adc.w	r3, r5, fp
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	028b      	lsls	r3, r1, #10
 8001a0e:	4621      	mov	r1, r4
 8001a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a14:	4621      	mov	r1, r4
 8001a16:	028a      	lsls	r2, r1, #10
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	60fa      	str	r2, [r7, #12]
 8001a24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a28:	f7fe fbd6 	bl	80001d8 <__aeabi_uldivmod>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4613      	mov	r3, r2
 8001a32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	0c1b      	lsrs	r3, r3, #16
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a4e:	e002      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3740      	adds	r7, #64	; 0x40
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	00f42400 	.word	0x00f42400
 8001a6c:	017d7840 	.word	0x017d7840

08001a70 <__libc_init_array>:
 8001a70:	b570      	push	{r4, r5, r6, lr}
 8001a72:	4d0d      	ldr	r5, [pc, #52]	; (8001aa8 <__libc_init_array+0x38>)
 8001a74:	4c0d      	ldr	r4, [pc, #52]	; (8001aac <__libc_init_array+0x3c>)
 8001a76:	1b64      	subs	r4, r4, r5
 8001a78:	10a4      	asrs	r4, r4, #2
 8001a7a:	2600      	movs	r6, #0
 8001a7c:	42a6      	cmp	r6, r4
 8001a7e:	d109      	bne.n	8001a94 <__libc_init_array+0x24>
 8001a80:	4d0b      	ldr	r5, [pc, #44]	; (8001ab0 <__libc_init_array+0x40>)
 8001a82:	4c0c      	ldr	r4, [pc, #48]	; (8001ab4 <__libc_init_array+0x44>)
 8001a84:	f000 f820 	bl	8001ac8 <_init>
 8001a88:	1b64      	subs	r4, r4, r5
 8001a8a:	10a4      	asrs	r4, r4, #2
 8001a8c:	2600      	movs	r6, #0
 8001a8e:	42a6      	cmp	r6, r4
 8001a90:	d105      	bne.n	8001a9e <__libc_init_array+0x2e>
 8001a92:	bd70      	pop	{r4, r5, r6, pc}
 8001a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a98:	4798      	blx	r3
 8001a9a:	3601      	adds	r6, #1
 8001a9c:	e7ee      	b.n	8001a7c <__libc_init_array+0xc>
 8001a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aa2:	4798      	blx	r3
 8001aa4:	3601      	adds	r6, #1
 8001aa6:	e7f2      	b.n	8001a8e <__libc_init_array+0x1e>
 8001aa8:	08001af8 	.word	0x08001af8
 8001aac:	08001af8 	.word	0x08001af8
 8001ab0:	08001af8 	.word	0x08001af8
 8001ab4:	08001afc 	.word	0x08001afc

08001ab8 <memset>:
 8001ab8:	4402      	add	r2, r0
 8001aba:	4603      	mov	r3, r0
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d100      	bne.n	8001ac2 <memset+0xa>
 8001ac0:	4770      	bx	lr
 8001ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ac6:	e7f9      	b.n	8001abc <memset+0x4>

08001ac8 <_init>:
 8001ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aca:	bf00      	nop
 8001acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ace:	bc08      	pop	{r3}
 8001ad0:	469e      	mov	lr, r3
 8001ad2:	4770      	bx	lr

08001ad4 <_fini>:
 8001ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ad6:	bf00      	nop
 8001ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ada:	bc08      	pop	{r3}
 8001adc:	469e      	mov	lr, r3
 8001ade:	4770      	bx	lr
