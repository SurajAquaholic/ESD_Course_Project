
OLED_Config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000377c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ad0  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e4  080053e4  00020c30  2**0
                  CONTENTS
  4 .ARM          00000008  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053ec  080053ec  00020c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053ec  080053ec  000153ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053f0  080053f0  000153f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000c30  20000000  080053f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000c30  08006024  00020c30  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010dc  08006024  000210dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020c30  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4ac  00000000  00000000  00020c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002146  00000000  00000000  0002e10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  00030258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  00030b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016790  00000000  00000000  000313a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc4a  00000000  00000000  00047b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f86  00000000  00000000  00054782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da708  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002318  00000000  00000000  000da75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000c30 	.word	0x20000c30
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080038fc 	.word	0x080038fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000c34 	.word	0x20000c34
 80001d4:	080038fc 	.word	0x080038fc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	db0b      	blt.n	80004fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	f003 021f 	and.w	r2, r3, #31
 80004e8:	4907      	ldr	r1, [pc, #28]	; (8000508 <__NVIC_EnableIRQ+0x38>)
 80004ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ee:	095b      	lsrs	r3, r3, #5
 80004f0:	2001      	movs	r0, #1
 80004f2:	fa00 f202 	lsl.w	r2, r0, r2
 80004f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	e000e100 	.word	0xe000e100

0800050c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	6039      	str	r1, [r7, #0]
 8000516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051c:	2b00      	cmp	r3, #0
 800051e:	db0a      	blt.n	8000536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	b2da      	uxtb	r2, r3
 8000524:	490c      	ldr	r1, [pc, #48]	; (8000558 <__NVIC_SetPriority+0x4c>)
 8000526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052a:	0112      	lsls	r2, r2, #4
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	440b      	add	r3, r1
 8000530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000534:	e00a      	b.n	800054c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4908      	ldr	r1, [pc, #32]	; (800055c <__NVIC_SetPriority+0x50>)
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	f003 030f 	and.w	r3, r3, #15
 8000542:	3b04      	subs	r3, #4
 8000544:	0112      	lsls	r2, r2, #4
 8000546:	b2d2      	uxtb	r2, r2
 8000548:	440b      	add	r3, r1
 800054a:	761a      	strb	r2, [r3, #24]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	e000e100 	.word	0xe000e100
 800055c:	e000ed00 	.word	0xe000ed00

08000560 <adc_init>:
  21000, 22000, 23000, 24000, 25000, 26000, 27000, 28000, 29000
};


void adc_init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= MASK(ENABLE_, GPIOA_CLOCK); // Enable clock source for PORT A
 8000564:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <adc_init+0x80>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	4a1d      	ldr	r2, [pc, #116]	; (80005e0 <adc_init+0x80>)
 800056a:	f043 0301 	orr.w	r3, r3, #1
 800056e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= MASK(ANALOG_MODE, PA0); // PA0 pin is Analog Mode
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <adc_init+0x84>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <adc_init+0x84>)
 8000576:	f043 0303 	orr.w	r3, r3, #3
 800057a:	6013      	str	r3, [r2, #0]
	RCC->APB2ENR |= MASK(ENABLE_, ADC_CLOCK);  // Enable clock source for ADC1
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <adc_init+0x80>)
 800057e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000580:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <adc_init+0x80>)
 8000582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000586:	6453      	str	r3, [r2, #68]	; 0x44
	ADC1->CR1 |= MASK(ENABLE_, ADC_RESOLUTION);  //  set ADC resolution to 10bit i.e. max is 1023
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <adc_init+0x88>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	4a16      	ldr	r2, [pc, #88]	; (80005e8 <adc_init+0x88>)
 800058e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000592:	6053      	str	r3, [r2, #4]
	ADC1->CR2 &= ~ MASK(ENABLE_, ADC_ENABLE);  //  ADC disable
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <adc_init+0x88>)
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	4a13      	ldr	r2, [pc, #76]	; (80005e8 <adc_init+0x88>)
 800059a:	f023 0301 	bic.w	r3, r3, #1
 800059e:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= 0; // Enable ADC 0th Channel
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <adc_init+0x88>)
 80005a2:	4a11      	ldr	r2, [pc, #68]	; (80005e8 <adc_init+0x88>)
 80005a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a6:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->CR1 |= MASK(ENABLE_, INTERRUPT_EOC); //end of conversion interrupt
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <adc_init+0x88>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <adc_init+0x88>)
 80005ae:	f043 0320 	orr.w	r3, r3, #32
 80005b2:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |=  MASK(ENABLE_, ADC_ENABLE);  // ADC ON
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <adc_init+0x88>)
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <adc_init+0x88>)
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	6093      	str	r3, [r2, #8]
	NVIC_EnableIRQ(ADC_IRQn);
 80005c0:	2012      	movs	r0, #18
 80005c2:	f7ff ff85 	bl	80004d0 <__NVIC_EnableIRQ>
	NVIC_SetPriority(ADC_IRQn,2);
 80005c6:	2102      	movs	r1, #2
 80005c8:	2012      	movs	r0, #18
 80005ca:	f7ff ff9f 	bl	800050c <__NVIC_SetPriority>
	ADC1->CR2 |= MASK(ENABLE_, START_CONVERSION);  // Start  ADC conversion
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <adc_init+0x88>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <adc_init+0x88>)
 80005d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80005d8:	6093      	str	r3, [r2, #8]
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020000 	.word	0x40020000
 80005e8:	40012000 	.word	0x40012000

080005ec <ADC_IRQHandler>:


void ADC_IRQHandler()
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	//store the DR register contents in a variable,
	//no need to clear the EOC as its cleared when you read the DR register
	if(ADC1->SR & MASK(ENABLE_, EOC))
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <ADC_IRQHandler+0x2c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 0302 	and.w	r3, r3, #2
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d008      	beq.n	800060e <ADC_IRQHandler+0x22>
	{
		adc_value = ADC1->DR;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <ADC_IRQHandler+0x2c>)
 80005fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000600:	ee07 3a90 	vmov	s15, r3
 8000604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <ADC_IRQHandler+0x30>)
 800060a:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	40012000 	.word	0x40012000
 800061c:	20000c4c 	.word	0x20000c4c

08000620 <calculate_temperature>:

void calculate_temperature()
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
	float analog_voltage = 0;
 8000626:	f04f 0300 	mov.w	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
	int ntc_resistance = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
	analog_voltage = (3*adc_value)/1023; //gets the analog voltage corresponding to adc output value
 8000630:	4ba8      	ldr	r3, [pc, #672]	; (80008d4 <calculate_temperature+0x2b4>)
 8000632:	edd3 7a00 	vldr	s15, [r3]
 8000636:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800063a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800063e:	eddf 6aa6 	vldr	s13, [pc, #664]	; 80008d8 <calculate_temperature+0x2b8>
 8000642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000646:	edc7 7a01 	vstr	s15, [r7, #4]
	ntc_resistance = ((-analog_voltage*10000)/(analog_voltage-3)); //3 is vcc, 10k is nominal resistance
 800064a:	edd7 7a01 	vldr	s15, [r7, #4]
 800064e:	eef1 7a67 	vneg.f32	s15, s15
 8000652:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80008dc <calculate_temperature+0x2bc>
 8000656:	ee67 6a87 	vmul.f32	s13, s15, s14
 800065a:	edd7 7a01 	vldr	s15, [r7, #4]
 800065e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000662:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800066a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800066e:	ee17 3a90 	vmov	r3, s15
 8000672:	603b      	str	r3, [r7, #0]
	if(ntc_resistance == lookupTable[28])
 8000674:	f247 1248 	movw	r2, #29000	; 0x7148
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	4293      	cmp	r3, r2
 800067c:	d103      	bne.n	8000686 <calculate_temperature+0x66>
	{
		temperature = 2;
 800067e:	4b98      	ldr	r3, [pc, #608]	; (80008e0 <calculate_temperature+0x2c0>)
 8000680:	2202      	movs	r2, #2
 8000682:	601a      	str	r2, [r3, #0]
	}
	else if(ntc_resistance < lookupTable[1] && ntc_resistance >= lookupTable[0])
	{
		temperature = 95;
	}
}
 8000684:	e190      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[28] && ntc_resistance >= lookupTable[27])
 8000686:	f247 1248 	movw	r2, #29000	; 0x7148
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	4293      	cmp	r3, r2
 800068e:	da08      	bge.n	80006a2 <calculate_temperature+0x82>
 8000690:	f646 5260 	movw	r2, #28000	; 0x6d60
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	4293      	cmp	r3, r2
 8000698:	db03      	blt.n	80006a2 <calculate_temperature+0x82>
		temperature = 3;
 800069a:	4b91      	ldr	r3, [pc, #580]	; (80008e0 <calculate_temperature+0x2c0>)
 800069c:	2203      	movs	r2, #3
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	e182      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[27] && ntc_resistance >= lookupTable[26])
 80006a2:	f646 5260 	movw	r2, #28000	; 0x6d60
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	4293      	cmp	r3, r2
 80006aa:	da08      	bge.n	80006be <calculate_temperature+0x9e>
 80006ac:	f646 1278 	movw	r2, #27000	; 0x6978
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	4293      	cmp	r3, r2
 80006b4:	db03      	blt.n	80006be <calculate_temperature+0x9e>
		temperature = 4;
 80006b6:	4b8a      	ldr	r3, [pc, #552]	; (80008e0 <calculate_temperature+0x2c0>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	e174      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[26] && ntc_resistance >= lookupTable[25])
 80006be:	f646 1278 	movw	r2, #27000	; 0x6978
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	4293      	cmp	r3, r2
 80006c6:	da08      	bge.n	80006da <calculate_temperature+0xba>
 80006c8:	f246 5290 	movw	r2, #26000	; 0x6590
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	4293      	cmp	r3, r2
 80006d0:	db03      	blt.n	80006da <calculate_temperature+0xba>
		temperature = 5;
 80006d2:	4b83      	ldr	r3, [pc, #524]	; (80008e0 <calculate_temperature+0x2c0>)
 80006d4:	2205      	movs	r2, #5
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	e166      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[25] && ntc_resistance >= lookupTable[24])
 80006da:	f246 5290 	movw	r2, #26000	; 0x6590
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	4293      	cmp	r3, r2
 80006e2:	da08      	bge.n	80006f6 <calculate_temperature+0xd6>
 80006e4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	4293      	cmp	r3, r2
 80006ec:	db03      	blt.n	80006f6 <calculate_temperature+0xd6>
		temperature = 6;
 80006ee:	4b7c      	ldr	r3, [pc, #496]	; (80008e0 <calculate_temperature+0x2c0>)
 80006f0:	2206      	movs	r2, #6
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	e158      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[24] && ntc_resistance >= lookupTable[23])
 80006f6:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	4293      	cmp	r3, r2
 80006fe:	da08      	bge.n	8000712 <calculate_temperature+0xf2>
 8000700:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	4293      	cmp	r3, r2
 8000708:	db03      	blt.n	8000712 <calculate_temperature+0xf2>
		temperature = 7;
 800070a:	4b75      	ldr	r3, [pc, #468]	; (80008e0 <calculate_temperature+0x2c0>)
 800070c:	2207      	movs	r2, #7
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	e14a      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[23] && ntc_resistance >= lookupTable[22])
 8000712:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	4293      	cmp	r3, r2
 800071a:	da08      	bge.n	800072e <calculate_temperature+0x10e>
 800071c:	f645 12d8 	movw	r2, #23000	; 0x59d8
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	4293      	cmp	r3, r2
 8000724:	db03      	blt.n	800072e <calculate_temperature+0x10e>
		temperature = 8;
 8000726:	4b6e      	ldr	r3, [pc, #440]	; (80008e0 <calculate_temperature+0x2c0>)
 8000728:	2208      	movs	r2, #8
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	e13c      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[22] && ntc_resistance >= lookupTable[21])
 800072e:	f645 12d8 	movw	r2, #23000	; 0x59d8
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	4293      	cmp	r3, r2
 8000736:	da08      	bge.n	800074a <calculate_temperature+0x12a>
 8000738:	f245 52f0 	movw	r2, #22000	; 0x55f0
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	4293      	cmp	r3, r2
 8000740:	db03      	blt.n	800074a <calculate_temperature+0x12a>
		temperature = 9;
 8000742:	4b67      	ldr	r3, [pc, #412]	; (80008e0 <calculate_temperature+0x2c0>)
 8000744:	2209      	movs	r2, #9
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	e12e      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[21] && ntc_resistance >= lookupTable[20])
 800074a:	f245 52f0 	movw	r2, #22000	; 0x55f0
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	4293      	cmp	r3, r2
 8000752:	da08      	bge.n	8000766 <calculate_temperature+0x146>
 8000754:	f245 2208 	movw	r2, #21000	; 0x5208
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	4293      	cmp	r3, r2
 800075c:	db03      	blt.n	8000766 <calculate_temperature+0x146>
		temperature = 10;
 800075e:	4b60      	ldr	r3, [pc, #384]	; (80008e0 <calculate_temperature+0x2c0>)
 8000760:	220a      	movs	r2, #10
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	e120      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[20] && ntc_resistance >= lookupTable[19])
 8000766:	f245 2208 	movw	r2, #21000	; 0x5208
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	4293      	cmp	r3, r2
 800076e:	da08      	bge.n	8000782 <calculate_temperature+0x162>
 8000770:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	4293      	cmp	r3, r2
 8000778:	db03      	blt.n	8000782 <calculate_temperature+0x162>
		temperature = 11;
 800077a:	4b59      	ldr	r3, [pc, #356]	; (80008e0 <calculate_temperature+0x2c0>)
 800077c:	220b      	movs	r2, #11
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e112      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[19] && ntc_resistance >= lookupTable[18])
 8000782:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	4293      	cmp	r3, r2
 800078a:	da08      	bge.n	800079e <calculate_temperature+0x17e>
 800078c:	f644 2238 	movw	r2, #19000	; 0x4a38
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	4293      	cmp	r3, r2
 8000794:	db03      	blt.n	800079e <calculate_temperature+0x17e>
		temperature = 12;
 8000796:	4b52      	ldr	r3, [pc, #328]	; (80008e0 <calculate_temperature+0x2c0>)
 8000798:	220c      	movs	r2, #12
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	e104      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[18] && ntc_resistance >= lookupTable[17])
 800079e:	f644 2238 	movw	r2, #19000	; 0x4a38
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	4293      	cmp	r3, r2
 80007a6:	da08      	bge.n	80007ba <calculate_temperature+0x19a>
 80007a8:	f244 6250 	movw	r2, #18000	; 0x4650
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	4293      	cmp	r3, r2
 80007b0:	db03      	blt.n	80007ba <calculate_temperature+0x19a>
		temperature = 13;
 80007b2:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <calculate_temperature+0x2c0>)
 80007b4:	220d      	movs	r2, #13
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	e0f6      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[17] && ntc_resistance >= lookupTable[16])
 80007ba:	f244 6250 	movw	r2, #18000	; 0x4650
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	4293      	cmp	r3, r2
 80007c2:	da08      	bge.n	80007d6 <calculate_temperature+0x1b6>
 80007c4:	f244 2268 	movw	r2, #17000	; 0x4268
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	4293      	cmp	r3, r2
 80007cc:	db03      	blt.n	80007d6 <calculate_temperature+0x1b6>
		temperature = 14;
 80007ce:	4b44      	ldr	r3, [pc, #272]	; (80008e0 <calculate_temperature+0x2c0>)
 80007d0:	220e      	movs	r2, #14
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	e0e8      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[16] && ntc_resistance >= lookupTable[15])
 80007d6:	f244 2268 	movw	r2, #17000	; 0x4268
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	4293      	cmp	r3, r2
 80007de:	da08      	bge.n	80007f2 <calculate_temperature+0x1d2>
 80007e0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	4293      	cmp	r3, r2
 80007e8:	db03      	blt.n	80007f2 <calculate_temperature+0x1d2>
		temperature = 15;
 80007ea:	4b3d      	ldr	r3, [pc, #244]	; (80008e0 <calculate_temperature+0x2c0>)
 80007ec:	220f      	movs	r2, #15
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	e0da      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[15] && ntc_resistance >= lookupTable[14])
 80007f2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	4293      	cmp	r3, r2
 80007fa:	da08      	bge.n	800080e <calculate_temperature+0x1ee>
 80007fc:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	4293      	cmp	r3, r2
 8000804:	db03      	blt.n	800080e <calculate_temperature+0x1ee>
		temperature = 17;
 8000806:	4b36      	ldr	r3, [pc, #216]	; (80008e0 <calculate_temperature+0x2c0>)
 8000808:	2211      	movs	r2, #17
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e0cc      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[14] && ntc_resistance >= lookupTable[13])
 800080e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	4293      	cmp	r3, r2
 8000816:	da08      	bge.n	800082a <calculate_temperature+0x20a>
 8000818:	f243 62b0 	movw	r2, #14000	; 0x36b0
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	4293      	cmp	r3, r2
 8000820:	db03      	blt.n	800082a <calculate_temperature+0x20a>
		temperature = 19;
 8000822:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <calculate_temperature+0x2c0>)
 8000824:	2213      	movs	r2, #19
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	e0be      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[13] && ntc_resistance >= lookupTable[12])
 800082a:	f243 62b0 	movw	r2, #14000	; 0x36b0
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	4293      	cmp	r3, r2
 8000832:	da08      	bge.n	8000846 <calculate_temperature+0x226>
 8000834:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	4293      	cmp	r3, r2
 800083c:	db03      	blt.n	8000846 <calculate_temperature+0x226>
		temperature = 20;
 800083e:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <calculate_temperature+0x2c0>)
 8000840:	2214      	movs	r2, #20
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	e0b0      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[12] && ntc_resistance >= lookupTable[11])
 8000846:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	4293      	cmp	r3, r2
 800084e:	da08      	bge.n	8000862 <calculate_temperature+0x242>
 8000850:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	4293      	cmp	r3, r2
 8000858:	db03      	blt.n	8000862 <calculate_temperature+0x242>
		temperature = 22;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <calculate_temperature+0x2c0>)
 800085c:	2216      	movs	r2, #22
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	e0a2      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[11] && ntc_resistance >= lookupTable[10])
 8000862:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	4293      	cmp	r3, r2
 800086a:	da08      	bge.n	800087e <calculate_temperature+0x25e>
 800086c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	4293      	cmp	r3, r2
 8000874:	db03      	blt.n	800087e <calculate_temperature+0x25e>
		temperature = 23;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <calculate_temperature+0x2c0>)
 8000878:	2217      	movs	r2, #23
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	e094      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[10] && ntc_resistance >= lookupTable[9])
 800087e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	4293      	cmp	r3, r2
 8000886:	da08      	bge.n	800089a <calculate_temperature+0x27a>
 8000888:	f242 7210 	movw	r2, #10000	; 0x2710
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	4293      	cmp	r3, r2
 8000890:	db03      	blt.n	800089a <calculate_temperature+0x27a>
		temperature = 25;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <calculate_temperature+0x2c0>)
 8000894:	2219      	movs	r2, #25
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	e086      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[9] && ntc_resistance >= lookupTable[8])
 800089a:	f242 7210 	movw	r2, #10000	; 0x2710
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	4293      	cmp	r3, r2
 80008a2:	da08      	bge.n	80008b6 <calculate_temperature+0x296>
 80008a4:	f242 3228 	movw	r2, #9000	; 0x2328
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	4293      	cmp	r3, r2
 80008ac:	db03      	blt.n	80008b6 <calculate_temperature+0x296>
		temperature = 28;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <calculate_temperature+0x2c0>)
 80008b0:	221c      	movs	r2, #28
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	e078      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[8] && ntc_resistance >= lookupTable[7])
 80008b6:	f242 3228 	movw	r2, #9000	; 0x2328
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	4293      	cmp	r3, r2
 80008be:	da11      	bge.n	80008e4 <calculate_temperature+0x2c4>
 80008c0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	4293      	cmp	r3, r2
 80008c8:	db0c      	blt.n	80008e4 <calculate_temperature+0x2c4>
		temperature = 33;
 80008ca:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <calculate_temperature+0x2c0>)
 80008cc:	2221      	movs	r2, #33	; 0x21
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	e06a      	b.n	80009a8 <calculate_temperature+0x388>
 80008d2:	bf00      	nop
 80008d4:	20000c4c 	.word	0x20000c4c
 80008d8:	447fc000 	.word	0x447fc000
 80008dc:	461c4000 	.word	0x461c4000
 80008e0:	20000c50 	.word	0x20000c50
	else if(ntc_resistance < lookupTable[7] && ntc_resistance >= lookupTable[6])
 80008e4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	4293      	cmp	r3, r2
 80008ec:	da08      	bge.n	8000900 <calculate_temperature+0x2e0>
 80008ee:	f641 3258 	movw	r2, #7000	; 0x1b58
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	4293      	cmp	r3, r2
 80008f6:	db03      	blt.n	8000900 <calculate_temperature+0x2e0>
		temperature = 35;
 80008f8:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <calculate_temperature+0x394>)
 80008fa:	2223      	movs	r2, #35	; 0x23
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	e053      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[6] && ntc_resistance >= lookupTable[5])
 8000900:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	4293      	cmp	r3, r2
 8000908:	da08      	bge.n	800091c <calculate_temperature+0x2fc>
 800090a:	f241 7270 	movw	r2, #6000	; 0x1770
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	4293      	cmp	r3, r2
 8000912:	db03      	blt.n	800091c <calculate_temperature+0x2fc>
		temperature = 40;
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <calculate_temperature+0x394>)
 8000916:	2228      	movs	r2, #40	; 0x28
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	e045      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[5] && ntc_resistance >= lookupTable[4])
 800091c:	f241 7270 	movw	r2, #6000	; 0x1770
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	4293      	cmp	r3, r2
 8000924:	da08      	bge.n	8000938 <calculate_temperature+0x318>
 8000926:	f241 3288 	movw	r2, #5000	; 0x1388
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	4293      	cmp	r3, r2
 800092e:	db03      	blt.n	8000938 <calculate_temperature+0x318>
		temperature = 45;
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <calculate_temperature+0x394>)
 8000932:	222d      	movs	r2, #45	; 0x2d
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	e037      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[4] && ntc_resistance >= lookupTable[3])
 8000938:	f241 3288 	movw	r2, #5000	; 0x1388
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	4293      	cmp	r3, r2
 8000940:	da08      	bge.n	8000954 <calculate_temperature+0x334>
 8000942:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	4293      	cmp	r3, r2
 800094a:	db03      	blt.n	8000954 <calculate_temperature+0x334>
		temperature = 50;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <calculate_temperature+0x394>)
 800094e:	2232      	movs	r2, #50	; 0x32
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	e029      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[3] && ntc_resistance >= lookupTable[2])
 8000954:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	4293      	cmp	r3, r2
 800095c:	da08      	bge.n	8000970 <calculate_temperature+0x350>
 800095e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	4293      	cmp	r3, r2
 8000966:	db03      	blt.n	8000970 <calculate_temperature+0x350>
		temperature = 55;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <calculate_temperature+0x394>)
 800096a:	2237      	movs	r2, #55	; 0x37
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	e01b      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[2] && ntc_resistance >= lookupTable[1])
 8000970:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	4293      	cmp	r3, r2
 8000978:	da08      	bge.n	800098c <calculate_temperature+0x36c>
 800097a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	4293      	cmp	r3, r2
 8000982:	db03      	blt.n	800098c <calculate_temperature+0x36c>
		temperature = 75;
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <calculate_temperature+0x394>)
 8000986:	224b      	movs	r2, #75	; 0x4b
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	e00d      	b.n	80009a8 <calculate_temperature+0x388>
	else if(ntc_resistance < lookupTable[1] && ntc_resistance >= lookupTable[0])
 800098c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	4293      	cmp	r3, r2
 8000994:	da08      	bge.n	80009a8 <calculate_temperature+0x388>
 8000996:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	4293      	cmp	r3, r2
 800099e:	db03      	blt.n	80009a8 <calculate_temperature+0x388>
		temperature = 95;
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <calculate_temperature+0x394>)
 80009a2:	225f      	movs	r2, #95	; 0x5f
 80009a4:	601a      	str	r2, [r3, #0]
}
 80009a6:	e7ff      	b.n	80009a8 <calculate_temperature+0x388>
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	20000c50 	.word	0x20000c50

080009b8 <get_temp>:

int get_temp(void){
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
	return temperature;
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <get_temp+0x14>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000c50 	.word	0x20000c50

080009d0 <ir_init>:
 *
 * @return none
 *
 */
void ir_init()
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= MASK(ENABLE_, GPIOA_EN); //Enable the Clock for GPIO A
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <ir_init+0x7c>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <ir_init+0x7c>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~(MASK(INPUT_MODE, PA7_MODER)); //Set the mode to GPIO Input for PA7
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <ir_init+0x80>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a1a      	ldr	r2, [pc, #104]	; (8000a50 <ir_init+0x80>)
 80009e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ea:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR |= MASK(ENABLE_, PUPD_PA7); //Configure a Pull down resistor to PA7
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <ir_init+0x80>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <ir_init+0x80>)
 80009f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f6:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER &= ~(MASK(INPUT_MODE, 4)); //Set the mode to GPIO Input for PA6
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <ir_init+0x80>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <ir_init+0x80>)
 80009fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a02:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR |= MASK(ENABLE_, 5); //Configure a Pull down resistor to PA6 ..2
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <ir_init+0x80>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <ir_init+0x80>)
 8000a0a:	f043 0320 	orr.w	r3, r3, #32
 8000a0e:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER &= ~(MASK(INPUT_MODE, PA5)); //Set the mode to GPIO Input for PA7
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <ir_init+0x80>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <ir_init+0x80>)
 8000a16:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000a1a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= MASK(ENABLE_, PA5); //Set output mode to GPIO5 for buzzer
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <ir_init+0x80>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <ir_init+0x80>)
 8000a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a26:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~MASK(ENABLE_, PA5_SET); //output type register push - pull
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <ir_init+0x80>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <ir_init+0x80>)
 8000a2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a32:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR |= MASK(ENABLE_, PA5); // pull up for buzzer
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <ir_init+0x80>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <ir_init+0x80>)
 8000a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3e:	60d3      	str	r3, [r2, #12]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020000 	.word	0x40020000

08000a54 <check_ir_sensor>:
/*
 * check_ir_sensor
 */
void check_ir_sensor()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af02      	add	r7, sp, #8
	// Check to detect if vehicle is detected only on the left side.
	if(GPIOA->IDR & MASK(ENABLE_, PA7) && (!(GPIOA->IDR & MASK(ENABLE_, 2))))
 8000a5a:	4b6d      	ldr	r3, [pc, #436]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d02b      	beq.n	8000abe <check_ir_sensor+0x6a>
 8000a66:	4b6a      	ldr	r3, [pc, #424]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000a68:	691b      	ldr	r3, [r3, #16]
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d125      	bne.n	8000abe <check_ir_sensor+0x6a>
	{
		Start_Systick_Count();					// Systick starts counting
 8000a72:	f001 fa19 	bl	8001ea8 <Start_Systick_Count>
		vehicle_leftside = true;				// set flag to true
 8000a76:	4b67      	ldr	r3, [pc, #412]	; (8000c14 <check_ir_sensor+0x1c0>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
		GPIOA->BSRR |= MASK(ENABLE_, PA5_SET); 	// Set the buzzer
 8000a7c:	4b64      	ldr	r3, [pc, #400]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a63      	ldr	r2, [pc, #396]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000a82:	f043 0320 	orr.w	r3, r3, #32
 8000a86:	6193      	str	r3, [r2, #24]
		if(clear_count_left)	 				//Once the clear count is enabled
 8000a88:	4b63      	ldr	r3, [pc, #396]	; (8000c18 <check_ir_sensor+0x1c4>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d004      	beq.n	8000a9a <check_ir_sensor+0x46>
		{
			SSD1306_Clear();
 8000a90:	f001 f885 	bl	8001b9e <SSD1306_Clear>
			clear_count_left = 0;
 8000a94:	4b60      	ldr	r3, [pc, #384]	; (8000c18 <check_ir_sensor+0x1c4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
		}
		SSD1306_DrawBitmap(0,0,Left_Alert_NEW, 128, 64, 1);
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	2340      	movs	r3, #64	; 0x40
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	4a5d      	ldr	r2, [pc, #372]	; (8000c1c <check_ir_sensor+0x1c8>)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f000 fdeb 	bl	8001684 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000aae:	f000 ff15 	bl	80018dc <SSD1306_UpdateScreen>
		get_Systick_Count();
 8000ab2:	f001 fa05 	bl	8001ec0 <get_Systick_Count>
		counter = 1;
 8000ab6:	4b5a      	ldr	r3, [pc, #360]	; (8000c20 <check_ir_sensor+0x1cc>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
 8000abc:	e01b      	b.n	8000af6 <check_ir_sensor+0xa2>
	}
	else
	{
		vehicle_leftside = false;
 8000abe:	4b55      	ldr	r3, [pc, #340]	; (8000c14 <check_ir_sensor+0x1c0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
		if(!vehicle_rightside && counter)
 8000ac4:	4b57      	ldr	r3, [pc, #348]	; (8000c24 <check_ir_sensor+0x1d0>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	f083 0301 	eor.w	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d011      	beq.n	8000af6 <check_ir_sensor+0xa2>
 8000ad2:	4b53      	ldr	r3, [pc, #332]	; (8000c20 <check_ir_sensor+0x1cc>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00d      	beq.n	8000af6 <check_ir_sensor+0xa2>
		{
			GPIOA->BSRR |= MASK(ENABLE_, PA5_CLEAR); // Clear the buzzer
 8000ada:	4b4d      	ldr	r3, [pc, #308]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4a4c      	ldr	r2, [pc, #304]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae4:	6193      	str	r3, [r2, #24]
			SSD1306_Clear();
 8000ae6:	f001 f85a 	bl	8001b9e <SSD1306_Clear>
			counter = 0;
 8000aea:	4b4d      	ldr	r3, [pc, #308]	; (8000c20 <check_ir_sensor+0x1cc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
			clear_count_left = 1;					 //
 8000af0:	4b49      	ldr	r3, [pc, #292]	; (8000c18 <check_ir_sensor+0x1c4>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
		}
	}
	// Check to detect if vehicle is detected only on the right side.
	if(GPIOA->IDR & MASK(ENABLE_, 2) && (!(GPIOA->IDR & MASK(ENABLE_, PA7))))
 8000af6:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000af8:	691b      	ldr	r3, [r3, #16]
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d02b      	beq.n	8000b5a <check_ir_sensor+0x106>
 8000b02:	4b43      	ldr	r3, [pc, #268]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000b04:	691b      	ldr	r3, [r3, #16]
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d125      	bne.n	8000b5a <check_ir_sensor+0x106>
	{
		Start_Systick_Count();
 8000b0e:	f001 f9cb 	bl	8001ea8 <Start_Systick_Count>
		vehicle_rightside = true;				// set flag to true
 8000b12:	4b44      	ldr	r3, [pc, #272]	; (8000c24 <check_ir_sensor+0x1d0>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
		GPIOA->BSRR |= MASK(ENABLE_, PA5_SET); 	// Set the buzzer
 8000b18:	4b3d      	ldr	r3, [pc, #244]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a3c      	ldr	r2, [pc, #240]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000b1e:	f043 0320 	orr.w	r3, r3, #32
 8000b22:	6193      	str	r3, [r2, #24]
		if(clear_count_right)
 8000b24:	4b40      	ldr	r3, [pc, #256]	; (8000c28 <check_ir_sensor+0x1d4>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d004      	beq.n	8000b36 <check_ir_sensor+0xe2>
		{
			SSD1306_Clear();					// Clear the screen
 8000b2c:	f001 f837 	bl	8001b9e <SSD1306_Clear>
			clear_count_right = 0;				//
 8000b30:	4b3d      	ldr	r3, [pc, #244]	; (8000c28 <check_ir_sensor+0x1d4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
		}
		SSD1306_DrawBitmap(0,0,Right_Alert_NEW, 128, 64, 1);
 8000b36:	2301      	movs	r3, #1
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	2340      	movs	r3, #64	; 0x40
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	4a3a      	ldr	r2, [pc, #232]	; (8000c2c <check_ir_sensor+0x1d8>)
 8000b42:	2100      	movs	r1, #0
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 fd9d 	bl	8001684 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000b4a:	f000 fec7 	bl	80018dc <SSD1306_UpdateScreen>
		get_Systick_Count();
 8000b4e:	f001 f9b7 	bl	8001ec0 <get_Systick_Count>
		counter = 1;
 8000b52:	4b33      	ldr	r3, [pc, #204]	; (8000c20 <check_ir_sensor+0x1cc>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]
 8000b58:	e01b      	b.n	8000b92 <check_ir_sensor+0x13e>
	}
	else
	{
		vehicle_rightside = false;
 8000b5a:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <check_ir_sensor+0x1d0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
		if(!vehicle_leftside && counter)
 8000b60:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <check_ir_sensor+0x1c0>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	f083 0301 	eor.w	r3, r3, #1
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d011      	beq.n	8000b92 <check_ir_sensor+0x13e>
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <check_ir_sensor+0x1cc>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00d      	beq.n	8000b92 <check_ir_sensor+0x13e>
		{
			GPIOA->BSRR |= MASK(ENABLE_, PA5_CLEAR); // Clear the buzzer
 8000b76:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	4a25      	ldr	r2, [pc, #148]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000b7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b80:	6193      	str	r3, [r2, #24]
			SSD1306_Clear();
 8000b82:	f001 f80c 	bl	8001b9e <SSD1306_Clear>
			counter = 0;
 8000b86:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <check_ir_sensor+0x1cc>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
			clear_count_right = 1;
 8000b8c:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <check_ir_sensor+0x1d4>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
		}
	}
	// Check to detect if vehicle is detected on both sides.
	if(GPIOA->IDR & MASK(ENABLE_, PA7) && GPIOA->IDR & MASK(ENABLE_, 2))
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d022      	beq.n	8000be4 <check_ir_sensor+0x190>
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d01c      	beq.n	8000be4 <check_ir_sensor+0x190>
	{
		Start_Systick_Count();
 8000baa:	f001 f97d 	bl	8001ea8 <Start_Systick_Count>
		GPIOA->BSRR |= MASK(ENABLE_, PA5_SET); //Set the buzzer
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000bb4:	f043 0320 	orr.w	r3, r3, #32
 8000bb8:	6193      	str	r3, [r2, #24]
		SSD1306_DrawBitmap(0,0,Both_Side_Alert_NEW, 128, 64, 1);
 8000bba:	2301      	movs	r3, #1
 8000bbc:	9301      	str	r3, [sp, #4]
 8000bbe:	2340      	movs	r3, #64	; 0x40
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	4a1a      	ldr	r2, [pc, #104]	; (8000c30 <check_ir_sensor+0x1dc>)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f000 fd5b 	bl	8001684 <SSD1306_DrawBitmap>
		SSD1306_UpdateScreen();
 8000bce:	f000 fe85 	bl	80018dc <SSD1306_UpdateScreen>
		get_Systick_Count();
 8000bd2:	f001 f975 	bl	8001ec0 <get_Systick_Count>
		vechile_bothside = true;						// set flag to true
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <check_ir_sensor+0x1e0>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
		clear_count_both = 1;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <check_ir_sensor+0x1e4>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
		{
			SSD1306_Clear();
			clear_count_both = 0;
		}
	}
}
 8000be2:	e011      	b.n	8000c08 <check_ir_sensor+0x1b4>
		vechile_bothside = false;
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <check_ir_sensor+0x1e0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
		GPIOA->BSRR |= MASK(ENABLE_, PA5_CLEAR); //Clear the buzzer
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <check_ir_sensor+0x1bc>)
 8000bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf4:	6193      	str	r3, [r2, #24]
		if(clear_count_both)
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <check_ir_sensor+0x1e4>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d004      	beq.n	8000c08 <check_ir_sensor+0x1b4>
			SSD1306_Clear();
 8000bfe:	f000 ffce 	bl	8001b9e <SSD1306_Clear>
			clear_count_both = 0;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <check_ir_sensor+0x1e4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40020000 	.word	0x40020000
 8000c14:	20000c54 	.word	0x20000c54
 8000c18:	20000011 	.word	0x20000011
 8000c1c:	20000014 	.word	0x20000014
 8000c20:	20000010 	.word	0x20000010
 8000c24:	20000c55 	.word	0x20000c55
 8000c28:	20000012 	.word	0x20000012
 8000c2c:	20000814 	.word	0x20000814
 8000c30:	20000414 	.word	0x20000414
 8000c34:	20000c56 	.word	0x20000c56
 8000c38:	20000013 	.word	0x20000013

08000c3c <return_right_status>:
 * @name return_side_status()
 *
 * @brief Getter functions for the status of each of the flags
 */
bool return_right_status()
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
	return vehicle_rightside;
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <return_right_status+0x14>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000c55 	.word	0x20000c55

08000c54 <return_left_status>:

bool return_left_status()
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
	return vehicle_leftside;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <return_left_status+0x14>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000c54 	.word	0x20000c54

08000c6c <return_both_status>:

bool return_both_status()
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
	return vechile_bothside;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <return_both_status+0x14>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000c56 	.word	0x20000c56

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c88:	f001 f950 	bl	8001f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8c:	f000 f836 	bl	8000cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c90:	f000 f8c0 	bl	8000e14 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c94:	f000 f890 	bl	8000db8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SystemClock_Config();
 8000c98:	f000 f830 	bl	8000cfc <SystemClock_Config>
  SSD1306_Init();
 8000c9c:	f000 fd5a 	bl	8001754 <SSD1306_Init>
  Init_Systick();
 8000ca0:	f001 f8d2 	bl	8001e48 <Init_Systick>
  ir_init();
 8000ca4:	f7ff fe94 	bl	80009d0 <ir_init>
  rtc_init();
 8000ca8:	f000 fb64 	bl	8001374 <rtc_init>
  adc_init();
 8000cac:	f7ff fc58 	bl	8000560 <adc_init>
//  SSD1306_GotoXY (0,0);
//  SSD1306_Puts ("ESD Course project", &Font_7x10, 1);
//  Delay(2000);
  SSD1306_Clear();
 8000cb0:	f000 ff75 	bl	8001b9e <SSD1306_Clear>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  check_ir_sensor();
 8000cb4:	f7ff fece 	bl	8000a54 <check_ir_sensor>
	  //get_Systick_Count();
	  RTC_calculate_date();
 8000cb8:	f000 fc58 	bl	800156c <RTC_calculate_date>
	  RTC_calculate_time();
 8000cbc:	f000 fbf6 	bl	80014ac <RTC_calculate_time>
	  calculate_temperature();
 8000cc0:	f7ff fcae 	bl	8000620 <calculate_temperature>
	  if(!(return_left_status() || return_right_status() || return_both_status()))
 8000cc4:	f7ff ffc6 	bl	8000c54 <return_left_status>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	f083 0301 	eor.w	r3, r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0ef      	beq.n	8000cb4 <main+0x30>
 8000cd4:	f7ff ffb2 	bl	8000c3c <return_right_status>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f083 0301 	eor.w	r3, r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0e7      	beq.n	8000cb4 <main+0x30>
 8000ce4:	f7ff ffc2 	bl	8000c6c <return_both_status>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f083 0301 	eor.w	r3, r3, #1
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d0df      	beq.n	8000cb4 <main+0x30>
	  {
		  Time_Update();
 8000cf4:	f000 f9d4 	bl	80010a0 <Time_Update>
	  check_ir_sensor();
 8000cf8:	e7dc      	b.n	8000cb4 <main+0x30>
	...

08000cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b094      	sub	sp, #80	; 0x50
 8000d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d02:	f107 0320 	add.w	r3, r7, #32
 8000d06:	2230      	movs	r2, #48	; 0x30
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 fdee 	bl	80038ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <SystemClock_Config+0xb4>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	4a21      	ldr	r2, [pc, #132]	; (8000db0 <SystemClock_Config+0xb4>)
 8000d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <SystemClock_Config+0xb4>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <SystemClock_Config+0xb8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <SystemClock_Config+0xb8>)
 8000d46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <SystemClock_Config+0xb8>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d60:	2310      	movs	r3, #16
 8000d62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d68:	f107 0320 	add.w	r3, r7, #32
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 f939 	bl	8002fe4 <HAL_RCC_OscConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d78:	f000 f98c 	bl	8001094 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 fb9c 	bl	80034d4 <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000da2:	f000 f977 	bl	8001094 <Error_Handler>
  }
}
 8000da6:	bf00      	nop
 8000da8:	3750      	adds	r7, #80	; 0x50
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40007000 	.word	0x40007000

08000db8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dbe:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <MX_I2C1_Init+0x54>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dc4:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <MX_I2C1_Init+0x58>)
 8000dc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000df6:	f001 fb7b 	bl	80024f0 <HAL_I2C_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e00:	f000 f948 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000107c 	.word	0x2000107c
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	00061a80 	.word	0x00061a80

08000e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	4b93      	ldr	r3, [pc, #588]	; (800107c <MX_GPIO_Init+0x268>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a92      	ldr	r2, [pc, #584]	; (800107c <MX_GPIO_Init+0x268>)
 8000e34:	f043 0310 	orr.w	r3, r3, #16
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b90      	ldr	r3, [pc, #576]	; (800107c <MX_GPIO_Init+0x268>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	4b8c      	ldr	r3, [pc, #560]	; (800107c <MX_GPIO_Init+0x268>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a8b      	ldr	r2, [pc, #556]	; (800107c <MX_GPIO_Init+0x268>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b89      	ldr	r3, [pc, #548]	; (800107c <MX_GPIO_Init+0x268>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b85      	ldr	r3, [pc, #532]	; (800107c <MX_GPIO_Init+0x268>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a84      	ldr	r2, [pc, #528]	; (800107c <MX_GPIO_Init+0x268>)
 8000e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b82      	ldr	r3, [pc, #520]	; (800107c <MX_GPIO_Init+0x268>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b7e      	ldr	r3, [pc, #504]	; (800107c <MX_GPIO_Init+0x268>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a7d      	ldr	r2, [pc, #500]	; (800107c <MX_GPIO_Init+0x268>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b7b      	ldr	r3, [pc, #492]	; (800107c <MX_GPIO_Init+0x268>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b77      	ldr	r3, [pc, #476]	; (800107c <MX_GPIO_Init+0x268>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a76      	ldr	r2, [pc, #472]	; (800107c <MX_GPIO_Init+0x268>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b74      	ldr	r3, [pc, #464]	; (800107c <MX_GPIO_Init+0x268>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b70      	ldr	r3, [pc, #448]	; (800107c <MX_GPIO_Init+0x268>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a6f      	ldr	r2, [pc, #444]	; (800107c <MX_GPIO_Init+0x268>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b6d      	ldr	r3, [pc, #436]	; (800107c <MX_GPIO_Init+0x268>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	486a      	ldr	r0, [pc, #424]	; (8001080 <MX_GPIO_Init+0x26c>)
 8000ed8:	f001 faf0 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2101      	movs	r1, #1
 8000ee0:	4868      	ldr	r0, [pc, #416]	; (8001084 <MX_GPIO_Init+0x270>)
 8000ee2:	f001 faeb 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000eec:	4866      	ldr	r0, [pc, #408]	; (8001088 <MX_GPIO_Init+0x274>)
 8000eee:	f001 fae5 	bl	80024bc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	485e      	ldr	r0, [pc, #376]	; (8001080 <MX_GPIO_Init+0x26c>)
 8000f06:	f001 f955 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4857      	ldr	r0, [pc, #348]	; (8001080 <MX_GPIO_Init+0x26c>)
 8000f22:	f001 f947 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000f26:	2332      	movs	r3, #50	; 0x32
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f2a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4851      	ldr	r0, [pc, #324]	; (8001080 <MX_GPIO_Init+0x26c>)
 8000f3c:	f001 f93a 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	484b      	ldr	r0, [pc, #300]	; (8001084 <MX_GPIO_Init+0x270>)
 8000f58:	f001 f92c 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4619      	mov	r1, r3
 8000f76:	4843      	ldr	r0, [pc, #268]	; (8001084 <MX_GPIO_Init+0x270>)
 8000f78:	f001 f91c 	bl	80021b4 <HAL_GPIO_Init>
//  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f8c:	2306      	movs	r3, #6
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	483d      	ldr	r0, [pc, #244]	; (800108c <MX_GPIO_Init+0x278>)
 8000f98:	f001 f90c 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f9c:	23e0      	movs	r3, #224	; 0xe0
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fac:	2305      	movs	r3, #5
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4835      	ldr	r0, [pc, #212]	; (800108c <MX_GPIO_Init+0x278>)
 8000fb8:	f001 f8fc 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000fbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fce:	2305      	movs	r3, #5
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	482d      	ldr	r0, [pc, #180]	; (8001090 <MX_GPIO_Init+0x27c>)
 8000fda:	f001 f8eb 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fde:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000fe2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4824      	ldr	r0, [pc, #144]	; (8001088 <MX_GPIO_Init+0x274>)
 8000ff8:	f001 f8dc 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ffc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800100e:	2306      	movs	r3, #6
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	481a      	ldr	r0, [pc, #104]	; (8001084 <MX_GPIO_Init+0x270>)
 800101a:	f001 f8cb 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800101e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4816      	ldr	r0, [pc, #88]	; (800108c <MX_GPIO_Init+0x278>)
 8001034:	f001 f8be 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001038:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800104a:	230a      	movs	r3, #10
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_GPIO_Init+0x278>)
 8001056:	f001 f8ad 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800105a:	2320      	movs	r3, #32
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4806      	ldr	r0, [pc, #24]	; (8001088 <MX_GPIO_Init+0x274>)
 800106e:	f001 f8a1 	bl	80021b4 <HAL_GPIO_Init>

}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	; 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40021000 	.word	0x40021000
 8001084:	40020800 	.word	0x40020800
 8001088:	40020c00 	.word	0x40020c00
 800108c:	40020000 	.word	0x40020000
 8001090:	40020400 	.word	0x40020400

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	e7fe      	b.n	800109c <Error_Handler+0x8>
	...

080010a0 <Time_Update>:
static char temp_tens  = '\0';
static char temp_ones = '\0';

static char date_string[] ={'0','4','/','3','0','/','2','3','\0'};
static char temp_string[] = {'2','7','C','\0'};
void Time_Update(void){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

	SSD1306_GotoXY (COLON_POSITION,TIME_ROW);
 80010a4:	2123      	movs	r1, #35	; 0x23
 80010a6:	203a      	movs	r0, #58	; 0x3a
 80010a8:	f000 fcbe 	bl	8001a28 <SSD1306_GotoXY>
	SSD1306_Putc(':', &Font_16x26, 1);
 80010ac:	2201      	movs	r2, #1
 80010ae:	4999      	ldr	r1, [pc, #612]	; (8001314 <Time_Update+0x274>)
 80010b0:	203a      	movs	r0, #58	; 0x3a
 80010b2:	f000 fccf 	bl	8001a54 <SSD1306_Putc>
	//SSD1306_UpdateScreen(); //display

	/*Calculation to seperate the 10s with the ones*/
		prev_min_val = get_minutes();
 80010b6:	f000 faa9 	bl	800160c <get_minutes>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b96      	ldr	r3, [pc, #600]	; (8001318 <Time_Update+0x278>)
 80010c0:	701a      	strb	r2, [r3, #0]

		min_ones = (prev_min_val % 10) + '0';
 80010c2:	4b95      	ldr	r3, [pc, #596]	; (8001318 <Time_Update+0x278>)
 80010c4:	781a      	ldrb	r2, [r3, #0]
 80010c6:	4b95      	ldr	r3, [pc, #596]	; (800131c <Time_Update+0x27c>)
 80010c8:	fba3 1302 	umull	r1, r3, r3, r2
 80010cc:	08d9      	lsrs	r1, r3, #3
 80010ce:	460b      	mov	r3, r1
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3330      	adds	r3, #48	; 0x30
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b90      	ldr	r3, [pc, #576]	; (8001320 <Time_Update+0x280>)
 80010e0:	701a      	strb	r2, [r3, #0]

		min_tens = (prev_min_val / 10) + '0';
 80010e2:	4b8d      	ldr	r3, [pc, #564]	; (8001318 <Time_Update+0x278>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4a8d      	ldr	r2, [pc, #564]	; (800131c <Time_Update+0x27c>)
 80010e8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ec:	08db      	lsrs	r3, r3, #3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	3330      	adds	r3, #48	; 0x30
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b8b      	ldr	r3, [pc, #556]	; (8001324 <Time_Update+0x284>)
 80010f6:	701a      	strb	r2, [r3, #0]

		SSD1306_GotoXY(MIN_TENS_POSITION, TIME_ROW);
 80010f8:	2123      	movs	r1, #35	; 0x23
 80010fa:	2048      	movs	r0, #72	; 0x48
 80010fc:	f000 fc94 	bl	8001a28 <SSD1306_GotoXY>
		SSD1306_Putc(min_tens, &Font_16x26, 1);
 8001100:	4b88      	ldr	r3, [pc, #544]	; (8001324 <Time_Update+0x284>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2201      	movs	r2, #1
 8001106:	4983      	ldr	r1, [pc, #524]	; (8001314 <Time_Update+0x274>)
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fca3 	bl	8001a54 <SSD1306_Putc>
		//SSD1306_UpdateScreen();

		SSD1306_GotoXY(MIN_ONES_POSITION, TIME_ROW);
 800110e:	2123      	movs	r1, #35	; 0x23
 8001110:	2056      	movs	r0, #86	; 0x56
 8001112:	f000 fc89 	bl	8001a28 <SSD1306_GotoXY>
		SSD1306_Putc(min_ones, &Font_16x26, 1);
 8001116:	4b82      	ldr	r3, [pc, #520]	; (8001320 <Time_Update+0x280>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2201      	movs	r2, #1
 800111c:	497d      	ldr	r1, [pc, #500]	; (8001314 <Time_Update+0x274>)
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fc98 	bl	8001a54 <SSD1306_Putc>
		//SSD1306_UpdateScreen();

		/*Calculation to seperate the 10s with the ones*/
		prev_hour_val = get_hours();
 8001124:	f000 fa7e 	bl	8001624 <get_hours>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4b7e      	ldr	r3, [pc, #504]	; (8001328 <Time_Update+0x288>)
 800112e:	701a      	strb	r2, [r3, #0]

		hours_ones = (prev_hour_val % 10)+ '0';
 8001130:	4b7d      	ldr	r3, [pc, #500]	; (8001328 <Time_Update+0x288>)
 8001132:	781a      	ldrb	r2, [r3, #0]
 8001134:	4b79      	ldr	r3, [pc, #484]	; (800131c <Time_Update+0x27c>)
 8001136:	fba3 1302 	umull	r1, r3, r3, r2
 800113a:	08d9      	lsrs	r1, r3, #3
 800113c:	460b      	mov	r3, r1
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	3330      	adds	r3, #48	; 0x30
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b77      	ldr	r3, [pc, #476]	; (800132c <Time_Update+0x28c>)
 800114e:	701a      	strb	r2, [r3, #0]

		hours_tens = (prev_hour_val / 10) + '0';
 8001150:	4b75      	ldr	r3, [pc, #468]	; (8001328 <Time_Update+0x288>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4a71      	ldr	r2, [pc, #452]	; (800131c <Time_Update+0x27c>)
 8001156:	fba2 2303 	umull	r2, r3, r2, r3
 800115a:	08db      	lsrs	r3, r3, #3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	3330      	adds	r3, #48	; 0x30
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b73      	ldr	r3, [pc, #460]	; (8001330 <Time_Update+0x290>)
 8001164:	701a      	strb	r2, [r3, #0]

		SSD1306_GotoXY(HOURS_TENS_POSITION, TIME_ROW);
 8001166:	2123      	movs	r1, #35	; 0x23
 8001168:	201e      	movs	r0, #30
 800116a:	f000 fc5d 	bl	8001a28 <SSD1306_GotoXY>
		SSD1306_Putc(hours_tens, &Font_16x26, 1);
 800116e:	4b70      	ldr	r3, [pc, #448]	; (8001330 <Time_Update+0x290>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2201      	movs	r2, #1
 8001174:	4967      	ldr	r1, [pc, #412]	; (8001314 <Time_Update+0x274>)
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fc6c 	bl	8001a54 <SSD1306_Putc>
		//SSD1306_UpdateScreen();

		SSD1306_GotoXY(HOURS_ONES_POSITION, TIME_ROW);
 800117c:	2123      	movs	r1, #35	; 0x23
 800117e:	202c      	movs	r0, #44	; 0x2c
 8001180:	f000 fc52 	bl	8001a28 <SSD1306_GotoXY>
		SSD1306_Putc(hours_ones, &Font_16x26, 1);
 8001184:	4b69      	ldr	r3, [pc, #420]	; (800132c <Time_Update+0x28c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2201      	movs	r2, #1
 800118a:	4962      	ldr	r1, [pc, #392]	; (8001314 <Time_Update+0x274>)
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fc61 	bl	8001a54 <SSD1306_Putc>
		//SSD1306_UpdateScreen();

		month_val = get_month();
 8001192:	f000 fa5f 	bl	8001654 <get_month>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b66      	ldr	r3, [pc, #408]	; (8001334 <Time_Update+0x294>)
 800119c:	701a      	strb	r2, [r3, #0]

		month_tens = (month_val / 10) + '0';
 800119e:	4b65      	ldr	r3, [pc, #404]	; (8001334 <Time_Update+0x294>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4a5e      	ldr	r2, [pc, #376]	; (800131c <Time_Update+0x27c>)
 80011a4:	fba2 2303 	umull	r2, r3, r2, r3
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	3330      	adds	r3, #48	; 0x30
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b61      	ldr	r3, [pc, #388]	; (8001338 <Time_Update+0x298>)
 80011b2:	701a      	strb	r2, [r3, #0]
		date_string[0] = month_tens;
 80011b4:	4b60      	ldr	r3, [pc, #384]	; (8001338 <Time_Update+0x298>)
 80011b6:	781a      	ldrb	r2, [r3, #0]
 80011b8:	4b60      	ldr	r3, [pc, #384]	; (800133c <Time_Update+0x29c>)
 80011ba:	701a      	strb	r2, [r3, #0]

		month_ones = (month_val % 10)+ '0';
 80011bc:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <Time_Update+0x294>)
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	4b56      	ldr	r3, [pc, #344]	; (800131c <Time_Update+0x27c>)
 80011c2:	fba3 1302 	umull	r1, r3, r3, r2
 80011c6:	08d9      	lsrs	r1, r3, #3
 80011c8:	460b      	mov	r3, r1
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	3330      	adds	r3, #48	; 0x30
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b59      	ldr	r3, [pc, #356]	; (8001340 <Time_Update+0x2a0>)
 80011da:	701a      	strb	r2, [r3, #0]
		date_string[1] = month_ones;
 80011dc:	4b58      	ldr	r3, [pc, #352]	; (8001340 <Time_Update+0x2a0>)
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	4b56      	ldr	r3, [pc, #344]	; (800133c <Time_Update+0x29c>)
 80011e2:	705a      	strb	r2, [r3, #1]

		date_val = get_day();
 80011e4:	f000 fa42 	bl	800166c <get_day>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b55      	ldr	r3, [pc, #340]	; (8001344 <Time_Update+0x2a4>)
 80011ee:	701a      	strb	r2, [r3, #0]

		date_tens = (date_val / 10) + '0';
 80011f0:	4b54      	ldr	r3, [pc, #336]	; (8001344 <Time_Update+0x2a4>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4a49      	ldr	r2, [pc, #292]	; (800131c <Time_Update+0x27c>)
 80011f6:	fba2 2303 	umull	r2, r3, r2, r3
 80011fa:	08db      	lsrs	r3, r3, #3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	3330      	adds	r3, #48	; 0x30
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b51      	ldr	r3, [pc, #324]	; (8001348 <Time_Update+0x2a8>)
 8001204:	701a      	strb	r2, [r3, #0]
		date_string[3] = date_tens;
 8001206:	4b50      	ldr	r3, [pc, #320]	; (8001348 <Time_Update+0x2a8>)
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	4b4c      	ldr	r3, [pc, #304]	; (800133c <Time_Update+0x29c>)
 800120c:	70da      	strb	r2, [r3, #3]

		date_ones = (date_val % 10)+ '0';
 800120e:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <Time_Update+0x2a4>)
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	4b42      	ldr	r3, [pc, #264]	; (800131c <Time_Update+0x27c>)
 8001214:	fba3 1302 	umull	r1, r3, r3, r2
 8001218:	08d9      	lsrs	r1, r3, #3
 800121a:	460b      	mov	r3, r1
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	3330      	adds	r3, #48	; 0x30
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b48      	ldr	r3, [pc, #288]	; (800134c <Time_Update+0x2ac>)
 800122c:	701a      	strb	r2, [r3, #0]
		date_string[4] = date_ones;
 800122e:	4b47      	ldr	r3, [pc, #284]	; (800134c <Time_Update+0x2ac>)
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	4b42      	ldr	r3, [pc, #264]	; (800133c <Time_Update+0x29c>)
 8001234:	711a      	strb	r2, [r3, #4]

		year_val = get_year();
 8001236:	f000 fa01 	bl	800163c <get_year>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	4b44      	ldr	r3, [pc, #272]	; (8001350 <Time_Update+0x2b0>)
 8001240:	701a      	strb	r2, [r3, #0]

		year_tens = (year_val / 10) + '0';
 8001242:	4b43      	ldr	r3, [pc, #268]	; (8001350 <Time_Update+0x2b0>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4a35      	ldr	r2, [pc, #212]	; (800131c <Time_Update+0x27c>)
 8001248:	fba2 2303 	umull	r2, r3, r2, r3
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	3330      	adds	r3, #48	; 0x30
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b3f      	ldr	r3, [pc, #252]	; (8001354 <Time_Update+0x2b4>)
 8001256:	701a      	strb	r2, [r3, #0]
		date_string[6] = year_tens;
 8001258:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <Time_Update+0x2b4>)
 800125a:	781a      	ldrb	r2, [r3, #0]
 800125c:	4b37      	ldr	r3, [pc, #220]	; (800133c <Time_Update+0x29c>)
 800125e:	719a      	strb	r2, [r3, #6]

		year_ones = (year_val % 10)+ '0';
 8001260:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <Time_Update+0x2b0>)
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	4b2d      	ldr	r3, [pc, #180]	; (800131c <Time_Update+0x27c>)
 8001266:	fba3 1302 	umull	r1, r3, r3, r2
 800126a:	08d9      	lsrs	r1, r3, #3
 800126c:	460b      	mov	r3, r1
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	b2db      	uxtb	r3, r3
 8001278:	3330      	adds	r3, #48	; 0x30
 800127a:	b2da      	uxtb	r2, r3
 800127c:	4b36      	ldr	r3, [pc, #216]	; (8001358 <Time_Update+0x2b8>)
 800127e:	701a      	strb	r2, [r3, #0]
		date_string[7] = year_ones;
 8001280:	4b35      	ldr	r3, [pc, #212]	; (8001358 <Time_Update+0x2b8>)
 8001282:	781a      	ldrb	r2, [r3, #0]
 8001284:	4b2d      	ldr	r3, [pc, #180]	; (800133c <Time_Update+0x29c>)
 8001286:	71da      	strb	r2, [r3, #7]

		SSD1306_GotoXY (DATE_COLUMN,DATE_ROW);
 8001288:	2100      	movs	r1, #0
 800128a:	2000      	movs	r0, #0
 800128c:	f000 fbcc 	bl	8001a28 <SSD1306_GotoXY>
		SSD1306_Puts (date_string, &Font_7x10, 1);
 8001290:	2201      	movs	r2, #1
 8001292:	4932      	ldr	r1, [pc, #200]	; (800135c <Time_Update+0x2bc>)
 8001294:	4829      	ldr	r0, [pc, #164]	; (800133c <Time_Update+0x29c>)
 8001296:	f000 fc5d 	bl	8001b54 <SSD1306_Puts>
		//SSD1306_UpdateScreen();

		temp_val = get_temp();
 800129a:	f7ff fb8d 	bl	80009b8 <get_temp>
 800129e:	4603      	mov	r3, r0
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <Time_Update+0x2c0>)
 80012a4:	701a      	strb	r2, [r3, #0]

		temp_tens = (temp_val / 10) + '0';
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <Time_Update+0x2c0>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <Time_Update+0x27c>)
 80012ac:	fba2 2303 	umull	r2, r3, r2, r3
 80012b0:	08db      	lsrs	r3, r3, #3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	3330      	adds	r3, #48	; 0x30
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <Time_Update+0x2c4>)
 80012ba:	701a      	strb	r2, [r3, #0]
		temp_string[0] = temp_tens;
 80012bc:	4b29      	ldr	r3, [pc, #164]	; (8001364 <Time_Update+0x2c4>)
 80012be:	781a      	ldrb	r2, [r3, #0]
 80012c0:	4b29      	ldr	r3, [pc, #164]	; (8001368 <Time_Update+0x2c8>)
 80012c2:	701a      	strb	r2, [r3, #0]

		temp_ones = (temp_val % 10) + '0';
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <Time_Update+0x2c0>)
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <Time_Update+0x27c>)
 80012ca:	fba3 1302 	umull	r1, r3, r3, r2
 80012ce:	08d9      	lsrs	r1, r3, #3
 80012d0:	460b      	mov	r3, r1
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	3330      	adds	r3, #48	; 0x30
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <Time_Update+0x2cc>)
 80012e2:	701a      	strb	r2, [r3, #0]
		temp_string[1] = temp_ones;
 80012e4:	4b21      	ldr	r3, [pc, #132]	; (800136c <Time_Update+0x2cc>)
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <Time_Update+0x2c8>)
 80012ea:	705a      	strb	r2, [r3, #1]

		SSD1306_GotoXY (TEMP_COLUMN,TEMP_ROW);
 80012ec:	2100      	movs	r1, #0
 80012ee:	2060      	movs	r0, #96	; 0x60
 80012f0:	f000 fb9a 	bl	8001a28 <SSD1306_GotoXY>
		SSD1306_Puts (temp_string, &Font_7x10, 1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	4919      	ldr	r1, [pc, #100]	; (800135c <Time_Update+0x2bc>)
 80012f8:	481b      	ldr	r0, [pc, #108]	; (8001368 <Time_Update+0x2c8>)
 80012fa:	f000 fc2b 	bl	8001b54 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80012fe:	f000 faed 	bl	80018dc <SSD1306_UpdateScreen>
		ADC1->CR2 |= MASK(ENABLE_, START_CONVERSION); //Start the next conversion
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <Time_Update+0x2d0>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	4a1a      	ldr	r2, [pc, #104]	; (8001370 <Time_Update+0x2d0>)
 8001308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800130c:	6093      	str	r3, [r2, #8]
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000008 	.word	0x20000008
 8001318:	20000c57 	.word	0x20000c57
 800131c:	cccccccd 	.word	0xcccccccd
 8001320:	20000c59 	.word	0x20000c59
 8001324:	20000c5a 	.word	0x20000c5a
 8001328:	20000c58 	.word	0x20000c58
 800132c:	20000c5b 	.word	0x20000c5b
 8001330:	20000c5c 	.word	0x20000c5c
 8001334:	20000c5e 	.word	0x20000c5e
 8001338:	20000c63 	.word	0x20000c63
 800133c:	20000c14 	.word	0x20000c14
 8001340:	20000c62 	.word	0x20000c62
 8001344:	20000c5d 	.word	0x20000c5d
 8001348:	20000c61 	.word	0x20000c61
 800134c:	20000c60 	.word	0x20000c60
 8001350:	20000c5f 	.word	0x20000c5f
 8001354:	20000c65 	.word	0x20000c65
 8001358:	20000c64 	.word	0x20000c64
 800135c:	20000000 	.word	0x20000000
 8001360:	20000c66 	.word	0x20000c66
 8001364:	20000c67 	.word	0x20000c67
 8001368:	20000c20 	.word	0x20000c20
 800136c:	20000c68 	.word	0x20000c68
 8001370:	40012000 	.word	0x40012000

08001374 <rtc_init>:
static uint8_t Day = 0;
static uint8_t Year = 0;
volatile static int test = 0;

void rtc_init()
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= MASK(ENABLE_,POWER_INTERFACE_CLK); // Enable clock for power interface
 8001378:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <rtc_init+0x12c>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <rtc_init+0x12c>)
 800137e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001382:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= MASK(ENABLE_,NO_WRITE_PROTECT); // Disable the write protect to RTC
 8001384:	4b47      	ldr	r3, [pc, #284]	; (80014a4 <rtc_init+0x130>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a46      	ldr	r2, [pc, #280]	; (80014a4 <rtc_init+0x130>)
 800138a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138e:	6013      	str	r3, [r2, #0]
	RCC->CSR |= MASK(ENABLE_,LOW_SPEED_OSC); // Enable LSI RC oscillator ON
 8001390:	4b43      	ldr	r3, [pc, #268]	; (80014a0 <rtc_init+0x12c>)
 8001392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001394:	4a42      	ldr	r2, [pc, #264]	; (80014a0 <rtc_init+0x12c>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6753      	str	r3, [r2, #116]	; 0x74
	while(!(RCC->CSR & MASK(ENABLE_,LOW_SPEED_OSC_READY))); // Wait till the LSI RC oscillator is ON
 800139c:	bf00      	nop
 800139e:	4b40      	ldr	r3, [pc, #256]	; (80014a0 <rtc_init+0x12c>)
 80013a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f9      	beq.n	800139e <rtc_init+0x2a>
	RCC->BDCR |= MASK(ENABLE_,RTC_CLOCK) | MASK(ENABLE_,LSI_CLOCK); // Enable clock for RTC module and select LSI as clock source
 80013aa:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <rtc_init+0x12c>)
 80013ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ae:	4a3c      	ldr	r2, [pc, #240]	; (80014a0 <rtc_init+0x12c>)
 80013b0:	f443 4302 	orr.w	r3, r3, #33280	; 0x8200
 80013b4:	6713      	str	r3, [r2, #112]	; 0x70
	RTC->WPR |= 0xCA; // Unlock the write protection by using the key
 80013b6:	4b3c      	ldr	r3, [pc, #240]	; (80014a8 <rtc_init+0x134>)
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	4a3b      	ldr	r2, [pc, #236]	; (80014a8 <rtc_init+0x134>)
 80013bc:	f043 03ca 	orr.w	r3, r3, #202	; 0xca
 80013c0:	6253      	str	r3, [r2, #36]	; 0x24
	RTC->WPR |= 0x53; // Unlock the write protection by using the key
 80013c2:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <rtc_init+0x134>)
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	4a38      	ldr	r2, [pc, #224]	; (80014a8 <rtc_init+0x134>)
 80013c8:	f043 0353 	orr.w	r3, r3, #83	; 0x53
 80013cc:	6253      	str	r3, [r2, #36]	; 0x24
	RTC->ISR |= MASK(ENABLE_,INIT_MODE); // The calendar counter is stopped to allow update
 80013ce:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <rtc_init+0x134>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	4a35      	ldr	r2, [pc, #212]	; (80014a8 <rtc_init+0x134>)
 80013d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d8:	60d3      	str	r3, [r2, #12]
	while(!(RTC -> ISR & RTC_ISR_INITF)); //wait till its set
 80013da:	bf00      	nop
 80013dc:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <rtc_init+0x134>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f9      	beq.n	80013dc <rtc_init+0x68>
	RTC -> PRER = RESET_MASK;
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <rtc_init+0x134>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
	RTC->PRER |= PREDIV_S; //Set the prescalar to bring down the LSI frequency 1Hz
 80013ee:	4b2e      	ldr	r3, [pc, #184]	; (80014a8 <rtc_init+0x134>)
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	4a2d      	ldr	r2, [pc, #180]	; (80014a8 <rtc_init+0x134>)
 80013f4:	f043 03f9 	orr.w	r3, r3, #249	; 0xf9
 80013f8:	6113      	str	r3, [r2, #16]
	RTC->PRER |= PREDIV_A<<16;
 80013fa:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <rtc_init+0x134>)
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	4a2a      	ldr	r2, [pc, #168]	; (80014a8 <rtc_init+0x134>)
 8001400:	f443 03fe 	orr.w	r3, r3, #8323072	; 0x7f0000
 8001404:	6113      	str	r3, [r2, #16]
	//Set the TR and DR registers for date and time
	RTC->TR &= ~(CLEAR_MASK);
 8001406:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <rtc_init+0x134>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <rtc_init+0x134>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
	RTC->TR |= (0b000 << 12); //minutes msb is 4
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <rtc_init+0x134>)
 8001412:	4a25      	ldr	r2, [pc, #148]	; (80014a8 <rtc_init+0x134>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6013      	str	r3, [r2, #0]
	RTC->TR |= (0b000 << 16); //hours lsb is 7
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <rtc_init+0x134>)
 800141a:	4a23      	ldr	r2, [pc, #140]	; (80014a8 <rtc_init+0x134>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6013      	str	r3, [r2, #0]
	RTC->TR |= (0b10 << 20); //hours msb is 1 i.e. 17.40.0
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <rtc_init+0x134>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a20      	ldr	r2, [pc, #128]	; (80014a8 <rtc_init+0x134>)
 8001426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800142a:	6013      	str	r3, [r2, #0]
	RTC->DR &= ~(CLEAR_MASK);
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <rtc_init+0x134>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <rtc_init+0x134>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
	RTC->DR |= MASK(DATE_ONES,DATE_ONES_POS); //date ones is 0
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <rtc_init+0x134>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4a1b      	ldr	r2, [pc, #108]	; (80014a8 <rtc_init+0x134>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6053      	str	r3, [r2, #4]
	RTC->DR |= MASK(DATE_TENS,DATE_TENS_POS); //date tens is 3
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <rtc_init+0x134>)
 8001444:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <rtc_init+0x134>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	6053      	str	r3, [r2, #4]
	RTC->DR |= MASK(MONTH_ONES,MONTH_ONES_POS); //month ones is 4
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <rtc_init+0x134>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a16      	ldr	r2, [pc, #88]	; (80014a8 <rtc_init+0x134>)
 8001450:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001454:	6053      	str	r3, [r2, #4]
	RTC->DR |= MASK(YEAR_ONES,YEAR_ONES_POS); //years once is 3
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <rtc_init+0x134>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <rtc_init+0x134>)
 800145c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001460:	6053      	str	r3, [r2, #4]
	RTC->DR |= MASK(YEARS_TENS,YEARS_TENS_POS); //years tens position is 2
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <rtc_init+0x134>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <rtc_init+0x134>)
 8001468:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800146c:	6053      	str	r3, [r2, #4]
	RTC->CR |= MASK(ENABLE_,BYPASS); //Calendar values are taken directly from the calendar counters.
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <rtc_init+0x134>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <rtc_init+0x134>)
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~MASK(ENABLE_,INIT_MODE); //Clear the Init bit to exit Initialization mode
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <rtc_init+0x134>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <rtc_init+0x134>)
 8001480:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001484:	60d3      	str	r3, [r2, #12]
	PWR->CR &= ~MASK(ENABLE_,NO_WRITE_PROTECT); //Enable the Write protect back
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <rtc_init+0x130>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <rtc_init+0x130>)
 800148c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	6013      	str	r3, [r2, #0]
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000
 80014a8:	40002800 	.word	0x40002800

080014ac <RTC_calculate_time>:

void RTC_calculate_time (void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
	uint8_t min = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]
	uint8_t hrs = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	71bb      	strb	r3, [r7, #6]
	Seconds=(((RTC->TR & 0x7f) >> 4)*10)+(RTC->TR & 0xf);
 80014ba:	4b28      	ldr	r3, [pc, #160]	; (800155c <RTC_calculate_time+0xb0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b22      	ldr	r3, [pc, #136]	; (800155c <RTC_calculate_time+0xb0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	4413      	add	r3, r2
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <RTC_calculate_time+0xb4>)
 80014e4:	701a      	strb	r2, [r3, #0]
	min=((RTC->TR & 0x7f00) >> 8);
 80014e6:	4b1d      	ldr	r3, [pc, #116]	; (800155c <RTC_calculate_time+0xb0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	0a1b      	lsrs	r3, r3, #8
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014f2:	71fb      	strb	r3, [r7, #7]
	Minutes=(((min & 0x7f)>>4)*10)+(min & 0xf);
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	111b      	asrs	r3, r3, #4
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4413      	add	r3, r2
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <RTC_calculate_time+0xb8>)
 8001518:	701a      	strb	r2, [r3, #0]
	hrs=((RTC->TR & 0x7f0000) >> 16);
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <RTC_calculate_time+0xb0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	0c1b      	lsrs	r3, r3, #16
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001526:	71bb      	strb	r3, [r7, #6]
	Hours=(((hrs & 0x7f)>>4)*10)+(hrs & 0xf);
 8001528:	79bb      	ldrb	r3, [r7, #6]
 800152a:	111b      	asrs	r3, r3, #4
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4413      	add	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	b2da      	uxtb	r2, r3
 800153e:	79bb      	ldrb	r3, [r7, #6]
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4413      	add	r3, r2
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <RTC_calculate_time+0xbc>)
 800154c:	701a      	strb	r2, [r3, #0]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40002800 	.word	0x40002800
 8001560:	20000c6b 	.word	0x20000c6b
 8001564:	20000c6a 	.word	0x20000c6a
 8001568:	20000c69 	.word	0x20000c69

0800156c <RTC_calculate_date>:

void RTC_calculate_date(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
	Year=((RTC->DR >> 20)*10) + ((RTC->DR >>16) & 0xf);
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <RTC_calculate_date+0x90>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	0d1b      	lsrs	r3, r3, #20
 8001576:	b2db      	uxtb	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	4413      	add	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <RTC_calculate_date+0x90>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	0c1b      	lsrs	r3, r3, #16
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4413      	add	r3, r2
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <RTC_calculate_date+0x94>)
 8001596:	701a      	strb	r2, [r3, #0]
	Month=((RTC->DR >> 12) & 1)*10 + ((RTC->DR >>8) & 0xf);
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <RTC_calculate_date+0x90>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	0b1b      	lsrs	r3, r3, #12
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	0092      	lsls	r2, r2, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <RTC_calculate_date+0x90>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4413      	add	r3, r2
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <RTC_calculate_date+0x98>)
 80015c4:	701a      	strb	r2, [r3, #0]
	Day=((RTC->DR >> 4) & 3)*10 + (RTC->DR & 0xf);
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <RTC_calculate_date+0x90>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	0092      	lsls	r2, r2, #2
 80015d8:	4413      	add	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <RTC_calculate_date+0x90>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	f003 030f 	and.w	r3, r3, #15
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <RTC_calculate_date+0x9c>)
 80015f0:	701a      	strb	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40002800 	.word	0x40002800
 8001600:	20000c6e 	.word	0x20000c6e
 8001604:	20000c6c 	.word	0x20000c6c
 8001608:	20000c6d 	.word	0x20000c6d

0800160c <get_minutes>:

/*
 * Getter functions for
 */
uint8_t get_minutes()
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
	return Minutes;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <get_minutes+0x14>)
 8001612:	781b      	ldrb	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000c6a 	.word	0x20000c6a

08001624 <get_hours>:

uint8_t get_hours()
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	return Hours;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <get_hours+0x14>)
 800162a:	781b      	ldrb	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000c69 	.word	0x20000c69

0800163c <get_year>:

uint8_t get_year()
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
	return Year;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <get_year+0x14>)
 8001642:	781b      	ldrb	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000c6e 	.word	0x20000c6e

08001654 <get_month>:

uint8_t get_month()
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
	return Month;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <get_month+0x14>)
 800165a:	781b      	ldrb	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000c6c 	.word	0x20000c6c

0800166c <get_day>:

uint8_t get_day()
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
	return Day;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <get_day+0x14>)
 8001672:	781b      	ldrb	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000c6d 	.word	0x20000c6d

08001684 <SSD1306_DrawBitmap>:
 * 		(5)h 		- The height of the bitmap image.
 * 		(6)color    - Color of the Image
 *
 */
void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60ba      	str	r2, [r7, #8]
 800168c:	461a      	mov	r2, r3
 800168e:	4603      	mov	r3, r0
 8001690:	81fb      	strh	r3, [r7, #14]
 8001692:	460b      	mov	r3, r1
 8001694:	81bb      	strh	r3, [r7, #12]
 8001696:	4613      	mov	r3, r2
 8001698:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	3307      	adds	r3, #7
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da00      	bge.n	80016a6 <SSD1306_DrawBitmap+0x22>
 80016a4:	3307      	adds	r3, #7
 80016a6:	10db      	asrs	r3, r3, #3
 80016a8:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	82bb      	strh	r3, [r7, #20]
 80016b2:	e044      	b.n	800173e <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	827b      	strh	r3, [r7, #18]
 80016b8:	e02f      	b.n	800171a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80016ba:	8a7b      	ldrh	r3, [r7, #18]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	75fb      	strb	r3, [r7, #23]
 80016ca:	e012      	b.n	80016f2 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80016cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016d0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80016d4:	fb02 f203 	mul.w	r2, r2, r3
 80016d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	da00      	bge.n	80016e2 <SSD1306_DrawBitmap+0x5e>
 80016e0:	3307      	adds	r3, #7
 80016e2:	10db      	asrs	r3, r3, #3
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	4413      	add	r3, r2
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80016f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	da09      	bge.n	800170e <SSD1306_DrawBitmap+0x8a>
 80016fa:	89fa      	ldrh	r2, [r7, #14]
 80016fc:	8a7b      	ldrh	r3, [r7, #18]
 80016fe:	4413      	add	r3, r2
 8001700:	b29b      	uxth	r3, r3
 8001702:	89b9      	ldrh	r1, [r7, #12]
 8001704:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f000 f92d 	bl	8001968 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800170e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001712:	b29b      	uxth	r3, r3
 8001714:	3301      	adds	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	827b      	strh	r3, [r7, #18]
 800171a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800171e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001722:	429a      	cmp	r2, r3
 8001724:	dbc9      	blt.n	80016ba <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001726:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800172a:	b29b      	uxth	r3, r3
 800172c:	3301      	adds	r3, #1
 800172e:	b29b      	uxth	r3, r3
 8001730:	82bb      	strh	r3, [r7, #20]
 8001732:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001736:	b29b      	uxth	r3, r3
 8001738:	3301      	adds	r3, #1
 800173a:	b29b      	uxth	r3, r3
 800173c:	81bb      	strh	r3, [r7, #12]
 800173e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001742:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001746:	429a      	cmp	r2, r3
 8001748:	dbb4      	blt.n	80016b4 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800174a:	bf00      	nop
 800174c:	bf00      	nop
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800175a:	f000 fa29 	bl	8001bb0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800175e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001762:	2201      	movs	r2, #1
 8001764:	2178      	movs	r1, #120	; 0x78
 8001766:	485b      	ldr	r0, [pc, #364]	; (80018d4 <SSD1306_Init+0x180>)
 8001768:	f001 f904 	bl	8002974 <HAL_I2C_IsDeviceReady>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001772:	2300      	movs	r3, #0
 8001774:	e0a9      	b.n	80018ca <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001776:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800177a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800177c:	e002      	b.n	8001784 <SSD1306_Init+0x30>
		p--;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3b01      	subs	r3, #1
 8001782:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f9      	bne.n	800177e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800178a:	22ae      	movs	r2, #174	; 0xae
 800178c:	2100      	movs	r1, #0
 800178e:	2078      	movs	r0, #120	; 0x78
 8001790:	f000 fa6c 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001794:	2220      	movs	r2, #32
 8001796:	2100      	movs	r1, #0
 8001798:	2078      	movs	r0, #120	; 0x78
 800179a:	f000 fa67 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800179e:	2210      	movs	r2, #16
 80017a0:	2100      	movs	r1, #0
 80017a2:	2078      	movs	r0, #120	; 0x78
 80017a4:	f000 fa62 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80017a8:	22b0      	movs	r2, #176	; 0xb0
 80017aa:	2100      	movs	r1, #0
 80017ac:	2078      	movs	r0, #120	; 0x78
 80017ae:	f000 fa5d 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80017b2:	22c8      	movs	r2, #200	; 0xc8
 80017b4:	2100      	movs	r1, #0
 80017b6:	2078      	movs	r0, #120	; 0x78
 80017b8:	f000 fa58 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	2078      	movs	r0, #120	; 0x78
 80017c2:	f000 fa53 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80017c6:	2210      	movs	r2, #16
 80017c8:	2100      	movs	r1, #0
 80017ca:	2078      	movs	r0, #120	; 0x78
 80017cc:	f000 fa4e 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80017d0:	2240      	movs	r2, #64	; 0x40
 80017d2:	2100      	movs	r1, #0
 80017d4:	2078      	movs	r0, #120	; 0x78
 80017d6:	f000 fa49 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80017da:	2281      	movs	r2, #129	; 0x81
 80017dc:	2100      	movs	r1, #0
 80017de:	2078      	movs	r0, #120	; 0x78
 80017e0:	f000 fa44 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80017e4:	22ff      	movs	r2, #255	; 0xff
 80017e6:	2100      	movs	r1, #0
 80017e8:	2078      	movs	r0, #120	; 0x78
 80017ea:	f000 fa3f 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80017ee:	22a1      	movs	r2, #161	; 0xa1
 80017f0:	2100      	movs	r1, #0
 80017f2:	2078      	movs	r0, #120	; 0x78
 80017f4:	f000 fa3a 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80017f8:	22a6      	movs	r2, #166	; 0xa6
 80017fa:	2100      	movs	r1, #0
 80017fc:	2078      	movs	r0, #120	; 0x78
 80017fe:	f000 fa35 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001802:	22a8      	movs	r2, #168	; 0xa8
 8001804:	2100      	movs	r1, #0
 8001806:	2078      	movs	r0, #120	; 0x78
 8001808:	f000 fa30 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800180c:	223f      	movs	r2, #63	; 0x3f
 800180e:	2100      	movs	r1, #0
 8001810:	2078      	movs	r0, #120	; 0x78
 8001812:	f000 fa2b 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001816:	22a4      	movs	r2, #164	; 0xa4
 8001818:	2100      	movs	r1, #0
 800181a:	2078      	movs	r0, #120	; 0x78
 800181c:	f000 fa26 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001820:	22d3      	movs	r2, #211	; 0xd3
 8001822:	2100      	movs	r1, #0
 8001824:	2078      	movs	r0, #120	; 0x78
 8001826:	f000 fa21 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	2078      	movs	r0, #120	; 0x78
 8001830:	f000 fa1c 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001834:	22d5      	movs	r2, #213	; 0xd5
 8001836:	2100      	movs	r1, #0
 8001838:	2078      	movs	r0, #120	; 0x78
 800183a:	f000 fa17 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800183e:	22f0      	movs	r2, #240	; 0xf0
 8001840:	2100      	movs	r1, #0
 8001842:	2078      	movs	r0, #120	; 0x78
 8001844:	f000 fa12 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001848:	22d9      	movs	r2, #217	; 0xd9
 800184a:	2100      	movs	r1, #0
 800184c:	2078      	movs	r0, #120	; 0x78
 800184e:	f000 fa0d 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001852:	2222      	movs	r2, #34	; 0x22
 8001854:	2100      	movs	r1, #0
 8001856:	2078      	movs	r0, #120	; 0x78
 8001858:	f000 fa08 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800185c:	22da      	movs	r2, #218	; 0xda
 800185e:	2100      	movs	r1, #0
 8001860:	2078      	movs	r0, #120	; 0x78
 8001862:	f000 fa03 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001866:	2212      	movs	r2, #18
 8001868:	2100      	movs	r1, #0
 800186a:	2078      	movs	r0, #120	; 0x78
 800186c:	f000 f9fe 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001870:	22db      	movs	r2, #219	; 0xdb
 8001872:	2100      	movs	r1, #0
 8001874:	2078      	movs	r0, #120	; 0x78
 8001876:	f000 f9f9 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800187a:	2220      	movs	r2, #32
 800187c:	2100      	movs	r1, #0
 800187e:	2078      	movs	r0, #120	; 0x78
 8001880:	f000 f9f4 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001884:	228d      	movs	r2, #141	; 0x8d
 8001886:	2100      	movs	r1, #0
 8001888:	2078      	movs	r0, #120	; 0x78
 800188a:	f000 f9ef 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800188e:	2214      	movs	r2, #20
 8001890:	2100      	movs	r1, #0
 8001892:	2078      	movs	r0, #120	; 0x78
 8001894:	f000 f9ea 	bl	8001c6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001898:	22af      	movs	r2, #175	; 0xaf
 800189a:	2100      	movs	r1, #0
 800189c:	2078      	movs	r0, #120	; 0x78
 800189e:	f000 f9e5 	bl	8001c6c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80018a2:	222e      	movs	r2, #46	; 0x2e
 80018a4:	2100      	movs	r1, #0
 80018a6:	2078      	movs	r0, #120	; 0x78
 80018a8:	f000 f9e0 	bl	8001c6c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f000 f843 	bl	8001938 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80018b2:	f000 f813 	bl	80018dc <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <SSD1306_Init+0x184>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <SSD1306_Init+0x184>)
 80018be:	2200      	movs	r2, #0
 80018c0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SSD1306_Init+0x184>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000107c 	.word	0x2000107c
 80018d8:	20001070 	.word	0x20001070

080018dc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80018e2:	2300      	movs	r3, #0
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	e01d      	b.n	8001924 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	3b50      	subs	r3, #80	; 0x50
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	461a      	mov	r2, r3
 80018f0:	2100      	movs	r1, #0
 80018f2:	2078      	movs	r0, #120	; 0x78
 80018f4:	f000 f9ba 	bl	8001c6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2100      	movs	r1, #0
 80018fc:	2078      	movs	r0, #120	; 0x78
 80018fe:	f000 f9b5 	bl	8001c6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001902:	2210      	movs	r2, #16
 8001904:	2100      	movs	r1, #0
 8001906:	2078      	movs	r0, #120	; 0x78
 8001908:	f000 f9b0 	bl	8001c6c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	01db      	lsls	r3, r3, #7
 8001910:	4a08      	ldr	r2, [pc, #32]	; (8001934 <SSD1306_UpdateScreen+0x58>)
 8001912:	441a      	add	r2, r3
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	2140      	movs	r1, #64	; 0x40
 8001918:	2078      	movs	r0, #120	; 0x78
 800191a:	f000 f95f 	bl	8001bdc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	3301      	adds	r3, #1
 8001922:	71fb      	strb	r3, [r7, #7]
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	2b07      	cmp	r3, #7
 8001928:	d9de      	bls.n	80018e8 <SSD1306_UpdateScreen+0xc>
	}
}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000c70 	.word	0x20000c70

08001938 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <SSD1306_Fill+0x14>
 8001948:	2300      	movs	r3, #0
 800194a:	e000      	b.n	800194e <SSD1306_Fill+0x16>
 800194c:	23ff      	movs	r3, #255	; 0xff
 800194e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001952:	4619      	mov	r1, r3
 8001954:	4803      	ldr	r0, [pc, #12]	; (8001964 <SSD1306_Fill+0x2c>)
 8001956:	f001 ffc9 	bl	80038ec <memset>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000c70 	.word	0x20000c70

08001968 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	80fb      	strh	r3, [r7, #6]
 8001972:	460b      	mov	r3, r1
 8001974:	80bb      	strh	r3, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	70fb      	strb	r3, [r7, #3]
	if (
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	2b7f      	cmp	r3, #127	; 0x7f
 800197e:	d848      	bhi.n	8001a12 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001980:	88bb      	ldrh	r3, [r7, #4]
 8001982:	2b3f      	cmp	r3, #63	; 0x3f
 8001984:	d845      	bhi.n	8001a12 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <SSD1306_DrawPixel+0xb8>)
 8001988:	791b      	ldrb	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d006      	beq.n	800199c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d11a      	bne.n	80019d8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80019a2:	88fa      	ldrh	r2, [r7, #6]
 80019a4:	88bb      	ldrh	r3, [r7, #4]
 80019a6:	08db      	lsrs	r3, r3, #3
 80019a8:	b298      	uxth	r0, r3
 80019aa:	4603      	mov	r3, r0
 80019ac:	01db      	lsls	r3, r3, #7
 80019ae:	4413      	add	r3, r2
 80019b0:	4a1c      	ldr	r2, [pc, #112]	; (8001a24 <SSD1306_DrawPixel+0xbc>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	b25a      	sxtb	r2, r3
 80019b6:	88bb      	ldrh	r3, [r7, #4]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	2101      	movs	r1, #1
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b259      	sxtb	r1, r3
 80019c8:	88fa      	ldrh	r2, [r7, #6]
 80019ca:	4603      	mov	r3, r0
 80019cc:	01db      	lsls	r3, r3, #7
 80019ce:	4413      	add	r3, r2
 80019d0:	b2c9      	uxtb	r1, r1
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <SSD1306_DrawPixel+0xbc>)
 80019d4:	54d1      	strb	r1, [r2, r3]
 80019d6:	e01d      	b.n	8001a14 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019d8:	88fa      	ldrh	r2, [r7, #6]
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	b298      	uxth	r0, r3
 80019e0:	4603      	mov	r3, r0
 80019e2:	01db      	lsls	r3, r3, #7
 80019e4:	4413      	add	r3, r2
 80019e6:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <SSD1306_DrawPixel+0xbc>)
 80019e8:	5cd3      	ldrb	r3, [r2, r3]
 80019ea:	b25a      	sxtb	r2, r3
 80019ec:	88bb      	ldrh	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	2101      	movs	r1, #1
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	4013      	ands	r3, r2
 8001a00:	b259      	sxtb	r1, r3
 8001a02:	88fa      	ldrh	r2, [r7, #6]
 8001a04:	4603      	mov	r3, r0
 8001a06:	01db      	lsls	r3, r3, #7
 8001a08:	4413      	add	r3, r2
 8001a0a:	b2c9      	uxtb	r1, r1
 8001a0c:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <SSD1306_DrawPixel+0xbc>)
 8001a0e:	54d1      	strb	r1, [r2, r3]
 8001a10:	e000      	b.n	8001a14 <SSD1306_DrawPixel+0xac>
		return;
 8001a12:	bf00      	nop
	}
}
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20001070 	.word	0x20001070
 8001a24:	20000c70 	.word	0x20000c70

08001a28 <SSD1306_GotoXY>:
 * 			x - The x-coordinate of the new position
 * 			y - The y-coordinate of the new position.
 *
 * @return void
 */
void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	460a      	mov	r2, r1
 8001a32:	80fb      	strh	r3, [r7, #6]
 8001a34:	4613      	mov	r3, r2
 8001a36:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a38:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <SSD1306_GotoXY+0x28>)
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <SSD1306_GotoXY+0x28>)
 8001a40:	88bb      	ldrh	r3, [r7, #4]
 8001a42:	8053      	strh	r3, [r2, #2]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	20001070 	.word	0x20001070

08001a54 <SSD1306_Putc>:
 *
 * @brief Used to display a single character on the SSD1306 OLED screen.
 *
 * @params
 */
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	4613      	mov	r3, r2
 8001a62:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a64:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
	if (
 8001a70:	2b7f      	cmp	r3, #127	; 0x7f
 8001a72:	dc07      	bgt.n	8001a84 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a74:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001a76:	885b      	ldrh	r3, [r3, #2]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a80:	2b3f      	cmp	r3, #63	; 0x3f
 8001a82:	dd01      	ble.n	8001a88 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e05e      	b.n	8001b46 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e04b      	b.n	8001b26 <SSD1306_Putc+0xd2>
		/* Get row data */
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	3b20      	subs	r3, #32
 8001a96:	6839      	ldr	r1, [r7, #0]
 8001a98:	7849      	ldrb	r1, [r1, #1]
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	440b      	add	r3, r1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	60fb      	str	r3, [r7, #12]
		/* Go through columns */
		for (j = 0; j < Font->FontWidth; j++) {
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	e030      	b.n	8001b14 <SSD1306_Putc+0xc0>
			/* Draw pixel */
			if ((b << j) & 0x8000) {
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d010      	beq.n	8001ae4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001ac4:	881a      	ldrh	r2, [r3, #0]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	b298      	uxth	r0, r3
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001ad0:	885a      	ldrh	r2, [r3, #2]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	79ba      	ldrb	r2, [r7, #6]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff ff43 	bl	8001968 <SSD1306_DrawPixel>
 8001ae2:	e014      	b.n	8001b0e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001ae6:	881a      	ldrh	r2, [r3, #0]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	b298      	uxth	r0, r3
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001af2:	885a      	ldrh	r2, [r3, #2]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	b299      	uxth	r1, r3
 8001afc:	79bb      	ldrb	r3, [r7, #6]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f7ff ff2d 	bl	8001968 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	3301      	adds	r3, #1
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d3c8      	bcc.n	8001ab2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	785b      	ldrb	r3, [r3, #1]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d3ad      	bcc.n	8001a8e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001b34:	881a      	ldrh	r2, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <SSD1306_Putc+0xfc>)
 8001b42:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20001070 	.word	0x20001070

08001b54 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001b62:	e012      	b.n	8001b8a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	79fa      	ldrb	r2, [r7, #7]
 8001b6a:	68b9      	ldr	r1, [r7, #8]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff71 	bl	8001a54 <SSD1306_Putc>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d002      	beq.n	8001b84 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	e008      	b.n	8001b96 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3301      	adds	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1e8      	bne.n	8001b64 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	781b      	ldrb	r3, [r3, #0]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff fec8 	bl	8001938 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001ba8:	f7ff fe98 	bl	80018dc <SSD1306_UpdateScreen>
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <ssd1306_I2C_Init+0x28>)
 8001bb8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bba:	e002      	b.n	8001bc2 <ssd1306_I2C_Init+0x12>
		p--;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f9      	bne.n	8001bbc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	0003d090 	.word	0x0003d090

08001bdc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b0c7      	sub	sp, #284	; 0x11c
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	4604      	mov	r4, r0
 8001be4:	4608      	mov	r0, r1
 8001be6:	4639      	mov	r1, r7
 8001be8:	600a      	str	r2, [r1, #0]
 8001bea:	4619      	mov	r1, r3
 8001bec:	1dfb      	adds	r3, r7, #7
 8001bee:	4622      	mov	r2, r4
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	1dbb      	adds	r3, r7, #6
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	701a      	strb	r2, [r3, #0]
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	460a      	mov	r2, r1
 8001bfc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	1dba      	adds	r2, r7, #6
 8001c04:	7812      	ldrb	r2, [r2, #0]
 8001c06:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c0e:	e010      	b.n	8001c32 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001c10:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c14:	463a      	mov	r2, r7
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	441a      	add	r2, r3
 8001c1a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c1e:	3301      	adds	r3, #1
 8001c20:	7811      	ldrb	r1, [r2, #0]
 8001c22:	f107 020c 	add.w	r2, r7, #12
 8001c26:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001c28:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c32:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	1d3a      	adds	r2, r7, #4
 8001c3a:	8812      	ldrh	r2, [r2, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d8e7      	bhi.n	8001c10 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001c40:	1dfb      	adds	r3, r7, #7
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b299      	uxth	r1, r3
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	f107 020c 	add.w	r2, r7, #12
 8001c52:	200a      	movs	r0, #10
 8001c54:	9000      	str	r0, [sp, #0]
 8001c56:	4804      	ldr	r0, [pc, #16]	; (8001c68 <ssd1306_I2C_WriteMulti+0x8c>)
 8001c58:	f000 fd8e 	bl	8002778 <HAL_I2C_Master_Transmit>
}
 8001c5c:	bf00      	nop
 8001c5e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd90      	pop	{r4, r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000107c 	.word	0x2000107c

08001c6c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
 8001c76:	460b      	mov	r3, r1
 8001c78:	71bb      	strb	r3, [r7, #6]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001c7e:	79bb      	ldrb	r3, [r7, #6]
 8001c80:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c82:	797b      	ldrb	r3, [r7, #5]
 8001c84:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	b299      	uxth	r1, r3
 8001c8a:	f107 020c 	add.w	r2, r7, #12
 8001c8e:	230a      	movs	r3, #10
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2302      	movs	r3, #2
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <ssd1306_I2C_Write+0x38>)
 8001c96:	f000 fd6f 	bl	8002778 <HAL_I2C_Master_Transmit>
}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000107c 	.word	0x2000107c

08001ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ce6:	2007      	movs	r0, #7
 8001ce8:	f000 fa30 	bl	800214c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_I2C_MspInit+0x84>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12b      	bne.n	8001d72 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_I2C_MspInit+0x88>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <HAL_I2C_MspInit+0x88>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_I2C_MspInit+0x88>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d36:	23c0      	movs	r3, #192	; 0xc0
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d3a:	2312      	movs	r3, #18
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d46:	2304      	movs	r3, #4
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	480c      	ldr	r0, [pc, #48]	; (8001d84 <HAL_I2C_MspInit+0x8c>)
 8001d52:	f000 fa2f 	bl	80021b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_I2C_MspInit+0x88>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a08      	ldr	r2, [pc, #32]	; (8001d80 <HAL_I2C_MspInit+0x88>)
 8001d60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_I2C_MspInit+0x88>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	; 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40005400 	.word	0x40005400
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020400 	.word	0x40020400

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <NMI_Handler+0x4>

08001d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <HardFault_Handler+0x4>

08001d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <MemManage_Handler+0x4>

08001d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <BusFault_Handler+0x4>

08001da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <UsageFault_Handler+0x4>

08001da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <SystemInit+0x20>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <SystemInit+0x20>)
 8001ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_SetPriority>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	db0a      	blt.n	8001e1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	490c      	ldr	r1, [pc, #48]	; (8001e40 <__NVIC_SetPriority+0x4c>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	0112      	lsls	r2, r2, #4
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	440b      	add	r3, r1
 8001e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e1c:	e00a      	b.n	8001e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4908      	ldr	r1, [pc, #32]	; (8001e44 <__NVIC_SetPriority+0x50>)
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	3b04      	subs	r3, #4
 8001e2c:	0112      	lsls	r2, r2, #4
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	440b      	add	r3, r1
 8001e32:	761a      	strb	r2, [r3, #24]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000e100 	.word	0xe000e100
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <Init_Systick>:
 *
 * @Source: Dean Textbook listing 7.1
 *
 * SysTick Interrupt Time Period = (SysTick_LOAD + 1) * Clock Period
*/
void Init_Systick(void){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	SysTick->LOAD = (ALTERNATE_CLOCK/ONE_MILLISEC);	//Set reload to get 1ms interrupts
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <Init_Systick+0x2c>)
 8001e4e:	f240 7253 	movw	r2, #1875	; 0x753
 8001e52:	605a      	str	r2, [r3, #4]
	NVIC_SetPriority(SysTick_IRQn, 3);			//Set interrupt priority
 8001e54:	2103      	movs	r1, #3
 8001e56:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5a:	f7ff ffcb 	bl	8001df4 <__NVIC_SetPriority>
	SysTick->VAL = 0;							//Force load of reload value
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <Init_Systick+0x2c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_TICKINT_Msk | 	//Enable interrupt,alt.clocksource
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <Init_Systick+0x2c>)
 8001e66:	2203      	movs	r2, #3
 8001e68:	601a      	str	r2, [r3, #0]
					SysTick_CTRL_ENABLE_Msk;	//Enable SysTick timer
	msec_since_startup = 0;
 8001e6a:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <Init_Systick+0x30>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	e000e010 	.word	0xe000e010
 8001e78:	200010d0 	.word	0x200010d0

08001e7c <SysTick_Handler>:
 *
 * @Source: Dean Textbook listing 7.2
 *
 */

void SysTick_Handler(void){
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
	Systick_count++;
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <SysTick_Handler+0x24>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	3301      	adds	r3, #1
 8001e86:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <SysTick_Handler+0x24>)
 8001e88:	6013      	str	r3, [r2, #0]
	msec_since_startup ++;
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <SysTick_Handler+0x28>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <SysTick_Handler+0x28>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20001078 	.word	0x20001078
 8001ea4:	200010d0 	.word	0x200010d0

08001ea8 <Start_Systick_Count>:
int getter_msec_since_startup(void){
	return msec_since_startup;
}

//Start the Systick Count
void Start_Systick_Count(void){
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
	Systick_count=0; //// Reset Systick count
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <Start_Systick_Count+0x14>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	20001078 	.word	0x20001078

08001ec0 <get_Systick_Count>:
//Stop the Systick Count
int get_Systick_Count(void){
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
	return Systick_count;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <get_Systick_Count+0x14>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20001078 	.word	0x20001078

08001ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ede:	490e      	ldr	r1, [pc, #56]	; (8001f18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ef4:	4c0b      	ldr	r4, [pc, #44]	; (8001f24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f02:	f7ff ff65 	bl	8001dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f06:	f001 fccd 	bl	80038a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0a:	f7fe febb 	bl	8000c84 <main>
  bx  lr    
 8001f0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f18:	20000c30 	.word	0x20000c30
  ldr r2, =_sidata
 8001f1c:	080053f4 	.word	0x080053f4
  ldr r2, =_sbss
 8001f20:	20000c30 	.word	0x20000c30
  ldr r4, =_ebss
 8001f24:	200010dc 	.word	0x200010dc

08001f28 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <DMA1_Stream0_IRQHandler>
	...

08001f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f30:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <HAL_Init+0x40>)
 8001f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_Init+0x40>)
 8001f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_Init+0x40>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f54:	2003      	movs	r0, #3
 8001f56:	f000 f8f9 	bl	800214c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f000 f808 	bl	8001f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f60:	f7ff fea2 	bl	8001ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023c00 	.word	0x40023c00

08001f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_InitTick+0x54>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_InitTick+0x58>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f903 	bl	800219a <HAL_SYSTICK_Config>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00e      	b.n	8001fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b0f      	cmp	r3, #15
 8001fa2:	d80a      	bhi.n	8001fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f000 f8d9 	bl	8002162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb0:	4a06      	ldr	r2, [pc, #24]	; (8001fcc <HAL_InitTick+0x5c>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e000      	b.n	8001fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000c24 	.word	0x20000c24
 8001fc8:	20000c2c 	.word	0x20000c2c
 8001fcc:	20000c28 	.word	0x20000c28

08001fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <HAL_GetTick+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200010d8 	.word	0x200010d8

08001fe8 <__NVIC_SetPriorityGrouping>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201a:	4a04      	ldr	r2, [pc, #16]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	60d3      	str	r3, [r2, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_GetPriorityGrouping>:
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_SetPriority>:
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	2b00      	cmp	r3, #0
 800205e:	db0a      	blt.n	8002076 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	490c      	ldr	r1, [pc, #48]	; (8002098 <__NVIC_SetPriority+0x4c>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	0112      	lsls	r2, r2, #4
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	440b      	add	r3, r1
 8002070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002074:	e00a      	b.n	800208c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4908      	ldr	r1, [pc, #32]	; (800209c <__NVIC_SetPriority+0x50>)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	3b04      	subs	r3, #4
 8002084:	0112      	lsls	r2, r2, #4
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	440b      	add	r3, r1
 800208a:	761a      	strb	r2, [r3, #24]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000e100 	.word	0xe000e100
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f1c3 0307 	rsb	r3, r3, #7
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	bf28      	it	cs
 80020be:	2304      	movcs	r3, #4
 80020c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3304      	adds	r3, #4
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d902      	bls.n	80020d0 <NVIC_EncodePriority+0x30>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3b03      	subs	r3, #3
 80020ce:	e000      	b.n	80020d2 <NVIC_EncodePriority+0x32>
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43da      	mvns	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	401a      	ands	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	43d9      	mvns	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	4313      	orrs	r3, r2
         );
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3724      	adds	r7, #36	; 0x24
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002118:	d301      	bcc.n	800211e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800211a:	2301      	movs	r3, #1
 800211c:	e00f      	b.n	800213e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <SysTick_Config+0x40>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002126:	210f      	movs	r1, #15
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
 800212c:	f7ff ff8e 	bl	800204c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <SysTick_Config+0x40>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <SysTick_Config+0x40>)
 8002138:	2207      	movs	r2, #7
 800213a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	e000e010 	.word	0xe000e010

0800214c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ff47 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002162:	b580      	push	{r7, lr}
 8002164:	b086      	sub	sp, #24
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002174:	f7ff ff5c 	bl	8002030 <__NVIC_GetPriorityGrouping>
 8002178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	6978      	ldr	r0, [r7, #20]
 8002180:	f7ff ff8e 	bl	80020a0 <NVIC_EncodePriority>
 8002184:	4602      	mov	r2, r0
 8002186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff5d 	bl	800204c <__NVIC_SetPriority>
}
 8002192:	bf00      	nop
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ffb0 	bl	8002108 <SysTick_Config>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	e159      	b.n	8002484 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	f040 8148 	bne.w	800247e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d005      	beq.n	8002206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002202:	2b02      	cmp	r3, #2
 8002204:	d130      	bne.n	8002268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 0201 	and.w	r2, r3, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b03      	cmp	r3, #3
 8002272:	d017      	beq.n	80022a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d123      	bne.n	80022f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	08da      	lsrs	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	69b9      	ldr	r1, [r7, #24]
 80022f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0203 	and.w	r2, r3, #3
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a2 	beq.w	800247e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b57      	ldr	r3, [pc, #348]	; (800249c <HAL_GPIO_Init+0x2e8>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	4a56      	ldr	r2, [pc, #344]	; (800249c <HAL_GPIO_Init+0x2e8>)
 8002344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002348:	6453      	str	r3, [r2, #68]	; 0x44
 800234a:	4b54      	ldr	r3, [pc, #336]	; (800249c <HAL_GPIO_Init+0x2e8>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002356:	4a52      	ldr	r2, [pc, #328]	; (80024a0 <HAL_GPIO_Init+0x2ec>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a49      	ldr	r2, [pc, #292]	; (80024a4 <HAL_GPIO_Init+0x2f0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d019      	beq.n	80023b6 <HAL_GPIO_Init+0x202>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a48      	ldr	r2, [pc, #288]	; (80024a8 <HAL_GPIO_Init+0x2f4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0x1fe>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a47      	ldr	r2, [pc, #284]	; (80024ac <HAL_GPIO_Init+0x2f8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00d      	beq.n	80023ae <HAL_GPIO_Init+0x1fa>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_GPIO_Init+0x2fc>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x1f6>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a45      	ldr	r2, [pc, #276]	; (80024b4 <HAL_GPIO_Init+0x300>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_GPIO_Init+0x1f2>
 80023a2:	2304      	movs	r3, #4
 80023a4:	e008      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023aa:	2303      	movs	r3, #3
 80023ac:	e004      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e002      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023b6:	2300      	movs	r3, #0
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f002 0203 	and.w	r2, r2, #3
 80023be:	0092      	lsls	r2, r2, #2
 80023c0:	4093      	lsls	r3, r2
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c8:	4935      	ldr	r1, [pc, #212]	; (80024a0 <HAL_GPIO_Init+0x2ec>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	3302      	adds	r3, #2
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d6:	4b38      	ldr	r3, [pc, #224]	; (80024b8 <HAL_GPIO_Init+0x304>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023fa:	4a2f      	ldr	r2, [pc, #188]	; (80024b8 <HAL_GPIO_Init+0x304>)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002400:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002424:	4a24      	ldr	r2, [pc, #144]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <HAL_GPIO_Init+0x304>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800244e:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_GPIO_Init+0x304>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002478:	4a0f      	ldr	r2, [pc, #60]	; (80024b8 <HAL_GPIO_Init+0x304>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3301      	adds	r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	f67f aea2 	bls.w	80021d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3724      	adds	r7, #36	; 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	40013800 	.word	0x40013800
 80024a4:	40020000 	.word	0x40020000
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020800 	.word	0x40020800
 80024b0:	40020c00 	.word	0x40020c00
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40013c00 	.word	0x40013c00

080024bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
 80024c8:	4613      	mov	r3, r2
 80024ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024cc:	787b      	ldrb	r3, [r7, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d8:	e003      	b.n	80024e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	041a      	lsls	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	619a      	str	r2, [r3, #24]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e12b      	b.n	800275a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff fbee 	bl	8001cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2224      	movs	r2, #36	; 0x24
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002542:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002552:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002554:	f001 f992 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 8002558:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4a81      	ldr	r2, [pc, #516]	; (8002764 <HAL_I2C_Init+0x274>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d807      	bhi.n	8002574 <HAL_I2C_Init+0x84>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a80      	ldr	r2, [pc, #512]	; (8002768 <HAL_I2C_Init+0x278>)
 8002568:	4293      	cmp	r3, r2
 800256a:	bf94      	ite	ls
 800256c:	2301      	movls	r3, #1
 800256e:	2300      	movhi	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	e006      	b.n	8002582 <HAL_I2C_Init+0x92>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4a7d      	ldr	r2, [pc, #500]	; (800276c <HAL_I2C_Init+0x27c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	bf94      	ite	ls
 800257c:	2301      	movls	r3, #1
 800257e:	2300      	movhi	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e0e7      	b.n	800275a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a78      	ldr	r2, [pc, #480]	; (8002770 <HAL_I2C_Init+0x280>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	0c9b      	lsrs	r3, r3, #18
 8002594:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a6a      	ldr	r2, [pc, #424]	; (8002764 <HAL_I2C_Init+0x274>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d802      	bhi.n	80025c4 <HAL_I2C_Init+0xd4>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3301      	adds	r3, #1
 80025c2:	e009      	b.n	80025d8 <HAL_I2C_Init+0xe8>
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025ca:	fb02 f303 	mul.w	r3, r2, r3
 80025ce:	4a69      	ldr	r2, [pc, #420]	; (8002774 <HAL_I2C_Init+0x284>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	3301      	adds	r3, #1
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	430b      	orrs	r3, r1
 80025de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	495c      	ldr	r1, [pc, #368]	; (8002764 <HAL_I2C_Init+0x274>)
 80025f4:	428b      	cmp	r3, r1
 80025f6:	d819      	bhi.n	800262c <HAL_I2C_Init+0x13c>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1e59      	subs	r1, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fbb1 f3f3 	udiv	r3, r1, r3
 8002606:	1c59      	adds	r1, r3, #1
 8002608:	f640 73fc 	movw	r3, #4092	; 0xffc
 800260c:	400b      	ands	r3, r1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_I2C_Init+0x138>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1e59      	subs	r1, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002620:	3301      	adds	r3, #1
 8002622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002626:	e051      	b.n	80026cc <HAL_I2C_Init+0x1dc>
 8002628:	2304      	movs	r3, #4
 800262a:	e04f      	b.n	80026cc <HAL_I2C_Init+0x1dc>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d111      	bne.n	8002658 <HAL_I2C_Init+0x168>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1e58      	subs	r0, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6859      	ldr	r1, [r3, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	440b      	add	r3, r1
 8002642:	fbb0 f3f3 	udiv	r3, r0, r3
 8002646:	3301      	adds	r3, #1
 8002648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	e012      	b.n	800267e <HAL_I2C_Init+0x18e>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1e58      	subs	r0, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	0099      	lsls	r1, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	fbb0 f3f3 	udiv	r3, r0, r3
 800266e:	3301      	adds	r3, #1
 8002670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_I2C_Init+0x196>
 8002682:	2301      	movs	r3, #1
 8002684:	e022      	b.n	80026cc <HAL_I2C_Init+0x1dc>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10e      	bne.n	80026ac <HAL_I2C_Init+0x1bc>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1e58      	subs	r0, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6859      	ldr	r1, [r3, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	440b      	add	r3, r1
 800269c:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a0:	3301      	adds	r3, #1
 80026a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026aa:	e00f      	b.n	80026cc <HAL_I2C_Init+0x1dc>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1e58      	subs	r0, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	0099      	lsls	r1, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	6809      	ldr	r1, [r1, #0]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69da      	ldr	r2, [r3, #28]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6911      	ldr	r1, [r2, #16]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68d2      	ldr	r2, [r2, #12]
 8002706:	4311      	orrs	r1, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	430b      	orrs	r3, r1
 800270e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	000186a0 	.word	0x000186a0
 8002768:	001e847f 	.word	0x001e847f
 800276c:	003d08ff 	.word	0x003d08ff
 8002770:	431bde83 	.word	0x431bde83
 8002774:	10624dd3 	.word	0x10624dd3

08002778 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	461a      	mov	r2, r3
 8002784:	460b      	mov	r3, r1
 8002786:	817b      	strh	r3, [r7, #10]
 8002788:	4613      	mov	r3, r2
 800278a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800278c:	f7ff fc20 	bl	8001fd0 <HAL_GetTick>
 8002790:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b20      	cmp	r3, #32
 800279c:	f040 80e0 	bne.w	8002960 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2319      	movs	r3, #25
 80027a6:	2201      	movs	r2, #1
 80027a8:	4970      	ldr	r1, [pc, #448]	; (800296c <HAL_I2C_Master_Transmit+0x1f4>)
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fa92 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
 80027b8:	e0d3      	b.n	8002962 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_I2C_Master_Transmit+0x50>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e0cc      	b.n	8002962 <HAL_I2C_Master_Transmit+0x1ea>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d007      	beq.n	80027ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0201 	orr.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2221      	movs	r2, #33	; 0x21
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2210      	movs	r2, #16
 800280a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	893a      	ldrh	r2, [r7, #8]
 800281e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4a50      	ldr	r2, [pc, #320]	; (8002970 <HAL_I2C_Master_Transmit+0x1f8>)
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002830:	8979      	ldrh	r1, [r7, #10]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	6a3a      	ldr	r2, [r7, #32]
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f9ca 	bl	8002bd0 <I2C_MasterRequestWrite>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e08d      	b.n	8002962 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800285c:	e066      	b.n	800292c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	6a39      	ldr	r1, [r7, #32]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fb0c 	bl	8002e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00d      	beq.n	800288a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	2b04      	cmp	r3, #4
 8002874:	d107      	bne.n	8002886 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002884:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06b      	b.n	8002962 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	781a      	ldrb	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d11b      	bne.n	8002900 <HAL_I2C_Master_Transmit+0x188>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d017      	beq.n	8002900 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	781a      	ldrb	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	6a39      	ldr	r1, [r7, #32]
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 fafc 	bl	8002f02 <I2C_WaitOnBTFFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00d      	beq.n	800292c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	2b04      	cmp	r3, #4
 8002916:	d107      	bne.n	8002928 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002926:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e01a      	b.n	8002962 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002930:	2b00      	cmp	r3, #0
 8002932:	d194      	bne.n	800285e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	e000      	b.n	8002962 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002960:	2302      	movs	r3, #2
  }
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	00100002 	.word	0x00100002
 8002970:	ffff0000 	.word	0xffff0000

08002974 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	460b      	mov	r3, r1
 8002982:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002984:	f7ff fb24 	bl	8001fd0 <HAL_GetTick>
 8002988:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800298a:	2301      	movs	r3, #1
 800298c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b20      	cmp	r3, #32
 8002998:	f040 8111 	bne.w	8002bbe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2319      	movs	r3, #25
 80029a2:	2201      	movs	r2, #1
 80029a4:	4988      	ldr	r1, [pc, #544]	; (8002bc8 <HAL_I2C_IsDeviceReady+0x254>)
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f994 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80029b2:	2302      	movs	r3, #2
 80029b4:	e104      	b.n	8002bc0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_I2C_IsDeviceReady+0x50>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e0fd      	b.n	8002bc0 <HAL_I2C_IsDeviceReady+0x24c>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d007      	beq.n	80029ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2224      	movs	r2, #36	; 0x24
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a70      	ldr	r2, [pc, #448]	; (8002bcc <HAL_I2C_IsDeviceReady+0x258>)
 8002a0c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a1c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f952 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00d      	beq.n	8002a52 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a44:	d103      	bne.n	8002a4e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e0b6      	b.n	8002bc0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a52:	897b      	ldrh	r3, [r7, #10]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a60:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002a62:	f7ff fab5 	bl	8001fd0 <HAL_GetTick>
 8002a66:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	bf0c      	ite	eq
 8002a76:	2301      	moveq	r3, #1
 8002a78:	2300      	movne	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2301      	moveq	r3, #1
 8002a90:	2300      	movne	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a96:	e025      	b.n	8002ae4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a98:	f7ff fa9a 	bl	8001fd0 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d302      	bcc.n	8002aae <HAL_I2C_IsDeviceReady+0x13a>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d103      	bne.n	8002ab6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	22a0      	movs	r2, #160	; 0xa0
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2ba0      	cmp	r3, #160	; 0xa0
 8002aee:	d005      	beq.n	8002afc <HAL_I2C_IsDeviceReady+0x188>
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <HAL_I2C_IsDeviceReady+0x188>
 8002af6:	7dbb      	ldrb	r3, [r7, #22]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0cd      	beq.n	8002a98 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d129      	bne.n	8002b66 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b20:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	2319      	movs	r3, #25
 8002b3e:	2201      	movs	r2, #1
 8002b40:	4921      	ldr	r1, [pc, #132]	; (8002bc8 <HAL_I2C_IsDeviceReady+0x254>)
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f8c6 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e036      	b.n	8002bc0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e02c      	b.n	8002bc0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b74:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b7e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2319      	movs	r3, #25
 8002b86:	2201      	movs	r2, #1
 8002b88:	490f      	ldr	r1, [pc, #60]	; (8002bc8 <HAL_I2C_IsDeviceReady+0x254>)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f8a2 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e012      	b.n	8002bc0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	f4ff af32 	bcc.w	8002a0e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002bbe:	2302      	movs	r3, #2
  }
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	00100002 	.word	0x00100002
 8002bcc:	ffff0000 	.word	0xffff0000

08002bd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d006      	beq.n	8002bfa <I2C_MasterRequestWrite+0x2a>
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d003      	beq.n	8002bfa <I2C_MasterRequestWrite+0x2a>
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bf8:	d108      	bne.n	8002c0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	e00b      	b.n	8002c24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	2b12      	cmp	r3, #18
 8002c12:	d107      	bne.n	8002c24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f84f 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00d      	beq.n	8002c58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4a:	d103      	bne.n	8002c54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e035      	b.n	8002cc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c60:	d108      	bne.n	8002c74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c62:	897b      	ldrh	r3, [r7, #10]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c70:	611a      	str	r2, [r3, #16]
 8002c72:	e01b      	b.n	8002cac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c74:	897b      	ldrh	r3, [r7, #10]
 8002c76:	11db      	asrs	r3, r3, #7
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f003 0306 	and.w	r3, r3, #6
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f063 030f 	orn	r3, r3, #15
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	490e      	ldr	r1, [pc, #56]	; (8002ccc <I2C_MasterRequestWrite+0xfc>)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f875 	bl	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e010      	b.n	8002cc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ca2:	897b      	ldrh	r3, [r7, #10]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4907      	ldr	r1, [pc, #28]	; (8002cd0 <I2C_MasterRequestWrite+0x100>)
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f865 	bl	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	00010008 	.word	0x00010008
 8002cd0:	00010002 	.word	0x00010002

08002cd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ce4:	e025      	b.n	8002d32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d021      	beq.n	8002d32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cee:	f7ff f96f 	bl	8001fd0 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d302      	bcc.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d116      	bne.n	8002d32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f043 0220 	orr.w	r2, r3, #32
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e023      	b.n	8002d7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d10d      	bne.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	43da      	mvns	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4013      	ands	r3, r2
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	bf0c      	ite	eq
 8002d4e:	2301      	moveq	r3, #1
 8002d50:	2300      	movne	r3, #0
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	e00c      	b.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4013      	ands	r3, r2
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bf0c      	ite	eq
 8002d6a:	2301      	moveq	r3, #1
 8002d6c:	2300      	movne	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d0b6      	beq.n	8002ce6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d90:	e051      	b.n	8002e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da0:	d123      	bne.n	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f043 0204 	orr.w	r2, r3, #4
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e046      	b.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d021      	beq.n	8002e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df2:	f7ff f8ed 	bl	8001fd0 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d116      	bne.n	8002e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f043 0220 	orr.w	r2, r3, #32
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e020      	b.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d10c      	bne.n	8002e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	43da      	mvns	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf14      	ite	ne
 8002e52:	2301      	movne	r3, #1
 8002e54:	2300      	moveq	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	e00b      	b.n	8002e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	43da      	mvns	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4013      	ands	r3, r2
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf14      	ite	ne
 8002e6c:	2301      	movne	r3, #1
 8002e6e:	2300      	moveq	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d18d      	bne.n	8002d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e8c:	e02d      	b.n	8002eea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f878 	bl	8002f84 <I2C_IsAcknowledgeFailed>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e02d      	b.n	8002efa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d021      	beq.n	8002eea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea6:	f7ff f893 	bl	8001fd0 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d302      	bcc.n	8002ebc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d116      	bne.n	8002eea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f043 0220 	orr.w	r2, r3, #32
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e007      	b.n	8002efa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef4:	2b80      	cmp	r3, #128	; 0x80
 8002ef6:	d1ca      	bne.n	8002e8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f0e:	e02d      	b.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f837 	bl	8002f84 <I2C_IsAcknowledgeFailed>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e02d      	b.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f26:	d021      	beq.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f28:	f7ff f852 	bl	8001fd0 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d302      	bcc.n	8002f3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d116      	bne.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e007      	b.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d1ca      	bne.n	8002f10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9a:	d11b      	bne.n	8002fd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fa4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f043 0204 	orr.w	r2, r3, #4
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e264      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d075      	beq.n	80030ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003002:	4ba3      	ldr	r3, [pc, #652]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b04      	cmp	r3, #4
 800300c:	d00c      	beq.n	8003028 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300e:	4ba0      	ldr	r3, [pc, #640]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003016:	2b08      	cmp	r3, #8
 8003018:	d112      	bne.n	8003040 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301a:	4b9d      	ldr	r3, [pc, #628]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003026:	d10b      	bne.n	8003040 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	4b99      	ldr	r3, [pc, #612]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d05b      	beq.n	80030ec <HAL_RCC_OscConfig+0x108>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d157      	bne.n	80030ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e23f      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d106      	bne.n	8003058 <HAL_RCC_OscConfig+0x74>
 800304a:	4b91      	ldr	r3, [pc, #580]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a90      	ldr	r2, [pc, #576]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e01d      	b.n	8003094 <HAL_RCC_OscConfig+0xb0>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0x98>
 8003062:	4b8b      	ldr	r3, [pc, #556]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a8a      	ldr	r2, [pc, #552]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	4b88      	ldr	r3, [pc, #544]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a87      	ldr	r2, [pc, #540]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e00b      	b.n	8003094 <HAL_RCC_OscConfig+0xb0>
 800307c:	4b84      	ldr	r3, [pc, #528]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a83      	ldr	r2, [pc, #524]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	4b81      	ldr	r3, [pc, #516]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a80      	ldr	r2, [pc, #512]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 800308e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d013      	beq.n	80030c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe ff98 	bl	8001fd0 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a4:	f7fe ff94 	bl	8001fd0 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e204      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0xc0>
 80030c2:	e014      	b.n	80030ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fe ff84 	bl	8001fd0 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fe ff80 	bl	8001fd0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e1f0      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030de:	4b6c      	ldr	r3, [pc, #432]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0xe8>
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d063      	beq.n	80031c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030fa:	4b65      	ldr	r3, [pc, #404]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003106:	4b62      	ldr	r3, [pc, #392]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310e:	2b08      	cmp	r3, #8
 8003110:	d11c      	bne.n	800314c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003112:	4b5f      	ldr	r3, [pc, #380]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d116      	bne.n	800314c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311e:	4b5c      	ldr	r3, [pc, #368]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <HAL_RCC_OscConfig+0x152>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d001      	beq.n	8003136 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e1c4      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003136:	4b56      	ldr	r3, [pc, #344]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4952      	ldr	r1, [pc, #328]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314a:	e03a      	b.n	80031c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d020      	beq.n	8003196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003154:	4b4f      	ldr	r3, [pc, #316]	; (8003294 <HAL_RCC_OscConfig+0x2b0>)
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7fe ff39 	bl	8001fd0 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003162:	f7fe ff35 	bl	8001fd0 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e1a5      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003174:	4b46      	ldr	r3, [pc, #280]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003180:	4b43      	ldr	r3, [pc, #268]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4940      	ldr	r1, [pc, #256]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	4313      	orrs	r3, r2
 8003192:	600b      	str	r3, [r1, #0]
 8003194:	e015      	b.n	80031c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003196:	4b3f      	ldr	r3, [pc, #252]	; (8003294 <HAL_RCC_OscConfig+0x2b0>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe ff18 	bl	8001fd0 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a4:	f7fe ff14 	bl	8001fd0 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e184      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b6:	4b36      	ldr	r3, [pc, #216]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d030      	beq.n	8003230 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d6:	4b30      	ldr	r3, [pc, #192]	; (8003298 <HAL_RCC_OscConfig+0x2b4>)
 80031d8:	2201      	movs	r2, #1
 80031da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031dc:	f7fe fef8 	bl	8001fd0 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e4:	f7fe fef4 	bl	8001fd0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e164      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f6:	4b26      	ldr	r3, [pc, #152]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0x200>
 8003202:	e015      	b.n	8003230 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003204:	4b24      	ldr	r3, [pc, #144]	; (8003298 <HAL_RCC_OscConfig+0x2b4>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320a:	f7fe fee1 	bl	8001fd0 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003212:	f7fe fedd 	bl	8001fd0 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e14d      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003224:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80a0 	beq.w	800337e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10f      	bne.n	800326e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325c:	6413      	str	r3, [r2, #64]	; 0x40
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_RCC_OscConfig+0x2ac>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800326a:	2301      	movs	r3, #1
 800326c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_RCC_OscConfig+0x2b8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d121      	bne.n	80032be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_RCC_OscConfig+0x2b8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <HAL_RCC_OscConfig+0x2b8>)
 8003280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003286:	f7fe fea3 	bl	8001fd0 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328c:	e011      	b.n	80032b2 <HAL_RCC_OscConfig+0x2ce>
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	42470000 	.word	0x42470000
 8003298:	42470e80 	.word	0x42470e80
 800329c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a0:	f7fe fe96 	bl	8001fd0 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e106      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b2:	4b85      	ldr	r3, [pc, #532]	; (80034c8 <HAL_RCC_OscConfig+0x4e4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d106      	bne.n	80032d4 <HAL_RCC_OscConfig+0x2f0>
 80032c6:	4b81      	ldr	r3, [pc, #516]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	4a80      	ldr	r2, [pc, #512]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6713      	str	r3, [r2, #112]	; 0x70
 80032d2:	e01c      	b.n	800330e <HAL_RCC_OscConfig+0x32a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d10c      	bne.n	80032f6 <HAL_RCC_OscConfig+0x312>
 80032dc:	4b7b      	ldr	r3, [pc, #492]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	4a7a      	ldr	r2, [pc, #488]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 80032e2:	f043 0304 	orr.w	r3, r3, #4
 80032e6:	6713      	str	r3, [r2, #112]	; 0x70
 80032e8:	4b78      	ldr	r3, [pc, #480]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	4a77      	ldr	r2, [pc, #476]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6713      	str	r3, [r2, #112]	; 0x70
 80032f4:	e00b      	b.n	800330e <HAL_RCC_OscConfig+0x32a>
 80032f6:	4b75      	ldr	r3, [pc, #468]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	4a74      	ldr	r2, [pc, #464]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	6713      	str	r3, [r2, #112]	; 0x70
 8003302:	4b72      	ldr	r3, [pc, #456]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003306:	4a71      	ldr	r2, [pc, #452]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 8003308:	f023 0304 	bic.w	r3, r3, #4
 800330c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d015      	beq.n	8003342 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003316:	f7fe fe5b 	bl	8001fd0 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331c:	e00a      	b.n	8003334 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fe fe57 	bl	8001fd0 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e0c5      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003334:	4b65      	ldr	r3, [pc, #404]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ee      	beq.n	800331e <HAL_RCC_OscConfig+0x33a>
 8003340:	e014      	b.n	800336c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003342:	f7fe fe45 	bl	8001fd0 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fe fe41 	bl	8001fd0 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	; 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e0af      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003360:	4b5a      	ldr	r3, [pc, #360]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1ee      	bne.n	800334a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d105      	bne.n	800337e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003372:	4b56      	ldr	r3, [pc, #344]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a55      	ldr	r2, [pc, #340]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 8003378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 809b 	beq.w	80034be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003388:	4b50      	ldr	r3, [pc, #320]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b08      	cmp	r3, #8
 8003392:	d05c      	beq.n	800344e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d141      	bne.n	8003420 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339c:	4b4c      	ldr	r3, [pc, #304]	; (80034d0 <HAL_RCC_OscConfig+0x4ec>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7fe fe15 	bl	8001fd0 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fe fe11 	bl	8001fd0 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e081      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033bc:	4b43      	ldr	r3, [pc, #268]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	019b      	lsls	r3, r3, #6
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	3b01      	subs	r3, #1
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	061b      	lsls	r3, r3, #24
 80033ec:	4937      	ldr	r1, [pc, #220]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f2:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <HAL_RCC_OscConfig+0x4ec>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fe fdea 	bl	8001fd0 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe fde6 	bl	8001fd0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e056      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003412:	4b2e      	ldr	r3, [pc, #184]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x41c>
 800341e:	e04e      	b.n	80034be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003420:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_RCC_OscConfig+0x4ec>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe fdd3 	bl	8001fd0 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342e:	f7fe fdcf 	bl	8001fd0 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e03f      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003440:	4b22      	ldr	r3, [pc, #136]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f0      	bne.n	800342e <HAL_RCC_OscConfig+0x44a>
 800344c:	e037      	b.n	80034be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e032      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800345a:	4b1c      	ldr	r3, [pc, #112]	; (80034cc <HAL_RCC_OscConfig+0x4e8>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d028      	beq.n	80034ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d121      	bne.n	80034ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d11a      	bne.n	80034ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800348a:	4013      	ands	r3, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003490:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003492:	4293      	cmp	r3, r2
 8003494:	d111      	bne.n	80034ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a0:	085b      	lsrs	r3, r3, #1
 80034a2:	3b01      	subs	r3, #1
 80034a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d001      	beq.n	80034be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40007000 	.word	0x40007000
 80034cc:	40023800 	.word	0x40023800
 80034d0:	42470060 	.word	0x42470060

080034d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0cc      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e8:	4b68      	ldr	r3, [pc, #416]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d90c      	bls.n	8003510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b65      	ldr	r3, [pc, #404]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b63      	ldr	r3, [pc, #396]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0b8      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d020      	beq.n	800355e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003528:	4b59      	ldr	r3, [pc, #356]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a58      	ldr	r2, [pc, #352]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003532:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003540:	4b53      	ldr	r3, [pc, #332]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a52      	ldr	r2, [pc, #328]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800354a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800354c:	4b50      	ldr	r3, [pc, #320]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	494d      	ldr	r1, [pc, #308]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d044      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d107      	bne.n	8003582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	4b47      	ldr	r3, [pc, #284]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d119      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e07f      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d003      	beq.n	8003592 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358e:	2b03      	cmp	r3, #3
 8003590:	d107      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003592:	4b3f      	ldr	r3, [pc, #252]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e06f      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a2:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e067      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035b2:	4b37      	ldr	r3, [pc, #220]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f023 0203 	bic.w	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4934      	ldr	r1, [pc, #208]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c4:	f7fe fd04 	bl	8001fd0 <HAL_GetTick>
 80035c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	e00a      	b.n	80035e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035cc:	f7fe fd00 	bl	8001fd0 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e04f      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e2:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 020c 	and.w	r2, r3, #12
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d1eb      	bne.n	80035cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f4:	4b25      	ldr	r3, [pc, #148]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d20c      	bcs.n	800361c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4b22      	ldr	r3, [pc, #136]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	4b20      	ldr	r3, [pc, #128]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e032      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003628:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4916      	ldr	r1, [pc, #88]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	490e      	ldr	r1, [pc, #56]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800365a:	f000 f821 	bl	80036a0 <HAL_RCC_GetSysClockFreq>
 800365e:	4602      	mov	r2, r0
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	490a      	ldr	r1, [pc, #40]	; (8003694 <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	5ccb      	ldrb	r3, [r1, r3]
 800366e:	fa22 f303 	lsr.w	r3, r2, r3
 8003672:	4a09      	ldr	r2, [pc, #36]	; (8003698 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003676:	4b09      	ldr	r3, [pc, #36]	; (800369c <HAL_RCC_ClockConfig+0x1c8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe fc78 	bl	8001f70 <HAL_InitTick>

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023c00 	.word	0x40023c00
 8003690:	40023800 	.word	0x40023800
 8003694:	080053cc 	.word	0x080053cc
 8003698:	20000c24 	.word	0x20000c24
 800369c:	20000c28 	.word	0x20000c28

080036a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	607b      	str	r3, [r7, #4]
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	2300      	movs	r3, #0
 80036b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b8:	4b67      	ldr	r3, [pc, #412]	; (8003858 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d00d      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x40>
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	f200 80bd 	bhi.w	8003844 <HAL_RCC_GetSysClockFreq+0x1a4>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0x34>
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d003      	beq.n	80036da <HAL_RCC_GetSysClockFreq+0x3a>
 80036d2:	e0b7      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036d4:	4b61      	ldr	r3, [pc, #388]	; (800385c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036d6:	60bb      	str	r3, [r7, #8]
       break;
 80036d8:	e0b7      	b.n	800384a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036da:	4b61      	ldr	r3, [pc, #388]	; (8003860 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80036dc:	60bb      	str	r3, [r7, #8]
      break;
 80036de:	e0b4      	b.n	800384a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036e0:	4b5d      	ldr	r3, [pc, #372]	; (8003858 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ea:	4b5b      	ldr	r3, [pc, #364]	; (8003858 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d04d      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f6:	4b58      	ldr	r3, [pc, #352]	; (8003858 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	099b      	lsrs	r3, r3, #6
 80036fc:	461a      	mov	r2, r3
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003706:	f04f 0100 	mov.w	r1, #0
 800370a:	ea02 0800 	and.w	r8, r2, r0
 800370e:	ea03 0901 	and.w	r9, r3, r1
 8003712:	4640      	mov	r0, r8
 8003714:	4649      	mov	r1, r9
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	014b      	lsls	r3, r1, #5
 8003720:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003724:	0142      	lsls	r2, r0, #5
 8003726:	4610      	mov	r0, r2
 8003728:	4619      	mov	r1, r3
 800372a:	ebb0 0008 	subs.w	r0, r0, r8
 800372e:	eb61 0109 	sbc.w	r1, r1, r9
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	018b      	lsls	r3, r1, #6
 800373c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003740:	0182      	lsls	r2, r0, #6
 8003742:	1a12      	subs	r2, r2, r0
 8003744:	eb63 0301 	sbc.w	r3, r3, r1
 8003748:	f04f 0000 	mov.w	r0, #0
 800374c:	f04f 0100 	mov.w	r1, #0
 8003750:	00d9      	lsls	r1, r3, #3
 8003752:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003756:	00d0      	lsls	r0, r2, #3
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	eb12 0208 	adds.w	r2, r2, r8
 8003760:	eb43 0309 	adc.w	r3, r3, r9
 8003764:	f04f 0000 	mov.w	r0, #0
 8003768:	f04f 0100 	mov.w	r1, #0
 800376c:	0259      	lsls	r1, r3, #9
 800376e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003772:	0250      	lsls	r0, r2, #9
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4610      	mov	r0, r2
 800377a:	4619      	mov	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	461a      	mov	r2, r3
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	f7fc fd28 	bl	80001d8 <__aeabi_uldivmod>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4613      	mov	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	e04a      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003792:	4b31      	ldr	r3, [pc, #196]	; (8003858 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	099b      	lsrs	r3, r3, #6
 8003798:	461a      	mov	r2, r3
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037a2:	f04f 0100 	mov.w	r1, #0
 80037a6:	ea02 0400 	and.w	r4, r2, r0
 80037aa:	ea03 0501 	and.w	r5, r3, r1
 80037ae:	4620      	mov	r0, r4
 80037b0:	4629      	mov	r1, r5
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	014b      	lsls	r3, r1, #5
 80037bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037c0:	0142      	lsls	r2, r0, #5
 80037c2:	4610      	mov	r0, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	1b00      	subs	r0, r0, r4
 80037c8:	eb61 0105 	sbc.w	r1, r1, r5
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	018b      	lsls	r3, r1, #6
 80037d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037da:	0182      	lsls	r2, r0, #6
 80037dc:	1a12      	subs	r2, r2, r0
 80037de:	eb63 0301 	sbc.w	r3, r3, r1
 80037e2:	f04f 0000 	mov.w	r0, #0
 80037e6:	f04f 0100 	mov.w	r1, #0
 80037ea:	00d9      	lsls	r1, r3, #3
 80037ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037f0:	00d0      	lsls	r0, r2, #3
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	1912      	adds	r2, r2, r4
 80037f8:	eb45 0303 	adc.w	r3, r5, r3
 80037fc:	f04f 0000 	mov.w	r0, #0
 8003800:	f04f 0100 	mov.w	r1, #0
 8003804:	0299      	lsls	r1, r3, #10
 8003806:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800380a:	0290      	lsls	r0, r2, #10
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4610      	mov	r0, r2
 8003812:	4619      	mov	r1, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	461a      	mov	r2, r3
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	f7fc fcdc 	bl	80001d8 <__aeabi_uldivmod>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4613      	mov	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	0c1b      	lsrs	r3, r3, #16
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	3301      	adds	r3, #1
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	60bb      	str	r3, [r7, #8]
      break;
 8003842:	e002      	b.n	800384a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003846:	60bb      	str	r3, [r7, #8]
      break;
 8003848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800384a:	68bb      	ldr	r3, [r7, #8]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800
 800385c:	00f42400 	.word	0x00f42400
 8003860:	007a1200 	.word	0x007a1200

08003864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <HAL_RCC_GetHCLKFreq+0x14>)
 800386a:	681b      	ldr	r3, [r3, #0]
}
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	20000c24 	.word	0x20000c24

0800387c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003880:	f7ff fff0 	bl	8003864 <HAL_RCC_GetHCLKFreq>
 8003884:	4602      	mov	r2, r0
 8003886:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	0a9b      	lsrs	r3, r3, #10
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	4903      	ldr	r1, [pc, #12]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003892:	5ccb      	ldrb	r3, [r1, r3]
 8003894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003898:	4618      	mov	r0, r3
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40023800 	.word	0x40023800
 80038a0:	080053dc 	.word	0x080053dc

080038a4 <__libc_init_array>:
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	4d0d      	ldr	r5, [pc, #52]	; (80038dc <__libc_init_array+0x38>)
 80038a8:	4c0d      	ldr	r4, [pc, #52]	; (80038e0 <__libc_init_array+0x3c>)
 80038aa:	1b64      	subs	r4, r4, r5
 80038ac:	10a4      	asrs	r4, r4, #2
 80038ae:	2600      	movs	r6, #0
 80038b0:	42a6      	cmp	r6, r4
 80038b2:	d109      	bne.n	80038c8 <__libc_init_array+0x24>
 80038b4:	4d0b      	ldr	r5, [pc, #44]	; (80038e4 <__libc_init_array+0x40>)
 80038b6:	4c0c      	ldr	r4, [pc, #48]	; (80038e8 <__libc_init_array+0x44>)
 80038b8:	f000 f820 	bl	80038fc <_init>
 80038bc:	1b64      	subs	r4, r4, r5
 80038be:	10a4      	asrs	r4, r4, #2
 80038c0:	2600      	movs	r6, #0
 80038c2:	42a6      	cmp	r6, r4
 80038c4:	d105      	bne.n	80038d2 <__libc_init_array+0x2e>
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038cc:	4798      	blx	r3
 80038ce:	3601      	adds	r6, #1
 80038d0:	e7ee      	b.n	80038b0 <__libc_init_array+0xc>
 80038d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d6:	4798      	blx	r3
 80038d8:	3601      	adds	r6, #1
 80038da:	e7f2      	b.n	80038c2 <__libc_init_array+0x1e>
 80038dc:	080053ec 	.word	0x080053ec
 80038e0:	080053ec 	.word	0x080053ec
 80038e4:	080053ec 	.word	0x080053ec
 80038e8:	080053f0 	.word	0x080053f0

080038ec <memset>:
 80038ec:	4402      	add	r2, r0
 80038ee:	4603      	mov	r3, r0
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d100      	bne.n	80038f6 <memset+0xa>
 80038f4:	4770      	bx	lr
 80038f6:	f803 1b01 	strb.w	r1, [r3], #1
 80038fa:	e7f9      	b.n	80038f0 <memset+0x4>

080038fc <_init>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	bf00      	nop
 8003900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003902:	bc08      	pop	{r3}
 8003904:	469e      	mov	lr, r3
 8003906:	4770      	bx	lr

08003908 <_fini>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	bf00      	nop
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr
